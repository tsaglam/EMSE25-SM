id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07658807_21_200700267/prob21.java",,""
2,RECORDDECLARATION,"prob21",prob21.java(2:1-80:2),"public class prob21{
	static int [] pset;
    static class ramo implements Comparable<ramo>{
        int u;
        int v;
        double w;
        public ramo(int st, int end, double we){
           	u = st;
            v = end;
            w = we;
        }
        @Override
        public int compareTo(ramo o) {
            if(w > o.w)
                return -1;
            else
                return 1;
        }
    }
   
    static int findSet(int i){
    	if ( pset[i] == i ) {
    		return i ;
    	}
    	else {
    		return pset[i] = findSet(pset[i]);
    	}
    }

    static void unionSet(int i, int j){
        pset[findSet(i)] = pset[findSet(j)];
    }

    static boolean isSameSet(int i, int j){
        return findSet(i) == findSet(j); 
    }

    public static void initSet(int tamanho) { 
        pset = new int[tamanho]; 
        for (int i = 0; i < tamanho; i++){ 
        	pset[i] = i; 
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner ler = new Scanner(System.in);
        PriorityQueue<ramo> ramoList = new PriorityQueue<ramo>();
        int n = ler.nextInt();
        double [][] cord= new double[n][2];;
        double currLen; 
        double yDiff,xDiff;
        double min = 0.0;

        for (int i = 0; i < n; i++) {
            min = 0;
            initSet(n);
            cord[i][0] = ler.nextDouble();
            cord[i][1] = ler.nextDouble();
            for (int j = 0; j < n; j++) {
                for (int k = j+1; k < n; k++) {
                    xDiff = cord[j][0] - cord[k][0];
                    yDiff = cord[j][1] - cord[k][1];
                    currLen = Math.sqrt(yDiff*yDiff + xDiff*xDiff);
                    ramo e = new ramo(j, k, - currLen);
                    ramoList.add(e);
                }
            }
            while(!ramoList.isEmpty()){
                ramo e = ramoList.poll();
                if(!isSameSet(e.u, e.v)){
                    min += -e.w;
                    unionSet(e.u, e.v);
                }
            }
            //System.out.printf(""%.2f\n"", min);
        }
         System.out.printf(""%.2f\n"", min);
    }
}"
3,INCLUDEDECLARATION,"java.util",,""
4,FIELDDECLARATION,"this",,""
5,FIELDDECLARATION,"pset",prob21.java(3:2-3:21),"pset"
6,METHODDECLARATION,"findSet",prob21.java(22:5-29:6),"static int findSet(int i){
    	if ( pset[i] == i ) {
    		return i ;
    	}
    	else {
    		return pset[i] = findSet(pset[i]);
    	}
    }"
7,METHODDECLARATION,"unionSet",prob21.java(31:5-33:6),"static void unionSet(int i, int j){
        pset[findSet(i)] = pset[findSet(j)];
    }"
8,METHODDECLARATION,"isSameSet",prob21.java(35:5-37:6),"static boolean isSameSet(int i, int j){
        return findSet(i) == findSet(j); 
    }"
9,METHODDECLARATION,"initSet",prob21.java(39:5-44:6),"public static void initSet(int tamanho) { 
        pset = new int[tamanho]; 
        for (int i = 0; i < tamanho; i++){ 
        	pset[i] = i; 
        }
    }"
10,METHODDECLARATION,"main",prob21.java(46:5-79:6),"public static void main(String[] args) throws Exception {
        Scanner ler = new Scanner(System.in);
        PriorityQueue<ramo> ramoList = new PriorityQueue<ramo>();
        int n = ler.nextInt();
        double [][] cord= new double[n][2];;
        double currLen; 
        double yDiff,xDiff;
        double min = 0.0;

        for (int i = 0; i < n; i++) {
            min = 0;
            initSet(n);
            cord[i][0] = ler.nextDouble();
            cord[i][1] = ler.nextDouble();
            for (int j = 0; j < n; j++) {
                for (int k = j+1; k < n; k++) {
                    xDiff = cord[j][0] - cord[k][0];
                    yDiff = cord[j][1] - cord[k][1];
                    currLen = Math.sqrt(yDiff*yDiff + xDiff*xDiff);
                    ramo e = new ramo(j, k, - currLen);
                    ramoList.add(e);
                }
            }
            while(!ramoList.isEmpty()){
                ramo e = ramoList.poll();
                if(!isSameSet(e.u, e.v)){
                    min += -e.w;
                    unionSet(e.u, e.v);
                }
            }
            //System.out.printf(""%.2f\n"", min);
        }
         System.out.printf(""%.2f\n"", min);
    }"
11,CONSTRUCTORDECLARATION,"prob21",,""
12,RECORDDECLARATION,"prob21.ramo",prob21.java(4:5-20:6),"static class ramo implements Comparable<ramo>{
        int u;
        int v;
        double w;
        public ramo(int st, int end, double we){
           	u = st;
            v = end;
            w = we;
        }
        @Override
        public int compareTo(ramo o) {
            if(w > o.w)
                return -1;
            else
                return 1;
        }
    }"
13,FIELDDECLARATION,"this",,""
14,FIELDDECLARATION,"u",prob21.java(5:9-5:15),"u"
15,FIELDDECLARATION,"v",prob21.java(6:9-6:15),"v"
16,FIELDDECLARATION,"w",prob21.java(7:9-7:18),"w"
17,METHODDECLARATION,"compareTo",prob21.java(13:9-19:10),"@Override
        public int compareTo(ramo o) {
            if(w > o.w)
                return -1;
            else
                return 1;
        }"
18,CONSTRUCTORDECLARATION,"ramo",prob21.java(8:9-12:10),"public ramo(int st, int end, double we){
           	u = st;
            v = end;
            w = we;
        }"
19,VARIABLEDECLARATION,"this",,""
20,COMPOUNDSTATEMENT,"",prob21.java(14:38-19:10),"{
            if(w > o.w)
                return -1;
            else
                return 1;
        }"
21,PARAMVARIABLEDECLARATION,"o",prob21.java(14:30-14:36),"ramo o"
22,DECLAREDREFERENCEEXPRESSION,"this",prob21.java(15:16-15:17),"this"
23,RETURNSTATEMENT,"",,""
24,IFSTATEMENT,"",prob21.java(15:13-18:26),"if(w > o.w)
                return -1;
            else
                return 1;"
25,BINARYOPERATOR,">",prob21.java(15:16-15:23),"w > o.w"
26,RETURNSTATEMENT,"",prob21.java(16:17-16:27),"return -1;"
27,RETURNSTATEMENT,"",prob21.java(18:17-18:26),"return 1;"
28,LITERAL,"",prob21.java(16:25-16:26),"1"
29,LITERAL,"",prob21.java(18:24-18:25),"1"
30,UNARYOPERATOR,"-",prob21.java(16:24-16:26),"-1"
31,MEMBEREXPRESSION,"w",prob21.java(15:16-15:17),"w"
32,MEMBEREXPRESSION,"w",prob21.java(15:20-15:23),"o.w"
33,DECLAREDREFERENCEEXPRESSION,"o",prob21.java(15:20-15:21),"o"
34,COMPOUNDSTATEMENT,"",prob21.java(8:48-12:10),"{
           	u = st;
            v = end;
            w = we;
        }"
35,PARAMVARIABLEDECLARATION,"st",prob21.java(8:21-8:27),"int st"
36,PARAMVARIABLEDECLARATION,"end",prob21.java(8:29-8:36),"int end"
37,PARAMVARIABLEDECLARATION,"we",prob21.java(8:38-8:47),"double we"
38,DECLAREDREFERENCEEXPRESSION,"this",prob21.java(9:13-9:14),"this"
39,RETURNSTATEMENT,"",,""
40,BINARYOPERATOR,"=",prob21.java(9:13-9:20),"u = st;"
41,BINARYOPERATOR,"=",prob21.java(10:13-10:21),"v = end;"
42,BINARYOPERATOR,"=",prob21.java(11:13-11:20),"w = we;"
43,MEMBEREXPRESSION,"w",prob21.java(11:13-11:14),"w"
44,DECLAREDREFERENCEEXPRESSION,"we",prob21.java(11:17-11:19),"we"
45,DECLAREDREFERENCEEXPRESSION,"this",prob21.java(11:13-11:14),"this"
46,MEMBEREXPRESSION,"u",prob21.java(9:13-9:14),"u"
47,DECLAREDREFERENCEEXPRESSION,"st",prob21.java(9:17-9:19),"st"
48,DECLAREDREFERENCEEXPRESSION,"this",prob21.java(10:13-10:14),"this"
49,MEMBEREXPRESSION,"v",prob21.java(10:13-10:14),"v"
50,DECLAREDREFERENCEEXPRESSION,"end",prob21.java(10:17-10:20),"end"
51,VARIABLEDECLARATION,"this",,""
52,COMPOUNDSTATEMENT,"",prob21.java(35:43-37:6),"{
        return findSet(i) == findSet(j); 
    }"
53,PARAMVARIABLEDECLARATION,"i",prob21.java(35:30-35:35),"int i"
54,PARAMVARIABLEDECLARATION,"j",prob21.java(35:37-35:42),"int j"
55,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(36:24-36:25),"i"
56,RETURNSTATEMENT,"",prob21.java(36:9-36:41),"return findSet(i) == findSet(j);"
57,BINARYOPERATOR,"==",prob21.java(36:16-36:40),"findSet(i) == findSet(j)"
58,CALLEXPRESSION,"findSet",prob21.java(36:16-36:26),"findSet(i)"
59,CALLEXPRESSION,"findSet",prob21.java(36:30-36:40),"findSet(j)"
60,METHODDECLARATION,"findSet",,""
61,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(36:38-36:39),"j"
62,PARAMVARIABLEDECLARATION,"int0",,""
63,VARIABLEDECLARATION,"this",,""
64,COMPOUNDSTATEMENT,"",prob21.java(46:61-79:6),"{
        Scanner ler = new Scanner(System.in);
        PriorityQueue<ramo> ramoList = new PriorityQueue<ramo>();
        int n = ler.nextInt();
        double [][] cord= new double[n][2];;
        double currLen; 
        double yDiff,xDiff;
        double min = 0.0;

        for (int i = 0; i < n; i++) {
            min = 0;
            initSet(n);
            cord[i][0] = ler.nextDouble();
            cord[i][1] = ler.nextDouble();
            for (int j = 0; j < n; j++) {
                for (int k = j+1; k < n; k++) {
                    xDiff = cord[j][0] - cord[k][0];
                    yDiff = cord[j][1] - cord[k][1];
                    currLen = Math.sqrt(yDiff*yDiff + xDiff*xDiff);
                    ramo e = new ramo(j, k, - currLen);
                    ramoList.add(e);
                }
            }
            while(!ramoList.isEmpty()){
                ramo e = ramoList.poll();
                if(!isSameSet(e.u, e.v)){
                    min += -e.w;
                    unionSet(e.u, e.v);
                }
            }
            //System.out.printf(""%.2f\n"", min);
        }
         System.out.printf(""%.2f\n"", min);
    }"
65,PARAMVARIABLEDECLARATION,"args",prob21.java(46:29-46:42),"String[] args"
66,OBJECTTYPE,"Exception",,""
67,DECLAREDREFERENCEEXPRESSION,"System",prob21.java(47:35-47:41),"System"
68,RETURNSTATEMENT,"",,""
69,DECLARATIONSTATEMENT,"",prob21.java(47:9-47:46),"Scanner ler = new Scanner(System.in);"
70,DECLARATIONSTATEMENT,"",prob21.java(48:9-48:66),"PriorityQueue<ramo> ramoList = new PriorityQueue<ramo>();"
71,DECLARATIONSTATEMENT,"",prob21.java(49:9-49:31),"int n = ler.nextInt();"
72,DECLARATIONSTATEMENT,"",prob21.java(50:9-50:44),"double [][] cord= new double[n][2];"
73,EMPTYSTATEMENT,"",prob21.java(50:44-50:45),";"
74,DECLARATIONSTATEMENT,"",prob21.java(51:9-51:24),"double currLen;"
75,DECLARATIONSTATEMENT,"",prob21.java(52:9-52:28),"double yDiff,xDiff;"
76,DECLARATIONSTATEMENT,"",prob21.java(53:9-53:26),"double min = 0.0;"
77,FORSTATEMENT,"",prob21.java(55:9-77:10),"for (int i = 0; i < n; i++) {
            min = 0;
            initSet(n);
            cord[i][0] = ler.nextDouble();
            cord[i][1] = ler.nextDouble();
            for (int j = 0; j < n; j++) {
                for (int k = j+1; k < n; k++) {
                    xDiff = cord[j][0] - cord[k][0];
                    yDiff = cord[j][1] - cord[k][1];
                    currLen = Math.sqrt(yDiff*yDiff + xDiff*xDiff);
                    ramo e = new ramo(j, k, - currLen);
                    ramoList.add(e);
                }
            }
            while(!ramoList.isEmpty()){
                ramo e = ramoList.poll();
                if(!isSameSet(e.u, e.v)){
                    min += -e.w;
                    unionSet(e.u, e.v);
                }
            }
            //System.out.printf(""%.2f\n"", min);
        }"
78,MEMBERCALLEXPRESSION,"printf",prob21.java(78:10-78:43),"System.out.printf(""%.2f\n"", min);"
79,VARIABLEDECLARATION,"ler",prob21.java(47:17-47:45),"ler = new Scanner(System.in)"
80,VARIABLEDECLARATION,"ramoList",prob21.java(48:29-48:65),"ramoList = new PriorityQueue<ramo>()"
81,VARIABLEDECLARATION,"n",prob21.java(49:13-49:30),"n = ler.nextInt()"
82,VARIABLEDECLARATION,"cord",prob21.java(50:21-50:43),"cord= new double[n][2]"
83,VARIABLEDECLARATION,"currLen",prob21.java(51:16-51:23),"currLen"
84,VARIABLEDECLARATION,"yDiff",prob21.java(52:16-52:21),"yDiff"
85,VARIABLEDECLARATION,"xDiff",prob21.java(52:22-52:27),"xDiff"
86,VARIABLEDECLARATION,"min",prob21.java(53:16-53:25),"min = 0.0"
87,COMPOUNDSTATEMENT,"",prob21.java(55:37-77:10),"{
            min = 0;
            initSet(n);
            cord[i][0] = ler.nextDouble();
            cord[i][1] = ler.nextDouble();
            for (int j = 0; j < n; j++) {
                for (int k = j+1; k < n; k++) {
                    xDiff = cord[j][0] - cord[k][0];
                    yDiff = cord[j][1] - cord[k][1];
                    currLen = Math.sqrt(yDiff*yDiff + xDiff*xDiff);
                    ramo e = new ramo(j, k, - currLen);
                    ramoList.add(e);
                }
            }
            while(!ramoList.isEmpty()){
                ramo e = ramoList.poll();
                if(!isSameSet(e.u, e.v)){
                    min += -e.w;
                    unionSet(e.u, e.v);
                }
            }
            //System.out.printf(""%.2f\n"", min);
        }"
88,DECLARATIONSTATEMENT,"",prob21.java(55:14-55:23),"int i = 0"
89,BINARYOPERATOR,"<",prob21.java(55:25-55:30),"i < n"
90,UNARYOPERATOR,"++",prob21.java(55:32-55:35),"i++"
91,VARIABLEDECLARATION,"i",prob21.java(55:18-55:23),"i = 0"
92,DECLAREDREFERENCEEXPRESSION,"min",prob21.java(56:13-56:16),"min"
93,DECLAREDREFERENCEEXPRESSION,"System",prob21.java(78:10-78:16),"System"
94,LITERAL,"",prob21.java(55:22-55:23),"0"
95,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(55:25-55:26),"i"
96,BINARYOPERATOR,"=",prob21.java(56:13-56:21),"min = 0;"
97,CALLEXPRESSION,"initSet",prob21.java(57:13-57:24),"initSet(n);"
98,BINARYOPERATOR,"=",prob21.java(58:13-58:43),"cord[i][0] = ler.nextDouble();"
99,BINARYOPERATOR,"=",prob21.java(59:13-59:43),"cord[i][1] = ler.nextDouble();"
100,FORSTATEMENT,"",prob21.java(60:13-68:14),"for (int j = 0; j < n; j++) {
                for (int k = j+1; k < n; k++) {
                    xDiff = cord[j][0] - cord[k][0];
                    yDiff = cord[j][1] - cord[k][1];
                    currLen = Math.sqrt(yDiff*yDiff + xDiff*xDiff);
                    ramo e = new ramo(j, k, - currLen);
                    ramoList.add(e);
                }
            }"
101,WHILESTATEMENT,"",prob21.java(69:13-75:14),"while(!ramoList.isEmpty()){
                ramo e = ramoList.poll();
                if(!isSameSet(e.u, e.v)){
                    min += -e.w;
                    unionSet(e.u, e.v);
                }
            }"
102,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(55:32-55:33),"i"
103,METHODDECLARATION,"initSet",,""
104,DECLAREDREFERENCEEXPRESSION,"n",prob21.java(57:21-57:22),"n"
105,DECLAREDREFERENCEEXPRESSION,"cord",prob21.java(58:13-58:17),"cord"
106,PARAMVARIABLEDECLARATION,"int0",,""
107,COMPOUNDSTATEMENT,"",prob21.java(60:41-68:14),"{
                for (int k = j+1; k < n; k++) {
                    xDiff = cord[j][0] - cord[k][0];
                    yDiff = cord[j][1] - cord[k][1];
                    currLen = Math.sqrt(yDiff*yDiff + xDiff*xDiff);
                    ramo e = new ramo(j, k, - currLen);
                    ramoList.add(e);
                }
            }"
108,DECLARATIONSTATEMENT,"",prob21.java(60:18-60:27),"int j = 0"
109,BINARYOPERATOR,"<",prob21.java(60:29-60:34),"j < n"
110,UNARYOPERATOR,"++",prob21.java(60:36-60:39),"j++"
111,VARIABLEDECLARATION,"j",prob21.java(60:22-60:27),"j = 0"
112,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(61:30-61:31),"j"
113,DECLAREDREFERENCEEXPRESSION,"ramoList",prob21.java(69:20-69:28),"ramoList"
114,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(60:36-60:37),"j"
115,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(60:29-60:30),"j"
116,FORSTATEMENT,"",prob21.java(61:17-67:18),"for (int k = j+1; k < n; k++) {
                    xDiff = cord[j][0] - cord[k][0];
                    yDiff = cord[j][1] - cord[k][1];
                    currLen = Math.sqrt(yDiff*yDiff + xDiff*xDiff);
                    ramo e = new ramo(j, k, - currLen);
                    ramoList.add(e);
                }"
117,COMPOUNDSTATEMENT,"",prob21.java(61:47-67:18),"{
                    xDiff = cord[j][0] - cord[k][0];
                    yDiff = cord[j][1] - cord[k][1];
                    currLen = Math.sqrt(yDiff*yDiff + xDiff*xDiff);
                    ramo e = new ramo(j, k, - currLen);
                    ramoList.add(e);
                }"
118,DECLARATIONSTATEMENT,"",prob21.java(61:22-61:33),"int k = j+1"
119,BINARYOPERATOR,"<",prob21.java(61:35-61:40),"k < n"
120,UNARYOPERATOR,"++",prob21.java(61:42-61:45),"k++"
121,VARIABLEDECLARATION,"k",prob21.java(61:26-61:33),"k = j+1"
122,DECLAREDREFERENCEEXPRESSION,"xDiff",prob21.java(62:21-62:26),"xDiff"
123,DECLAREDREFERENCEEXPRESSION,"k",prob21.java(61:35-61:36),"k"
124,DECLAREDREFERENCEEXPRESSION,"n",prob21.java(61:39-61:40),"n"
125,DECLAREDREFERENCEEXPRESSION,"k",prob21.java(61:42-61:43),"k"
126,BINARYOPERATOR,"=",prob21.java(62:21-62:53),"xDiff = cord[j][0] - cord[k][0];"
127,BINARYOPERATOR,"=",prob21.java(63:21-63:53),"yDiff = cord[j][1] - cord[k][1];"
128,BINARYOPERATOR,"=",prob21.java(64:21-64:68),"currLen = Math.sqrt(yDiff*yDiff + xDiff*xDiff);"
129,DECLARATIONSTATEMENT,"",prob21.java(65:21-65:56),"ramo e = new ramo(j, k, - currLen);"
130,MEMBERCALLEXPRESSION,"add",prob21.java(66:21-66:37),"ramoList.add(e);"
131,VARIABLEDECLARATION,"e",prob21.java(65:26-65:55),"e = new ramo(j, k, - currLen)"
132,NEWEXPRESSION,"",prob21.java(65:30-65:55),"new ramo(j, k, - currLen)"
133,CONSTRUCTEXPRESSION,"",prob21.java(65:30-65:55),"new ramo(j, k, - currLen)"
134,CONSTRUCTORDECLARATION,"ramo",submicao2_1_.java(412:9-416:10),"public ramo(int st, int end, double we){
           	u = st;
            v = end;
            w = we;
        }"
135,UNARYOPERATOR,"-",prob21.java(65:45-65:54),"- currLen"
136,DECLAREDREFERENCEEXPRESSION,"currLen",prob21.java(65:47-65:54),"currLen"
137,PARAMVARIABLEDECLARATION,"we",submicao2_1_.java(412:38-412:47),"double we"
138,DECLAREDREFERENCEEXPRESSION,"k",prob21.java(65:42-65:43),"k"
139,PARAMVARIABLEDECLARATION,"end",submicao2_1_.java(412:29-412:36),"int end"
140,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(65:39-65:40),"j"
141,PARAMVARIABLEDECLARATION,"st",submicao2_1_.java(412:21-412:27),"int st"
142,DECLAREDREFERENCEEXPRESSION,"currLen",prob21.java(64:21-64:28),"currLen"
143,STATICCALLEXPRESSION,"sqrt",prob21.java(64:31-64:67),"Math.sqrt(yDiff*yDiff + xDiff*xDiff)"
144,BINARYOPERATOR,"+",prob21.java(64:41-64:66),"yDiff*yDiff + xDiff*xDiff"
145,BINARYOPERATOR,"*",prob21.java(64:41-64:52),"yDiff*yDiff"
146,BINARYOPERATOR,"*",prob21.java(64:55-64:66),"xDiff*xDiff"
147,DECLAREDREFERENCEEXPRESSION,"yDiff",prob21.java(64:41-64:46),"yDiff"
148,DECLAREDREFERENCEEXPRESSION,"yDiff",prob21.java(64:47-64:52),"yDiff"
149,DECLAREDREFERENCEEXPRESSION,"xDiff",prob21.java(64:55-64:60),"xDiff"
150,DECLAREDREFERENCEEXPRESSION,"xDiff",prob21.java(64:61-64:66),"xDiff"
151,DECLAREDREFERENCEEXPRESSION,"yDiff",prob21.java(63:21-63:26),"yDiff"
152,BINARYOPERATOR,"-",prob21.java(63:29-63:52),"cord[j][1] - cord[k][1]"
153,DECLAREDREFERENCEEXPRESSION,"cord",prob21.java(63:29-63:33),"cord"
154,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(63:29-63:39),"cord[j][1]"
155,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(63:42-63:52),"cord[k][1]"
156,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(63:29-63:36),"cord[j]"
157,LITERAL,"",prob21.java(63:37-63:38),"1"
158,DECLAREDREFERENCEEXPRESSION,"cord",prob21.java(63:42-63:46),"cord"
159,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(63:34-63:35),"j"
160,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(63:42-63:49),"cord[k]"
161,LITERAL,"",prob21.java(63:50-63:51),"1"
162,DECLAREDREFERENCEEXPRESSION,"k",prob21.java(63:47-63:48),"k"
163,DECLAREDREFERENCEEXPRESSION,"ramoList",prob21.java(66:21-66:29),"ramoList"
164,DECLAREDREFERENCEEXPRESSION,"add",prob21.java(66:30-66:33),"add"
165,DECLAREDREFERENCEEXPRESSION,"e",prob21.java(66:34-66:35),"e"
166,BINARYOPERATOR,"-",prob21.java(62:29-62:52),"cord[j][0] - cord[k][0]"
167,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(62:29-62:39),"cord[j][0]"
168,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(62:42-62:52),"cord[k][0]"
169,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(62:42-62:49),"cord[k]"
170,LITERAL,"",prob21.java(62:50-62:51),"0"
171,DECLAREDREFERENCEEXPRESSION,"cord",prob21.java(62:42-62:46),"cord"
172,DECLAREDREFERENCEEXPRESSION,"k",prob21.java(62:47-62:48),"k"
173,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(62:29-62:36),"cord[j]"
174,LITERAL,"",prob21.java(62:37-62:38),"0"
175,DECLAREDREFERENCEEXPRESSION,"cord",prob21.java(62:29-62:33),"cord"
176,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(62:34-62:35),"j"
177,BINARYOPERATOR,"+",prob21.java(61:30-61:33),"j+1"
178,LITERAL,"",prob21.java(61:32-61:33),"1"
179,DECLAREDREFERENCEEXPRESSION,"n",prob21.java(60:33-60:34),"n"
180,LITERAL,"",prob21.java(60:26-60:27),"0"
181,UNARYOPERATOR,"!",prob21.java(69:19-69:38),"!ramoList.isEmpty()"
182,COMPOUNDSTATEMENT,"",prob21.java(69:39-75:14),"{
                ramo e = ramoList.poll();
                if(!isSameSet(e.u, e.v)){
                    min += -e.w;
                    unionSet(e.u, e.v);
                }
            }"
183,DECLAREDREFERENCEEXPRESSION,"ramoList",prob21.java(70:26-70:34),"ramoList"
184,MEMBERCALLEXPRESSION,"isEmpty",prob21.java(69:20-69:38),"ramoList.isEmpty()"
185,DECLAREDREFERENCEEXPRESSION,"isEmpty",prob21.java(69:29-69:36),"isEmpty"
186,DECLARATIONSTATEMENT,"",prob21.java(70:17-70:42),"ramo e = ramoList.poll();"
187,IFSTATEMENT,"",prob21.java(71:17-74:18),"if(!isSameSet(e.u, e.v)){
                    min += -e.w;
                    unionSet(e.u, e.v);
                }"
188,VARIABLEDECLARATION,"e",prob21.java(70:22-70:41),"e = ramoList.poll()"
189,COMPOUNDSTATEMENT,"",prob21.java(71:41-74:18),"{
                    min += -e.w;
                    unionSet(e.u, e.v);
                }"
190,UNARYOPERATOR,"!",prob21.java(71:20-71:40),"!isSameSet(e.u, e.v)"
191,DECLAREDREFERENCEEXPRESSION,"min",prob21.java(72:21-72:24),"min"
192,CALLEXPRESSION,"isSameSet",prob21.java(71:21-71:40),"isSameSet(e.u, e.v)"
193,METHODDECLARATION,"isSameSet",,""
194,MEMBEREXPRESSION,"u",prob21.java(71:31-71:34),"e.u"
195,MEMBEREXPRESSION,"v",prob21.java(71:36-71:39),"e.v"
196,DECLAREDREFERENCEEXPRESSION,"e",prob21.java(71:36-71:37),"e"
197,PARAMVARIABLEDECLARATION,"int1",,""
198,DECLAREDREFERENCEEXPRESSION,"e",prob21.java(71:31-71:32),"e"
199,PARAMVARIABLEDECLARATION,"int0",,""
200,BINARYOPERATOR,"+=",prob21.java(72:21-72:33),"min += -e.w;"
201,CALLEXPRESSION,"unionSet",prob21.java(73:21-73:40),"unionSet(e.u, e.v);"
202,UNARYOPERATOR,"-",prob21.java(72:28-72:32),"-e.w"
203,DECLAREDREFERENCEEXPRESSION,"e",prob21.java(73:30-73:31),"e"
204,MEMBEREXPRESSION,"w",prob21.java(72:29-72:32),"e.w"
205,DECLAREDREFERENCEEXPRESSION,"e",prob21.java(72:29-72:30),"e"
206,METHODDECLARATION,"unionSet",,""
207,MEMBEREXPRESSION,"u",prob21.java(73:30-73:33),"e.u"
208,MEMBEREXPRESSION,"v",prob21.java(73:35-73:38),"e.v"
209,PARAMVARIABLEDECLARATION,"int0",,""
210,DECLAREDREFERENCEEXPRESSION,"e",prob21.java(73:35-73:36),"e"
211,PARAMVARIABLEDECLARATION,"int1",,""
212,MEMBERCALLEXPRESSION,"poll",prob21.java(70:26-70:41),"ramoList.poll()"
213,DECLAREDREFERENCEEXPRESSION,"poll",prob21.java(70:35-70:39),"poll"
214,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(58:13-58:23),"cord[i][0]"
215,MEMBERCALLEXPRESSION,"nextDouble",prob21.java(58:26-58:42),"ler.nextDouble()"
216,DECLAREDREFERENCEEXPRESSION,"cord",prob21.java(59:13-59:17),"cord"
217,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(58:13-58:20),"cord[i]"
218,LITERAL,"",prob21.java(58:21-58:22),"0"
219,DECLAREDREFERENCEEXPRESSION,"ler",prob21.java(58:26-58:29),"ler"
220,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(58:18-58:19),"i"
221,DECLAREDREFERENCEEXPRESSION,"nextDouble",prob21.java(58:30-58:40),"nextDouble"
222,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(59:13-59:23),"cord[i][1]"
223,MEMBERCALLEXPRESSION,"nextDouble",prob21.java(59:26-59:42),"ler.nextDouble()"
224,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(59:13-59:20),"cord[i]"
225,LITERAL,"",prob21.java(59:21-59:22),"1"
226,DECLAREDREFERENCEEXPRESSION,"ler",prob21.java(59:26-59:29),"ler"
227,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(59:18-59:19),"i"
228,DECLAREDREFERENCEEXPRESSION,"nextDouble",prob21.java(59:30-59:40),"nextDouble"
229,LITERAL,"",prob21.java(56:19-56:20),"0"
230,DECLAREDREFERENCEEXPRESSION,"n",prob21.java(55:29-55:30),"n"
231,LITERAL,"",prob21.java(53:22-53:25),"0.0"
232,NEWEXPRESSION,"",prob21.java(48:40-48:65),"new PriorityQueue<ramo>()"
233,CONSTRUCTEXPRESSION,"",prob21.java(48:40-48:65),"new PriorityQueue<ramo>()"
234,DECLAREDREFERENCEEXPRESSION,"n",prob21.java(50:38-50:39),"n"
235,NEWEXPRESSION,"",prob21.java(47:23-47:45),"new Scanner(System.in)"
236,CONSTRUCTEXPRESSION,"",prob21.java(47:23-47:45),"new Scanner(System.in)"
237,MEMBEREXPRESSION,"in",prob21.java(47:35-47:44),"System.in"
238,DECLAREDREFERENCEEXPRESSION,"printf",prob21.java(78:21-78:27),"printf"
239,DECLAREDREFERENCEEXPRESSION,"min",prob21.java(78:38-78:41),"min"
240,MEMBEREXPRESSION,"out",prob21.java(78:10-78:20),"System.out"
241,LITERAL,"",prob21.java(78:28-78:36),"""%.2f\n"""
242,DECLAREDREFERENCEEXPRESSION,"ler",prob21.java(49:17-49:20),"ler"
243,ARRAYCREATIONEXPRESSION,"",prob21.java(50:27-50:43),"new double[n][2]"
244,LITERAL,"",prob21.java(50:41-50:42),"2"
245,UNINITIALIZEDVALUE,"Uninitialized Value",,""
246,MEMBERCALLEXPRESSION,"nextInt",prob21.java(49:17-49:30),"ler.nextInt()"
247,DECLAREDREFERENCEEXPRESSION,"nextInt",prob21.java(49:21-49:28),"nextInt"
248,UNINITIALIZEDVALUE,"Uninitialized Value",,""
249,UNINITIALIZEDVALUE,"Uninitialized Value",,""
250,VARIABLEDECLARATION,"this",,""
251,COMPOUNDSTATEMENT,"",prob21.java(22:30-29:6),"{
    	if ( pset[i] == i ) {
    		return i ;
    	}
    	else {
    		return pset[i] = findSet(pset[i]);
    	}
    }"
252,PARAMVARIABLEDECLARATION,"i",prob21.java(22:24-22:29),"int i"
253,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(23:11-23:15),"prob21"
254,RETURNSTATEMENT,"",,""
255,IFSTATEMENT,"",prob21.java(23:6-28:7),"if ( pset[i] == i ) {
    		return i ;
    	}
    	else {
    		return pset[i] = findSet(pset[i]);
    	}"
256,BINARYOPERATOR,"==",prob21.java(23:11-23:23),"pset[i] == i"
257,COMPOUNDSTATEMENT,"",prob21.java(23:26-25:7),"{
    		return i ;
    	}"
258,COMPOUNDSTATEMENT,"",prob21.java(26:11-28:7),"{
    		return pset[i] = findSet(pset[i]);
    	}"
259,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(24:14-24:15),"i"
260,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(27:14-27:18),"prob21"
261,RETURNSTATEMENT,"",prob21.java(27:7-27:41),"return pset[i] = findSet(pset[i]);"
262,BINARYOPERATOR,"=",prob21.java(27:14-27:40),"pset[i] = findSet(pset[i])"
263,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(27:14-27:21),"pset[i]"
264,CALLEXPRESSION,"findSet",prob21.java(27:24-27:40),"findSet(pset[i])"
265,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(27:32-27:39),"pset[i]"
266,MEMBEREXPRESSION,"pset",prob21.java(27:32-27:36),"pset"
267,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(27:37-27:38),"i"
268,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(27:32-27:36),"prob21"
269,MEMBEREXPRESSION,"pset",prob21.java(27:14-27:18),"pset"
270,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(27:19-27:20),"i"
271,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(23:11-23:18),"pset[i]"
272,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(23:22-23:23),"i"
273,MEMBEREXPRESSION,"pset",prob21.java(23:11-23:15),"pset"
274,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(23:16-23:17),"i"
275,RETURNSTATEMENT,"",prob21.java(24:7-24:17),"return i ;"
276,VARIABLEDECLARATION,"this",,""
277,COMPOUNDSTATEMENT,"",prob21.java(31:39-33:6),"{
        pset[findSet(i)] = pset[findSet(j)];
    }"
278,PARAMVARIABLEDECLARATION,"i",prob21.java(31:26-31:31),"int i"
279,PARAMVARIABLEDECLARATION,"j",prob21.java(31:33-31:38),"int j"
280,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(32:9-32:13),"prob21"
281,RETURNSTATEMENT,"",,""
282,BINARYOPERATOR,"=",prob21.java(32:9-32:45),"pset[findSet(i)] = pset[findSet(j)];"
283,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(32:9-32:25),"pset[findSet(i)]"
284,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(32:28-32:44),"pset[findSet(j)]"
285,MEMBEREXPRESSION,"pset",prob21.java(32:9-32:13),"pset"
286,CALLEXPRESSION,"findSet",prob21.java(32:14-32:24),"findSet(i)"
287,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(32:28-32:32),"prob21"
288,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(32:22-32:23),"i"
289,MEMBEREXPRESSION,"pset",prob21.java(32:28-32:32),"pset"
290,CALLEXPRESSION,"findSet",prob21.java(32:33-32:43),"findSet(j)"
291,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(32:41-32:42),"j"
292,VARIABLEDECLARATION,"this",,""
293,COMPOUNDSTATEMENT,"",prob21.java(39:45-44:6),"{ 
        pset = new int[tamanho]; 
        for (int i = 0; i < tamanho; i++){ 
        	pset[i] = i; 
        }
    }"
294,PARAMVARIABLEDECLARATION,"tamanho",prob21.java(39:32-39:43),"int tamanho"
295,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(40:9-40:13),"prob21"
296,RETURNSTATEMENT,"",,""
297,BINARYOPERATOR,"=",prob21.java(40:9-40:33),"pset = new int[tamanho];"
298,FORSTATEMENT,"",prob21.java(41:9-43:10),"for (int i = 0; i < tamanho; i++){ 
        	pset[i] = i; 
        }"
299,MEMBEREXPRESSION,"pset",prob21.java(40:9-40:13),"pset"
300,ARRAYCREATIONEXPRESSION,"",prob21.java(40:16-40:32),"new int[tamanho]"
301,LITERAL,"",prob21.java(41:22-41:23),"0"
302,DECLAREDREFERENCEEXPRESSION,"tamanho",prob21.java(40:24-40:31),"tamanho"
303,COMPOUNDSTATEMENT,"",prob21.java(41:42-43:10),"{ 
        	pset[i] = i; 
        }"
304,DECLARATIONSTATEMENT,"",prob21.java(41:14-41:23),"int i = 0"
305,BINARYOPERATOR,"<",prob21.java(41:25-41:36),"i < tamanho"
306,UNARYOPERATOR,"++",prob21.java(41:38-41:41),"i++"
307,VARIABLEDECLARATION,"i",prob21.java(41:18-41:23),"i = 0"
308,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(42:10-42:14),"prob21"
309,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(41:25-41:26),"i"
310,DECLAREDREFERENCEEXPRESSION,"tamanho",prob21.java(41:29-41:36),"tamanho"
311,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(41:38-41:39),"i"
312,BINARYOPERATOR,"=",prob21.java(42:10-42:22),"pset[i] = i;"
313,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(42:10-42:17),"pset[i]"
314,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(42:20-42:21),"i"
315,MEMBEREXPRESSION,"pset",prob21.java(42:10-42:14),"pset"
316,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(42:15-42:16),"i"

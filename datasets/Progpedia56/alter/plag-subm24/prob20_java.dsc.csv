id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07668771_21_201207820/Prob20.java",,""
2,RECORDDECLARATION,"Node3",Prob20.java(6:1-15:2),"class Node3 {
	public boolean visited; // Valor booleano que indica se foi visitao numa
							// pesquisa
	public int distance; // Distancia do no origem da pesquisa

	Node3() {
		visited = false;
		distance = 10;
	}
}"
3,RECORDDECLARATION,"Prob20",Prob20.java(17:1-109:2),"public class Prob20 {

	static int c;
	static int l;
	static String linha;
	static char matriz[][];
	static Node3 nodes[][];
	static int distMax = -1;
	static int distMin;

	static void bfs() {
		LinkedList<Integer> x = new LinkedList<Integer>();
		LinkedList<Integer> y = new LinkedList<Integer>();

		for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				if (matriz[i][j] != '#') {
					x.add(i);
					y.add(j);
					nodes[i][j].visited = true;
					nodes[i][j].distance = 0;
				}

		while (x.size() > 0) {
			int u = x.removeFirst();
			int v = y.removeFirst();
			if (v < c - 1)
				if (!nodes[u][v + 1].visited) {
					x.add(u);
					y.add(v + 1);
					nodes[u][v + 1].visited = true;
					nodes[u][v + 1].distance = nodes[u][v].distance + 1;
				}
			if (v > 0)
				if (!nodes[u][v - 1].visited) {
					x.add(u);
					y.add(v - 1);
					nodes[u][v - 1].visited = true;
					nodes[u][v - 1].distance = nodes[u][v].distance + 1;
				}
			if (u < l - 1)
				if (!nodes[u + 1][v].visited) {
					x.add(u + 1);
					y.add(v);
					nodes[u + 1][v].visited = true;
					nodes[u + 1][v].distance = nodes[u][v].distance + 1;
				}
			if (u > 0)
				if (!nodes[u - 1][v].visited) {
					x.add(u - 1);
					y.add(v);
					nodes[u - 1][v].visited = true;
					nodes[u - 1][v].distance = nodes[u][v].distance + 1;
				}
		}
	}

	public static void main(String[] args) {
		Scanner stdin = new Scanner(System.in);
		l = stdin.nextInt();
		c = stdin.nextInt();
		linha = stdin.nextLine();
		matriz = new char[l][c];
		nodes = new Node3[l + 1][c + 1];
		distMin = l*c;
		for (int i = 0; i < l; i++) {
			linha = stdin.nextLine();
			for (int j = 0; j < c; j++) {
				matriz[i][j] = linha.charAt(j);
			}
		}

		for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				nodes[i][j] = new Node3();

		bfs();
		for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				if (matriz[i][j] == 'A') {
					if (nodes[i][j].distance > distMax)
						distMax = nodes[i][j].distance;
					if (nodes[i][j].distance < distMin) {

						distMin = nodes[i][j].distance;
					}
				}

		System.out.println(distMin + "" "" + distMax);

	}

}"
4,INCLUDEDECLARATION,"java.io",,""
5,INCLUDEDECLARATION,"java.util",,""
6,FIELDDECLARATION,"this",,""
7,FIELDDECLARATION,"c",Prob20.java(19:2-19:15),"c"
8,FIELDDECLARATION,"l",Prob20.java(20:2-20:15),"l"
9,FIELDDECLARATION,"linha",Prob20.java(21:2-21:22),"linha"
10,FIELDDECLARATION,"matriz",Prob20.java(22:2-22:25),"matriz"
11,FIELDDECLARATION,"nodes",Prob20.java(23:2-23:25),"nodes"
12,FIELDDECLARATION,"distMax",Prob20.java(24:2-24:26),"distMax = -1"
13,FIELDDECLARATION,"distMin",Prob20.java(25:2-25:21),"distMin"
14,METHODDECLARATION,"bfs",Prob20.java(27:2-72:3),"static void bfs() {
		LinkedList<Integer> x = new LinkedList<Integer>();
		LinkedList<Integer> y = new LinkedList<Integer>();

		for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				if (matriz[i][j] != '#') {
					x.add(i);
					y.add(j);
					nodes[i][j].visited = true;
					nodes[i][j].distance = 0;
				}

		while (x.size() > 0) {
			int u = x.removeFirst();
			int v = y.removeFirst();
			if (v < c - 1)
				if (!nodes[u][v + 1].visited) {
					x.add(u);
					y.add(v + 1);
					nodes[u][v + 1].visited = true;
					nodes[u][v + 1].distance = nodes[u][v].distance + 1;
				}
			if (v > 0)
				if (!nodes[u][v - 1].visited) {
					x.add(u);
					y.add(v - 1);
					nodes[u][v - 1].visited = true;
					nodes[u][v - 1].distance = nodes[u][v].distance + 1;
				}
			if (u < l - 1)
				if (!nodes[u + 1][v].visited) {
					x.add(u + 1);
					y.add(v);
					nodes[u + 1][v].visited = true;
					nodes[u + 1][v].distance = nodes[u][v].distance + 1;
				}
			if (u > 0)
				if (!nodes[u - 1][v].visited) {
					x.add(u - 1);
					y.add(v);
					nodes[u - 1][v].visited = true;
					nodes[u - 1][v].distance = nodes[u][v].distance + 1;
				}
		}
	}"
15,METHODDECLARATION,"main",Prob20.java(74:2-107:3),"public static void main(String[] args) {
		Scanner stdin = new Scanner(System.in);
		l = stdin.nextInt();
		c = stdin.nextInt();
		linha = stdin.nextLine();
		matriz = new char[l][c];
		nodes = new Node3[l + 1][c + 1];
		distMin = l*c;
		for (int i = 0; i < l; i++) {
			linha = stdin.nextLine();
			for (int j = 0; j < c; j++) {
				matriz[i][j] = linha.charAt(j);
			}
		}

		for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				nodes[i][j] = new Node3();

		bfs();
		for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				if (matriz[i][j] == 'A') {
					if (nodes[i][j].distance > distMax)
						distMax = nodes[i][j].distance;
					if (nodes[i][j].distance < distMin) {

						distMin = nodes[i][j].distance;
					}
				}

		System.out.println(distMin + "" "" + distMax);

	}"
16,METHODDECLARATION,"bfs",,""
17,METHODDECLARATION,"verificaposicao",,""
18,METHODDECLARATION,"nao_tem_parede",,""
19,METHODDECLARATION,"bfs",,""
20,METHODDECLARATION,"not_wall",,""
21,METHODDECLARATION,"check_pos",,""
22,METHODDECLARATION,"dfs",,""
23,METHODDECLARATION,"verificaAeroporto",,""
24,METHODDECLARATION,"verificaNuvem",,""
25,METHODDECLARATION,"bfs",,""
26,METHODDECLARATION,"check_pos",,""
27,METHODDECLARATION,"not_wall",,""
28,CONSTRUCTORDECLARATION,"Prob20",,""
29,PARAMVARIABLEDECLARATION,"ponto0",,""
30,CALLEXPRESSION,"nao_tem_parede",P20.java(33:34-33:57),"nao_tem_parede(proximo)"
31,CALLEXPRESSION,"nao_tem_parede",P20.java(34:34-34:54),"nao_tem_parede(next)"
32,CALLEXPRESSION,"nao_tem_parede",P20.java(33:34-33:54),"nao_tem_parede(next)"
33,DECLAREDREFERENCEEXPRESSION,"proximo",P20.java(33:49-33:56),"proximo"
34,DECLAREDREFERENCEEXPRESSION,"next",P20.java(33:49-33:53),"next"
35,DECLAREDREFERENCEEXPRESSION,"next",P20.java(34:49-34:53),"next"
36,VARIABLEDECLARATION,"this",,""
37,COMPOUNDSTATEMENT,"",Prob20.java(27:20-72:3),"{
		LinkedList<Integer> x = new LinkedList<Integer>();
		LinkedList<Integer> y = new LinkedList<Integer>();

		for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				if (matriz[i][j] != '#') {
					x.add(i);
					y.add(j);
					nodes[i][j].visited = true;
					nodes[i][j].distance = 0;
				}

		while (x.size() > 0) {
			int u = x.removeFirst();
			int v = y.removeFirst();
			if (v < c - 1)
				if (!nodes[u][v + 1].visited) {
					x.add(u);
					y.add(v + 1);
					nodes[u][v + 1].visited = true;
					nodes[u][v + 1].distance = nodes[u][v].distance + 1;
				}
			if (v > 0)
				if (!nodes[u][v - 1].visited) {
					x.add(u);
					y.add(v - 1);
					nodes[u][v - 1].visited = true;
					nodes[u][v - 1].distance = nodes[u][v].distance + 1;
				}
			if (u < l - 1)
				if (!nodes[u + 1][v].visited) {
					x.add(u + 1);
					y.add(v);
					nodes[u + 1][v].visited = true;
					nodes[u + 1][v].distance = nodes[u][v].distance + 1;
				}
			if (u > 0)
				if (!nodes[u - 1][v].visited) {
					x.add(u - 1);
					y.add(v);
					nodes[u - 1][v].visited = true;
					nodes[u - 1][v].distance = nodes[u][v].distance + 1;
				}
		}
	}"
38,CALLEXPRESSION,"bfs",Prob20.java(93:3-93:9),"bfs();"
39,CALLEXPRESSION,"bfs",Prob20.java(93:3-93:9),"bfs();"
40,CALLEXPRESSION,"bfs",Prob20.java(93:3-93:9),"bfs();"
41,CALLEXPRESSION,"bfs",Prob20.java(93:3-93:9),"bfs();"
42,CALLEXPRESSION,"bfs",Prob20.java(93:3-93:9),"bfs();"
43,CALLEXPRESSION,"bfs",Prob20.java(93:3-93:9),"bfs();"
44,CALLEXPRESSION,"bfs",Prob20.java(93:3-93:9),"bfs();"
45,CALLEXPRESSION,"bfs",Prob20.java(93:3-93:9),"bfs();"
46,CALLEXPRESSION,"bfs",Prob20.java(93:3-93:9),"bfs();"
47,CALLEXPRESSION,"bfs",Prob20.java(93:3-93:9),"bfs();"
48,CONSTRUCTEXPRESSION,"",Prob20.java(28:27-28:52),"new LinkedList<Integer>()"
49,RETURNSTATEMENT,"",,""
50,DECLARATIONSTATEMENT,"",Prob20.java(28:3-28:53),"LinkedList<Integer> x = new LinkedList<Integer>();"
51,DECLARATIONSTATEMENT,"",Prob20.java(29:3-29:53),"LinkedList<Integer> y = new LinkedList<Integer>();"
52,FORSTATEMENT,"",Prob20.java(31:3-38:6),"for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				if (matriz[i][j] != '#') {
					x.add(i);
					y.add(j);
					nodes[i][j].visited = true;
					nodes[i][j].distance = 0;
				}"
53,WHILESTATEMENT,"",Prob20.java(40:3-71:4),"while (x.size() > 0) {
			int u = x.removeFirst();
			int v = y.removeFirst();
			if (v < c - 1)
				if (!nodes[u][v + 1].visited) {
					x.add(u);
					y.add(v + 1);
					nodes[u][v + 1].visited = true;
					nodes[u][v + 1].distance = nodes[u][v].distance + 1;
				}
			if (v > 0)
				if (!nodes[u][v - 1].visited) {
					x.add(u);
					y.add(v - 1);
					nodes[u][v - 1].visited = true;
					nodes[u][v - 1].distance = nodes[u][v].distance + 1;
				}
			if (u < l - 1)
				if (!nodes[u + 1][v].visited) {
					x.add(u + 1);
					y.add(v);
					nodes[u + 1][v].visited = true;
					nodes[u + 1][v].distance = nodes[u][v].distance + 1;
				}
			if (u > 0)
				if (!nodes[u - 1][v].visited) {
					x.add(u - 1);
					y.add(v);
					nodes[u - 1][v].visited = true;
					nodes[u - 1][v].distance = nodes[u][v].distance + 1;
				}
		}"
54,VARIABLEDECLARATION,"x",Prob20.java(28:23-28:52),"x = new LinkedList<Integer>()"
55,VARIABLEDECLARATION,"y",Prob20.java(29:23-29:52),"y = new LinkedList<Integer>()"
56,NEWEXPRESSION,"",Prob20.java(29:27-29:52),"new LinkedList<Integer>()"
57,CONSTRUCTEXPRESSION,"",Prob20.java(29:27-29:52),"new LinkedList<Integer>()"
58,LITERAL,"",Prob20.java(31:16-31:17),"0"
59,BINARYOPERATOR,">",Prob20.java(40:10-40:22),"x.size() > 0"
60,COMPOUNDSTATEMENT,"",Prob20.java(40:24-71:4),"{
			int u = x.removeFirst();
			int v = y.removeFirst();
			if (v < c - 1)
				if (!nodes[u][v + 1].visited) {
					x.add(u);
					y.add(v + 1);
					nodes[u][v + 1].visited = true;
					nodes[u][v + 1].distance = nodes[u][v].distance + 1;
				}
			if (v > 0)
				if (!nodes[u][v - 1].visited) {
					x.add(u);
					y.add(v - 1);
					nodes[u][v - 1].visited = true;
					nodes[u][v - 1].distance = nodes[u][v].distance + 1;
				}
			if (u < l - 1)
				if (!nodes[u + 1][v].visited) {
					x.add(u + 1);
					y.add(v);
					nodes[u + 1][v].visited = true;
					nodes[u + 1][v].distance = nodes[u][v].distance + 1;
				}
			if (u > 0)
				if (!nodes[u - 1][v].visited) {
					x.add(u - 1);
					y.add(v);
					nodes[u - 1][v].visited = true;
					nodes[u - 1][v].distance = nodes[u][v].distance + 1;
				}
		}"
61,DECLAREDREFERENCEEXPRESSION,"x",Prob20.java(41:12-41:13),"x"
62,MEMBERCALLEXPRESSION,"size",Prob20.java(40:10-40:18),"x.size()"
63,LITERAL,"",Prob20.java(40:21-40:22),"0"
64,DECLAREDREFERENCEEXPRESSION,"size",Prob20.java(40:12-40:16),"size"
65,DECLAREDREFERENCEEXPRESSION,"x",Prob20.java(40:10-40:11),"x"
66,DECLARATIONSTATEMENT,"",Prob20.java(41:4-41:28),"int u = x.removeFirst();"
67,DECLARATIONSTATEMENT,"",Prob20.java(42:4-42:28),"int v = y.removeFirst();"
68,IFSTATEMENT,"",Prob20.java(43:4-49:6),"if (v < c - 1)
				if (!nodes[u][v + 1].visited) {
					x.add(u);
					y.add(v + 1);
					nodes[u][v + 1].visited = true;
					nodes[u][v + 1].distance = nodes[u][v].distance + 1;
				}"
69,IFSTATEMENT,"",Prob20.java(50:4-56:6),"if (v > 0)
				if (!nodes[u][v - 1].visited) {
					x.add(u);
					y.add(v - 1);
					nodes[u][v - 1].visited = true;
					nodes[u][v - 1].distance = nodes[u][v].distance + 1;
				}"
70,IFSTATEMENT,"",Prob20.java(57:4-63:6),"if (u < l - 1)
				if (!nodes[u + 1][v].visited) {
					x.add(u + 1);
					y.add(v);
					nodes[u + 1][v].visited = true;
					nodes[u + 1][v].distance = nodes[u][v].distance + 1;
				}"
71,IFSTATEMENT,"",Prob20.java(64:4-70:6),"if (u > 0)
				if (!nodes[u - 1][v].visited) {
					x.add(u - 1);
					y.add(v);
					nodes[u - 1][v].visited = true;
					nodes[u - 1][v].distance = nodes[u][v].distance + 1;
				}"
72,VARIABLEDECLARATION,"u",Prob20.java(41:8-41:27),"u = x.removeFirst()"
73,VARIABLEDECLARATION,"v",Prob20.java(42:8-42:27),"v = y.removeFirst()"
74,COMPOUNDSTATEMENT,"",Prob20.java(65:35-70:6),"{
					x.add(u - 1);
					y.add(v);
					nodes[u - 1][v].visited = true;
					nodes[u - 1][v].distance = nodes[u][v].distance + 1;
				}"
75,IFSTATEMENT,"",Prob20.java(65:5-70:6),"if (!nodes[u - 1][v].visited) {
					x.add(u - 1);
					y.add(v);
					nodes[u - 1][v].visited = true;
					nodes[u - 1][v].distance = nodes[u][v].distance + 1;
				}"
76,DECLAREDREFERENCEEXPRESSION,"y",Prob20.java(42:12-42:13),"y"
77,BINARYOPERATOR,">",Prob20.java(64:8-64:13),"u > 0"
78,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(65:10-65:15),"Prob20"
79,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(64:8-64:9),"u"
80,LITERAL,"",Prob20.java(64:12-64:13),"0"
81,COMPOUNDSTATEMENT,"",Prob20.java(58:35-63:6),"{
					x.add(u + 1);
					y.add(v);
					nodes[u + 1][v].visited = true;
					nodes[u + 1][v].distance = nodes[u][v].distance + 1;
				}"
82,IFSTATEMENT,"",Prob20.java(58:5-63:6),"if (!nodes[u + 1][v].visited) {
					x.add(u + 1);
					y.add(v);
					nodes[u + 1][v].visited = true;
					nodes[u + 1][v].distance = nodes[u][v].distance + 1;
				}"
83,UNARYOPERATOR,"!",Prob20.java(65:9-65:33),"!nodes[u - 1][v].visited"
84,DECLAREDREFERENCEEXPRESSION,"x",Prob20.java(66:6-66:7),"x"
85,MEMBEREXPRESSION,"visited",Prob20.java(65:10-65:33),"nodes[u - 1][v].visited"
86,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(65:10-65:25),"nodes[u - 1][v]"
87,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(65:10-65:22),"nodes[u - 1]"
88,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(65:23-65:24),"v"
89,MEMBEREXPRESSION,"nodes",Prob20.java(65:10-65:15),"nodes"
90,BINARYOPERATOR,"-",Prob20.java(65:16-65:21),"u - 1"
91,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(65:16-65:17),"u"
92,LITERAL,"",Prob20.java(65:20-65:21),"1"
93,MEMBERCALLEXPRESSION,"add",Prob20.java(66:6-66:19),"x.add(u - 1);"
94,MEMBERCALLEXPRESSION,"add",Prob20.java(67:6-67:15),"y.add(v);"
95,BINARYOPERATOR,"=",Prob20.java(68:6-68:37),"nodes[u - 1][v].visited = true;"
96,BINARYOPERATOR,"=",Prob20.java(69:6-69:58),"nodes[u - 1][v].distance = nodes[u][v].distance + 1;"
97,DECLAREDREFERENCEEXPRESSION,"add",Prob20.java(66:8-66:11),"add"
98,DECLAREDREFERENCEEXPRESSION,"y",Prob20.java(67:6-67:7),"y"
99,BINARYOPERATOR,"-",Prob20.java(66:12-66:17),"u - 1"
100,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(66:12-66:13),"u"
101,LITERAL,"",Prob20.java(66:16-66:17),"1"
102,MEMBEREXPRESSION,"distance",Prob20.java(69:6-69:30),"nodes[u - 1][v].distance"
103,BINARYOPERATOR,"+",Prob20.java(69:33-69:57),"nodes[u][v].distance + 1"
104,MEMBEREXPRESSION,"distance",Prob20.java(69:33-69:53),"nodes[u][v].distance"
105,LITERAL,"",Prob20.java(69:56-69:57),"1"
106,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(69:33-69:44),"nodes[u][v]"
107,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(69:33-69:41),"nodes[u]"
108,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(69:42-69:43),"v"
109,MEMBEREXPRESSION,"nodes",Prob20.java(69:33-69:38),"nodes"
110,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(69:39-69:40),"u"
111,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(69:33-69:38),"Prob20"
112,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(69:6-69:21),"nodes[u - 1][v]"
113,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(69:6-69:18),"nodes[u - 1]"
114,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(69:19-69:20),"v"
115,MEMBEREXPRESSION,"nodes",Prob20.java(69:6-69:11),"nodes"
116,BINARYOPERATOR,"-",Prob20.java(69:12-69:17),"u - 1"
117,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(69:12-69:13),"u"
118,LITERAL,"",Prob20.java(69:16-69:17),"1"
119,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(69:6-69:11),"Prob20"
120,DECLAREDREFERENCEEXPRESSION,"add",Prob20.java(67:8-67:11),"add"
121,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(68:6-68:11),"Prob20"
122,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(67:12-67:13),"v"
123,MEMBEREXPRESSION,"visited",Prob20.java(68:6-68:29),"nodes[u - 1][v].visited"
124,LITERAL,"",Prob20.java(68:32-68:36),"true"
125,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(68:6-68:21),"nodes[u - 1][v]"
126,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(68:6-68:18),"nodes[u - 1]"
127,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(68:19-68:20),"v"
128,MEMBEREXPRESSION,"nodes",Prob20.java(68:6-68:11),"nodes"
129,BINARYOPERATOR,"-",Prob20.java(68:12-68:17),"u - 1"
130,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(68:12-68:13),"u"
131,LITERAL,"",Prob20.java(68:16-68:17),"1"
132,BINARYOPERATOR,"<",Prob20.java(57:8-57:17),"u < l - 1"
133,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(58:10-58:15),"Prob20"
134,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(57:8-57:9),"u"
135,BINARYOPERATOR,"-",Prob20.java(57:12-57:17),"l - 1"
136,MEMBEREXPRESSION,"l",Prob20.java(57:12-57:13),"l"
137,LITERAL,"",Prob20.java(57:16-57:17),"1"
138,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(57:12-57:13),"Prob20"
139,COMPOUNDSTATEMENT,"",Prob20.java(51:35-56:6),"{
					x.add(u);
					y.add(v - 1);
					nodes[u][v - 1].visited = true;
					nodes[u][v - 1].distance = nodes[u][v].distance + 1;
				}"
140,IFSTATEMENT,"",Prob20.java(51:5-56:6),"if (!nodes[u][v - 1].visited) {
					x.add(u);
					y.add(v - 1);
					nodes[u][v - 1].visited = true;
					nodes[u][v - 1].distance = nodes[u][v].distance + 1;
				}"
141,UNARYOPERATOR,"!",Prob20.java(58:9-58:33),"!nodes[u + 1][v].visited"
142,DECLAREDREFERENCEEXPRESSION,"x",Prob20.java(59:6-59:7),"x"
143,MEMBERCALLEXPRESSION,"add",Prob20.java(59:6-59:19),"x.add(u + 1);"
144,MEMBERCALLEXPRESSION,"add",Prob20.java(60:6-60:15),"y.add(v);"
145,BINARYOPERATOR,"=",Prob20.java(61:6-61:37),"nodes[u + 1][v].visited = true;"
146,BINARYOPERATOR,"=",Prob20.java(62:6-62:58),"nodes[u + 1][v].distance = nodes[u][v].distance + 1;"
147,MEMBEREXPRESSION,"visited",Prob20.java(61:6-61:29),"nodes[u + 1][v].visited"
148,LITERAL,"",Prob20.java(61:32-61:36),"true"
149,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(62:6-62:11),"Prob20"
150,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(61:6-61:21),"nodes[u + 1][v]"
151,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(61:6-61:18),"nodes[u + 1]"
152,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(61:19-61:20),"v"
153,MEMBEREXPRESSION,"nodes",Prob20.java(61:6-61:11),"nodes"
154,BINARYOPERATOR,"+",Prob20.java(61:12-61:17),"u + 1"
155,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(61:6-61:11),"Prob20"
156,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(61:12-61:13),"u"
157,LITERAL,"",Prob20.java(61:16-61:17),"1"
158,DECLAREDREFERENCEEXPRESSION,"add",Prob20.java(59:8-59:11),"add"
159,DECLAREDREFERENCEEXPRESSION,"y",Prob20.java(60:6-60:7),"y"
160,BINARYOPERATOR,"+",Prob20.java(59:12-59:17),"u + 1"
161,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(59:12-59:13),"u"
162,LITERAL,"",Prob20.java(59:16-59:17),"1"
163,DECLAREDREFERENCEEXPRESSION,"add",Prob20.java(60:8-60:11),"add"
164,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(60:12-60:13),"v"
165,MEMBEREXPRESSION,"distance",Prob20.java(62:6-62:30),"nodes[u + 1][v].distance"
166,BINARYOPERATOR,"+",Prob20.java(62:33-62:57),"nodes[u][v].distance + 1"
167,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(62:6-62:21),"nodes[u + 1][v]"
168,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(62:33-62:38),"Prob20"
169,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(62:6-62:18),"nodes[u + 1]"
170,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(62:19-62:20),"v"
171,MEMBEREXPRESSION,"nodes",Prob20.java(62:6-62:11),"nodes"
172,BINARYOPERATOR,"+",Prob20.java(62:12-62:17),"u + 1"
173,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(62:12-62:13),"u"
174,LITERAL,"",Prob20.java(62:16-62:17),"1"
175,MEMBEREXPRESSION,"distance",Prob20.java(62:33-62:53),"nodes[u][v].distance"
176,LITERAL,"",Prob20.java(62:56-62:57),"1"
177,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(62:33-62:44),"nodes[u][v]"
178,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(62:33-62:41),"nodes[u]"
179,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(62:42-62:43),"v"
180,MEMBEREXPRESSION,"nodes",Prob20.java(62:33-62:38),"nodes"
181,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(62:39-62:40),"u"
182,MEMBEREXPRESSION,"visited",Prob20.java(58:10-58:33),"nodes[u + 1][v].visited"
183,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(58:10-58:25),"nodes[u + 1][v]"
184,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(58:10-58:22),"nodes[u + 1]"
185,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(58:23-58:24),"v"
186,MEMBEREXPRESSION,"nodes",Prob20.java(58:10-58:15),"nodes"
187,BINARYOPERATOR,"+",Prob20.java(58:16-58:21),"u + 1"
188,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(58:16-58:17),"u"
189,LITERAL,"",Prob20.java(58:20-58:21),"1"
190,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(43:8-43:9),"v"
191,BINARYOPERATOR,"<",Prob20.java(43:8-43:17),"v < c - 1"
192,IFSTATEMENT,"",Prob20.java(44:5-49:6),"if (!nodes[u][v + 1].visited) {
					x.add(u);
					y.add(v + 1);
					nodes[u][v + 1].visited = true;
					nodes[u][v + 1].distance = nodes[u][v].distance + 1;
				}"
193,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(44:10-44:15),"Prob20"
194,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(50:8-50:9),"v"
195,UNARYOPERATOR,"!",Prob20.java(44:9-44:33),"!nodes[u][v + 1].visited"
196,COMPOUNDSTATEMENT,"",Prob20.java(44:35-49:6),"{
					x.add(u);
					y.add(v + 1);
					nodes[u][v + 1].visited = true;
					nodes[u][v + 1].distance = nodes[u][v].distance + 1;
				}"
197,DECLAREDREFERENCEEXPRESSION,"x",Prob20.java(45:6-45:7),"x"
198,MEMBEREXPRESSION,"visited",Prob20.java(44:10-44:33),"nodes[u][v + 1].visited"
199,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(44:10-44:25),"nodes[u][v + 1]"
200,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(44:10-44:18),"nodes[u]"
201,BINARYOPERATOR,"+",Prob20.java(44:19-44:24),"v + 1"
202,MEMBEREXPRESSION,"nodes",Prob20.java(44:10-44:15),"nodes"
203,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(44:16-44:17),"u"
204,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(44:19-44:20),"v"
205,LITERAL,"",Prob20.java(44:23-44:24),"1"
206,MEMBERCALLEXPRESSION,"add",Prob20.java(45:6-45:15),"x.add(u);"
207,MEMBERCALLEXPRESSION,"add",Prob20.java(46:6-46:19),"y.add(v + 1);"
208,BINARYOPERATOR,"=",Prob20.java(47:6-47:37),"nodes[u][v + 1].visited = true;"
209,BINARYOPERATOR,"=",Prob20.java(48:6-48:58),"nodes[u][v + 1].distance = nodes[u][v].distance + 1;"
210,DECLAREDREFERENCEEXPRESSION,"add",Prob20.java(45:8-45:11),"add"
211,DECLAREDREFERENCEEXPRESSION,"y",Prob20.java(46:6-46:7),"y"
212,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(45:12-45:13),"u"
213,MEMBEREXPRESSION,"distance",Prob20.java(48:6-48:30),"nodes[u][v + 1].distance"
214,BINARYOPERATOR,"+",Prob20.java(48:33-48:57),"nodes[u][v].distance + 1"
215,MEMBEREXPRESSION,"distance",Prob20.java(48:33-48:53),"nodes[u][v].distance"
216,LITERAL,"",Prob20.java(48:56-48:57),"1"
217,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(48:33-48:44),"nodes[u][v]"
218,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(48:33-48:41),"nodes[u]"
219,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(48:42-48:43),"v"
220,MEMBEREXPRESSION,"nodes",Prob20.java(48:33-48:38),"nodes"
221,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(48:39-48:40),"u"
222,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(48:33-48:38),"Prob20"
223,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(48:6-48:21),"nodes[u][v + 1]"
224,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(48:6-48:14),"nodes[u]"
225,BINARYOPERATOR,"+",Prob20.java(48:15-48:20),"v + 1"
226,MEMBEREXPRESSION,"nodes",Prob20.java(48:6-48:11),"nodes"
227,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(48:12-48:13),"u"
228,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(48:15-48:16),"v"
229,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(48:6-48:11),"Prob20"
230,LITERAL,"",Prob20.java(48:19-48:20),"1"
231,DECLAREDREFERENCEEXPRESSION,"add",Prob20.java(46:8-46:11),"add"
232,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(47:6-47:11),"Prob20"
233,BINARYOPERATOR,"+",Prob20.java(46:12-46:17),"v + 1"
234,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(46:12-46:13),"v"
235,LITERAL,"",Prob20.java(46:16-46:17),"1"
236,MEMBEREXPRESSION,"visited",Prob20.java(47:6-47:29),"nodes[u][v + 1].visited"
237,LITERAL,"",Prob20.java(47:32-47:36),"true"
238,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(47:6-47:21),"nodes[u][v + 1]"
239,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(47:6-47:14),"nodes[u]"
240,BINARYOPERATOR,"+",Prob20.java(47:15-47:20),"v + 1"
241,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(47:15-47:16),"v"
242,LITERAL,"",Prob20.java(47:19-47:20),"1"
243,MEMBEREXPRESSION,"nodes",Prob20.java(47:6-47:11),"nodes"
244,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(47:12-47:13),"u"
245,BINARYOPERATOR,"-",Prob20.java(43:12-43:17),"c - 1"
246,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(43:12-43:13),"Prob20"
247,MEMBEREXPRESSION,"c",Prob20.java(43:12-43:13),"c"
248,LITERAL,"",Prob20.java(43:16-43:17),"1"
249,MEMBERCALLEXPRESSION,"removeFirst",Prob20.java(42:12-42:27),"y.removeFirst()"
250,DECLAREDREFERENCEEXPRESSION,"removeFirst",Prob20.java(42:14-42:25),"removeFirst"
251,MEMBERCALLEXPRESSION,"removeFirst",Prob20.java(41:12-41:27),"x.removeFirst()"
252,DECLAREDREFERENCEEXPRESSION,"removeFirst",Prob20.java(41:14-41:25),"removeFirst"
253,BINARYOPERATOR,">",Prob20.java(50:8-50:13),"v > 0"
254,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(51:10-51:15),"Prob20"
255,LITERAL,"",Prob20.java(50:12-50:13),"0"
256,UNARYOPERATOR,"!",Prob20.java(51:9-51:33),"!nodes[u][v - 1].visited"
257,DECLAREDREFERENCEEXPRESSION,"x",Prob20.java(52:6-52:7),"x"
258,MEMBEREXPRESSION,"visited",Prob20.java(51:10-51:33),"nodes[u][v - 1].visited"
259,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(51:10-51:25),"nodes[u][v - 1]"
260,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(51:10-51:18),"nodes[u]"
261,BINARYOPERATOR,"-",Prob20.java(51:19-51:24),"v - 1"
262,MEMBEREXPRESSION,"nodes",Prob20.java(51:10-51:15),"nodes"
263,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(51:16-51:17),"u"
264,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(51:19-51:20),"v"
265,LITERAL,"",Prob20.java(51:23-51:24),"1"
266,MEMBERCALLEXPRESSION,"add",Prob20.java(52:6-52:15),"x.add(u);"
267,MEMBERCALLEXPRESSION,"add",Prob20.java(53:6-53:19),"y.add(v - 1);"
268,BINARYOPERATOR,"=",Prob20.java(54:6-54:37),"nodes[u][v - 1].visited = true;"
269,BINARYOPERATOR,"=",Prob20.java(55:6-55:58),"nodes[u][v - 1].distance = nodes[u][v].distance + 1;"
270,DECLAREDREFERENCEEXPRESSION,"add",Prob20.java(52:8-52:11),"add"
271,DECLAREDREFERENCEEXPRESSION,"y",Prob20.java(53:6-53:7),"y"
272,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(52:12-52:13),"u"
273,DECLAREDREFERENCEEXPRESSION,"add",Prob20.java(53:8-53:11),"add"
274,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(54:6-54:11),"Prob20"
275,BINARYOPERATOR,"-",Prob20.java(53:12-53:17),"v - 1"
276,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(53:12-53:13),"v"
277,LITERAL,"",Prob20.java(53:16-53:17),"1"
278,MEMBEREXPRESSION,"visited",Prob20.java(54:6-54:29),"nodes[u][v - 1].visited"
279,LITERAL,"",Prob20.java(54:32-54:36),"true"
280,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(55:6-55:11),"Prob20"
281,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(54:6-54:21),"nodes[u][v - 1]"
282,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(54:6-54:14),"nodes[u]"
283,BINARYOPERATOR,"-",Prob20.java(54:15-54:20),"v - 1"
284,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(54:15-54:16),"v"
285,LITERAL,"",Prob20.java(54:19-54:20),"1"
286,MEMBEREXPRESSION,"nodes",Prob20.java(54:6-54:11),"nodes"
287,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(54:12-54:13),"u"
288,MEMBEREXPRESSION,"distance",Prob20.java(55:6-55:30),"nodes[u][v - 1].distance"
289,BINARYOPERATOR,"+",Prob20.java(55:33-55:57),"nodes[u][v].distance + 1"
290,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(55:6-55:21),"nodes[u][v - 1]"
291,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(55:33-55:38),"Prob20"
292,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(55:6-55:14),"nodes[u]"
293,BINARYOPERATOR,"-",Prob20.java(55:15-55:20),"v - 1"
294,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(55:15-55:16),"v"
295,LITERAL,"",Prob20.java(55:19-55:20),"1"
296,MEMBEREXPRESSION,"nodes",Prob20.java(55:6-55:11),"nodes"
297,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(55:12-55:13),"u"
298,MEMBEREXPRESSION,"distance",Prob20.java(55:33-55:53),"nodes[u][v].distance"
299,LITERAL,"",Prob20.java(55:56-55:57),"1"
300,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(55:33-55:44),"nodes[u][v]"
301,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(55:33-55:41),"nodes[u]"
302,DECLAREDREFERENCEEXPRESSION,"v",Prob20.java(55:42-55:43),"v"
303,MEMBEREXPRESSION,"nodes",Prob20.java(55:33-55:38),"nodes"
304,DECLAREDREFERENCEEXPRESSION,"u",Prob20.java(55:39-55:40),"u"
305,FORSTATEMENT,"",Prob20.java(32:4-38:6),"for (int j = 0; j < c; j++)
				if (matriz[i][j] != '#') {
					x.add(i);
					y.add(j);
					nodes[i][j].visited = true;
					nodes[i][j].distance = 0;
				}"
306,DECLARATIONSTATEMENT,"",Prob20.java(31:8-31:17),"int i = 0"
307,BINARYOPERATOR,"<",Prob20.java(31:19-31:24),"i < l"
308,UNARYOPERATOR,"++",Prob20.java(31:26-31:29),"i++"
309,VARIABLEDECLARATION,"i",Prob20.java(31:12-31:17),"i = 0"
310,LITERAL,"",Prob20.java(32:17-32:18),"0"
311,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(31:19-31:20),"i"
312,IFSTATEMENT,"",Prob20.java(33:5-38:6),"if (matriz[i][j] != '#') {
					x.add(i);
					y.add(j);
					nodes[i][j].visited = true;
					nodes[i][j].distance = 0;
				}"
313,DECLARATIONSTATEMENT,"",Prob20.java(32:9-32:18),"int j = 0"
314,BINARYOPERATOR,"<",Prob20.java(32:20-32:25),"j < c"
315,UNARYOPERATOR,"++",Prob20.java(32:27-32:30),"j++"
316,VARIABLEDECLARATION,"j",Prob20.java(32:13-32:18),"j = 0"
317,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(33:9-33:15),"Prob20"
318,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(31:26-31:27),"i"
319,BINARYOPERATOR,"!=",Prob20.java(33:9-33:28),"matriz[i][j] != '#'"
320,COMPOUNDSTATEMENT,"",Prob20.java(33:30-38:6),"{
					x.add(i);
					y.add(j);
					nodes[i][j].visited = true;
					nodes[i][j].distance = 0;
				}"
321,DECLAREDREFERENCEEXPRESSION,"x",Prob20.java(34:6-34:7),"x"
322,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(32:27-32:28),"j"
323,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(33:9-33:21),"matriz[i][j]"
324,LITERAL,"",Prob20.java(33:25-33:28),"'#'"
325,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(33:9-33:18),"matriz[i]"
326,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(33:19-33:20),"j"
327,MEMBEREXPRESSION,"matriz",Prob20.java(33:9-33:15),"matriz"
328,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(33:16-33:17),"i"
329,MEMBERCALLEXPRESSION,"add",Prob20.java(34:6-34:15),"x.add(i);"
330,MEMBERCALLEXPRESSION,"add",Prob20.java(35:6-35:15),"y.add(j);"
331,BINARYOPERATOR,"=",Prob20.java(36:6-36:33),"nodes[i][j].visited = true;"
332,BINARYOPERATOR,"=",Prob20.java(37:6-37:31),"nodes[i][j].distance = 0;"
333,MEMBEREXPRESSION,"distance",Prob20.java(37:6-37:26),"nodes[i][j].distance"
334,LITERAL,"",Prob20.java(37:29-37:30),"0"
335,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(37:6-37:17),"nodes[i][j]"
336,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(37:6-37:14),"nodes[i]"
337,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(37:15-37:16),"j"
338,MEMBEREXPRESSION,"nodes",Prob20.java(37:6-37:11),"nodes"
339,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(37:12-37:13),"i"
340,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(37:6-37:11),"Prob20"
341,DECLAREDREFERENCEEXPRESSION,"add",Prob20.java(34:8-34:11),"add"
342,DECLAREDREFERENCEEXPRESSION,"y",Prob20.java(35:6-35:7),"y"
343,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(34:12-34:13),"i"
344,DECLAREDREFERENCEEXPRESSION,"add",Prob20.java(35:8-35:11),"add"
345,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(36:6-36:11),"Prob20"
346,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(35:12-35:13),"j"
347,MEMBEREXPRESSION,"visited",Prob20.java(36:6-36:25),"nodes[i][j].visited"
348,LITERAL,"",Prob20.java(36:28-36:32),"true"
349,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(36:6-36:17),"nodes[i][j]"
350,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(36:6-36:14),"nodes[i]"
351,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(36:15-36:16),"j"
352,MEMBEREXPRESSION,"nodes",Prob20.java(36:6-36:11),"nodes"
353,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(36:12-36:13),"i"
354,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(32:20-32:21),"j"
355,MEMBEREXPRESSION,"c",Prob20.java(32:24-32:25),"c"
356,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(32:24-32:25),"Prob20"
357,MEMBEREXPRESSION,"l",Prob20.java(31:23-31:24),"l"
358,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(31:23-31:24),"Prob20"
359,NEWEXPRESSION,"",Prob20.java(28:27-28:52),"new LinkedList<Integer>()"
360,UNARYOPERATOR,"-",Prob20.java(24:23-24:25),"-1"
361,LITERAL,"",Prob20.java(24:24-24:25),"1"
362,VARIABLEDECLARATION,"this",,""
363,COMPOUNDSTATEMENT,"",Prob20.java(74:41-107:3),"{
		Scanner stdin = new Scanner(System.in);
		l = stdin.nextInt();
		c = stdin.nextInt();
		linha = stdin.nextLine();
		matriz = new char[l][c];
		nodes = new Node3[l + 1][c + 1];
		distMin = l*c;
		for (int i = 0; i < l; i++) {
			linha = stdin.nextLine();
			for (int j = 0; j < c; j++) {
				matriz[i][j] = linha.charAt(j);
			}
		}

		for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				nodes[i][j] = new Node3();

		bfs();
		for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				if (matriz[i][j] == 'A') {
					if (nodes[i][j].distance > distMax)
						distMax = nodes[i][j].distance;
					if (nodes[i][j].distance < distMin) {

						distMin = nodes[i][j].distance;
					}
				}

		System.out.println(distMin + "" "" + distMax);

	}"
364,PARAMVARIABLEDECLARATION,"args",Prob20.java(74:26-74:39),"String[] args"
365,DECLAREDREFERENCEEXPRESSION,"System",Prob20.java(75:31-75:37),"System"
366,RETURNSTATEMENT,"",,""
367,DECLARATIONSTATEMENT,"",Prob20.java(75:3-75:42),"Scanner stdin = new Scanner(System.in);"
368,BINARYOPERATOR,"=",Prob20.java(76:3-76:23),"l = stdin.nextInt();"
369,BINARYOPERATOR,"=",Prob20.java(77:3-77:23),"c = stdin.nextInt();"
370,BINARYOPERATOR,"=",Prob20.java(78:3-78:28),"linha = stdin.nextLine();"
371,BINARYOPERATOR,"=",Prob20.java(79:3-79:27),"matriz = new char[l][c];"
372,BINARYOPERATOR,"=",Prob20.java(80:3-80:35),"nodes = new Node3[l + 1][c + 1];"
373,BINARYOPERATOR,"=",Prob20.java(81:3-81:17),"distMin = l*c;"
374,FORSTATEMENT,"",Prob20.java(82:3-87:4),"for (int i = 0; i < l; i++) {
			linha = stdin.nextLine();
			for (int j = 0; j < c; j++) {
				matriz[i][j] = linha.charAt(j);
			}
		}"
375,FORSTATEMENT,"",Prob20.java(89:3-91:31),"for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				nodes[i][j] = new Node3();"
376,FORSTATEMENT,"",Prob20.java(94:3-103:6),"for (int i = 0; i < l; i++)
			for (int j = 0; j < c; j++)
				if (matriz[i][j] == 'A') {
					if (nodes[i][j].distance > distMax)
						distMax = nodes[i][j].distance;
					if (nodes[i][j].distance < distMin) {

						distMin = nodes[i][j].distance;
					}
				}"
377,MEMBERCALLEXPRESSION,"println",Prob20.java(105:3-105:47),"System.out.println(distMin + "" "" + distMax);"
378,VARIABLEDECLARATION,"stdin",Prob20.java(75:11-75:41),"stdin = new Scanner(System.in)"
379,NEWEXPRESSION,"",Prob20.java(75:19-75:41),"new Scanner(System.in)"
380,CONSTRUCTEXPRESSION,"",Prob20.java(75:19-75:41),"new Scanner(System.in)"
381,MEMBEREXPRESSION,"in",Prob20.java(75:31-75:40),"System.in"
382,COMPOUNDSTATEMENT,"",Prob20.java(82:31-87:4),"{
			linha = stdin.nextLine();
			for (int j = 0; j < c; j++) {
				matriz[i][j] = linha.charAt(j);
			}
		}"
383,DECLARATIONSTATEMENT,"",Prob20.java(82:8-82:17),"int i = 0"
384,BINARYOPERATOR,"<",Prob20.java(82:19-82:24),"i < l"
385,UNARYOPERATOR,"++",Prob20.java(82:26-82:29),"i++"
386,VARIABLEDECLARATION,"i",Prob20.java(82:12-82:17),"i = 0"
387,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(83:4-83:9),"Prob20"
388,LITERAL,"",Prob20.java(89:16-89:17),"0"
389,BINARYOPERATOR,"=",Prob20.java(83:4-83:29),"linha = stdin.nextLine();"
390,FORSTATEMENT,"",Prob20.java(84:4-86:5),"for (int j = 0; j < c; j++) {
				matriz[i][j] = linha.charAt(j);
			}"
391,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(82:26-82:27),"i"
392,COMPOUNDSTATEMENT,"",Prob20.java(84:32-86:5),"{
				matriz[i][j] = linha.charAt(j);
			}"
393,DECLARATIONSTATEMENT,"",Prob20.java(84:9-84:18),"int j = 0"
394,BINARYOPERATOR,"<",Prob20.java(84:20-84:25),"j < c"
395,UNARYOPERATOR,"++",Prob20.java(84:27-84:30),"j++"
396,VARIABLEDECLARATION,"j",Prob20.java(84:13-84:18),"j = 0"
397,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(85:5-85:11),"Prob20"
398,BINARYOPERATOR,"=",Prob20.java(85:5-85:36),"matriz[i][j] = linha.charAt(j);"
399,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(84:27-84:28),"j"
400,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(85:5-85:17),"matriz[i][j]"
401,MEMBERCALLEXPRESSION,"charAt",Prob20.java(85:20-85:35),"linha.charAt(j)"
402,DECLAREDREFERENCEEXPRESSION,"charAt",Prob20.java(85:26-85:32),"charAt"
403,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(85:33-85:34),"j"
404,MEMBEREXPRESSION,"linha",Prob20.java(85:20-85:25),"linha"
405,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(85:20-85:25),"Prob20"
406,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(85:5-85:14),"matriz[i]"
407,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(85:15-85:16),"j"
408,MEMBEREXPRESSION,"matriz",Prob20.java(85:5-85:11),"matriz"
409,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(85:12-85:13),"i"
410,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(84:20-84:21),"j"
411,MEMBEREXPRESSION,"c",Prob20.java(84:24-84:25),"c"
412,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(84:24-84:25),"Prob20"
413,LITERAL,"",Prob20.java(84:17-84:18),"0"
414,MEMBEREXPRESSION,"linha",Prob20.java(83:4-83:9),"linha"
415,MEMBERCALLEXPRESSION,"nextLine",Prob20.java(83:12-83:28),"stdin.nextLine()"
416,DECLAREDREFERENCEEXPRESSION,"stdin",Prob20.java(83:12-83:17),"stdin"
417,DECLAREDREFERENCEEXPRESSION,"nextLine",Prob20.java(83:18-83:26),"nextLine"
418,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(82:19-82:20),"i"
419,LITERAL,"",Prob20.java(82:16-82:17),"0"
420,MEMBEREXPRESSION,"l",Prob20.java(82:23-82:24),"l"
421,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(82:23-82:24),"Prob20"
422,MEMBEREXPRESSION,"distMin",Prob20.java(81:3-81:10),"distMin"
423,BINARYOPERATOR,"*",Prob20.java(81:13-81:16),"l*c"
424,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(81:3-81:10),"Prob20"
425,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(81:13-81:14),"Prob20"
426,MEMBEREXPRESSION,"l",Prob20.java(81:13-81:14),"l"
427,MEMBEREXPRESSION,"c",Prob20.java(81:15-81:16),"c"
428,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(81:15-81:16),"Prob20"
429,FORSTATEMENT,"",Prob20.java(90:4-91:31),"for (int j = 0; j < c; j++)
				nodes[i][j] = new Node3();"
430,DECLARATIONSTATEMENT,"",Prob20.java(89:8-89:17),"int i = 0"
431,BINARYOPERATOR,"<",Prob20.java(89:19-89:24),"i < l"
432,UNARYOPERATOR,"++",Prob20.java(89:26-89:29),"i++"
433,VARIABLEDECLARATION,"i",Prob20.java(89:12-89:17),"i = 0"
434,LITERAL,"",Prob20.java(90:17-90:18),"0"
435,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(89:19-89:20),"i"
436,MEMBEREXPRESSION,"l",Prob20.java(89:23-89:24),"l"
437,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(89:23-89:24),"Prob20"
438,BINARYOPERATOR,"=",Prob20.java(91:5-91:31),"nodes[i][j] = new Node3();"
439,DECLARATIONSTATEMENT,"",Prob20.java(90:9-90:18),"int j = 0"
440,BINARYOPERATOR,"<",Prob20.java(90:20-90:25),"j < c"
441,UNARYOPERATOR,"++",Prob20.java(90:27-90:30),"j++"
442,VARIABLEDECLARATION,"j",Prob20.java(90:13-90:18),"j = 0"
443,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(91:5-91:10),"Prob20"
444,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(89:26-89:27),"i"
445,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(90:20-90:21),"j"
446,MEMBEREXPRESSION,"c",Prob20.java(90:24-90:25),"c"
447,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(90:24-90:25),"Prob20"
448,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(90:27-90:28),"j"
449,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(91:5-91:16),"nodes[i][j]"
450,NEWEXPRESSION,"",Prob20.java(91:19-91:30),"new Node3()"
451,CONSTRUCTEXPRESSION,"",Prob20.java(91:19-91:30),"new Node3()"
452,CONSTRUCTORDECLARATION,"Node3",Prob20.java(11:2-14:3),"Node3() {
		visited = false;
		distance = 10;
	}"
453,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(91:5-91:13),"nodes[i]"
454,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(91:14-91:15),"j"
455,MEMBEREXPRESSION,"nodes",Prob20.java(91:5-91:10),"nodes"
456,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(91:11-91:12),"i"
457,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(76:3-76:4),"Prob20"
458,MEMBEREXPRESSION,"linha",Prob20.java(78:3-78:8),"linha"
459,MEMBERCALLEXPRESSION,"nextLine",Prob20.java(78:11-78:27),"stdin.nextLine()"
460,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(79:3-79:9),"Prob20"
461,DECLAREDREFERENCEEXPRESSION,"nextLine",Prob20.java(78:17-78:25),"nextLine"
462,DECLAREDREFERENCEEXPRESSION,"stdin",Prob20.java(78:11-78:16),"stdin"
463,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(78:3-78:8),"Prob20"
464,MEMBEREXPRESSION,"nodes",Prob20.java(80:3-80:8),"nodes"
465,ARRAYCREATIONEXPRESSION,"",Prob20.java(80:11-80:34),"new Node3[l + 1][c + 1]"
466,BINARYOPERATOR,"+",Prob20.java(80:21-80:26),"l + 1"
467,BINARYOPERATOR,"+",Prob20.java(80:28-80:33),"c + 1"
468,MEMBEREXPRESSION,"c",Prob20.java(80:28-80:29),"c"
469,LITERAL,"",Prob20.java(80:32-80:33),"1"
470,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(80:28-80:29),"Prob20"
471,MEMBEREXPRESSION,"l",Prob20.java(80:21-80:22),"l"
472,LITERAL,"",Prob20.java(80:25-80:26),"1"
473,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(80:21-80:22),"Prob20"
474,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(80:3-80:8),"Prob20"
475,MEMBEREXPRESSION,"c",Prob20.java(77:3-77:4),"c"
476,MEMBERCALLEXPRESSION,"nextInt",Prob20.java(77:7-77:22),"stdin.nextInt()"
477,DECLAREDREFERENCEEXPRESSION,"nextInt",Prob20.java(77:13-77:20),"nextInt"
478,DECLAREDREFERENCEEXPRESSION,"stdin",Prob20.java(77:7-77:12),"stdin"
479,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(77:3-77:4),"Prob20"
480,MEMBEREXPRESSION,"matriz",Prob20.java(79:3-79:9),"matriz"
481,ARRAYCREATIONEXPRESSION,"",Prob20.java(79:12-79:26),"new char[l][c]"
482,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(79:21-79:22),"Prob20"
483,MEMBEREXPRESSION,"l",Prob20.java(79:21-79:22),"l"
484,MEMBEREXPRESSION,"c",Prob20.java(79:24-79:25),"c"
485,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(79:24-79:25),"Prob20"
486,MEMBEREXPRESSION,"l",Prob20.java(76:3-76:4),"l"
487,MEMBERCALLEXPRESSION,"nextInt",Prob20.java(76:7-76:22),"stdin.nextInt()"
488,DECLAREDREFERENCEEXPRESSION,"nextInt",Prob20.java(76:13-76:20),"nextInt"
489,DECLAREDREFERENCEEXPRESSION,"stdin",Prob20.java(76:7-76:12),"stdin"
490,DECLAREDREFERENCEEXPRESSION,"println",Prob20.java(105:14-105:21),"println"
491,BINARYOPERATOR,"+",Prob20.java(105:22-105:45),"distMin + "" "" + distMax"
492,MEMBEREXPRESSION,"out",Prob20.java(105:3-105:13),"System.out"
493,DECLAREDREFERENCEEXPRESSION,"System",Prob20.java(105:3-105:9),"System"
494,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(105:22-105:29),"Prob20"
495,BINARYOPERATOR,"+",Prob20.java(105:22-105:35),"distMin + "" """
496,MEMBEREXPRESSION,"distMax",Prob20.java(105:38-105:45),"distMax"
497,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(105:38-105:45),"Prob20"
498,MEMBEREXPRESSION,"distMin",Prob20.java(105:22-105:29),"distMin"
499,LITERAL,"",Prob20.java(105:32-105:35),""" """
500,LITERAL,"",Prob20.java(94:16-94:17),"0"
501,FORSTATEMENT,"",Prob20.java(95:4-103:6),"for (int j = 0; j < c; j++)
				if (matriz[i][j] == 'A') {
					if (nodes[i][j].distance > distMax)
						distMax = nodes[i][j].distance;
					if (nodes[i][j].distance < distMin) {

						distMin = nodes[i][j].distance;
					}
				}"
502,DECLARATIONSTATEMENT,"",Prob20.java(94:8-94:17),"int i = 0"
503,BINARYOPERATOR,"<",Prob20.java(94:19-94:24),"i < l"
504,UNARYOPERATOR,"++",Prob20.java(94:26-94:29),"i++"
505,VARIABLEDECLARATION,"i",Prob20.java(94:12-94:17),"i = 0"
506,LITERAL,"",Prob20.java(95:17-95:18),"0"
507,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(94:19-94:20),"i"
508,MEMBEREXPRESSION,"l",Prob20.java(94:23-94:24),"l"
509,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(94:23-94:24),"Prob20"
510,IFSTATEMENT,"",Prob20.java(96:5-103:6),"if (matriz[i][j] == 'A') {
					if (nodes[i][j].distance > distMax)
						distMax = nodes[i][j].distance;
					if (nodes[i][j].distance < distMin) {

						distMin = nodes[i][j].distance;
					}
				}"
511,DECLARATIONSTATEMENT,"",Prob20.java(95:9-95:18),"int j = 0"
512,BINARYOPERATOR,"<",Prob20.java(95:20-95:25),"j < c"
513,UNARYOPERATOR,"++",Prob20.java(95:27-95:30),"j++"
514,VARIABLEDECLARATION,"j",Prob20.java(95:13-95:18),"j = 0"
515,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(96:9-96:15),"Prob20"
516,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(94:26-94:27),"i"
517,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(95:20-95:21),"j"
518,MEMBEREXPRESSION,"c",Prob20.java(95:24-95:25),"c"
519,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(95:24-95:25),"Prob20"
520,BINARYOPERATOR,"==",Prob20.java(96:9-96:28),"matriz[i][j] == 'A'"
521,COMPOUNDSTATEMENT,"",Prob20.java(96:30-103:6),"{
					if (nodes[i][j].distance > distMax)
						distMax = nodes[i][j].distance;
					if (nodes[i][j].distance < distMin) {

						distMin = nodes[i][j].distance;
					}
				}"
522,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(97:10-97:15),"Prob20"
523,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(95:27-95:28),"j"
524,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(96:9-96:21),"matriz[i][j]"
525,LITERAL,"",Prob20.java(96:25-96:28),"'A'"
526,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(96:9-96:18),"matriz[i]"
527,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(96:19-96:20),"j"
528,MEMBEREXPRESSION,"matriz",Prob20.java(96:9-96:15),"matriz"
529,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(96:16-96:17),"i"
530,IFSTATEMENT,"",Prob20.java(97:6-98:38),"if (nodes[i][j].distance > distMax)
						distMax = nodes[i][j].distance;"
531,IFSTATEMENT,"",Prob20.java(99:6-102:7),"if (nodes[i][j].distance < distMin) {

						distMin = nodes[i][j].distance;
					}"
532,COMPOUNDSTATEMENT,"",Prob20.java(99:42-102:7),"{

						distMin = nodes[i][j].distance;
					}"
533,BINARYOPERATOR,">",Prob20.java(97:10-97:40),"nodes[i][j].distance > distMax"
534,BINARYOPERATOR,"=",Prob20.java(98:7-98:38),"distMax = nodes[i][j].distance;"
535,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(98:7-98:14),"Prob20"
536,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(99:10-99:15),"Prob20"
537,MEMBEREXPRESSION,"distance",Prob20.java(97:10-97:30),"nodes[i][j].distance"
538,MEMBEREXPRESSION,"distMax",Prob20.java(97:33-97:40),"distMax"
539,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(97:10-97:21),"nodes[i][j]"
540,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(97:33-97:40),"Prob20"
541,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(97:10-97:18),"nodes[i]"
542,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(97:19-97:20),"j"
543,MEMBEREXPRESSION,"nodes",Prob20.java(97:10-97:15),"nodes"
544,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(97:16-97:17),"i"
545,MEMBEREXPRESSION,"distMax",Prob20.java(98:7-98:14),"distMax"
546,MEMBEREXPRESSION,"distance",Prob20.java(98:17-98:37),"nodes[i][j].distance"
547,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(98:17-98:22),"Prob20"
548,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(98:17-98:28),"nodes[i][j]"
549,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(98:17-98:25),"nodes[i]"
550,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(98:26-98:27),"j"
551,MEMBEREXPRESSION,"nodes",Prob20.java(98:17-98:22),"nodes"
552,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(98:23-98:24),"i"
553,BINARYOPERATOR,"<",Prob20.java(99:10-99:40),"nodes[i][j].distance < distMin"
554,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(101:7-101:14),"Prob20"
555,BINARYOPERATOR,"=",Prob20.java(101:7-101:38),"distMin = nodes[i][j].distance;"
556,MEMBEREXPRESSION,"distMin",Prob20.java(101:7-101:14),"distMin"
557,MEMBEREXPRESSION,"distance",Prob20.java(101:17-101:37),"nodes[i][j].distance"
558,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(101:17-101:22),"Prob20"
559,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(101:17-101:28),"nodes[i][j]"
560,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(101:17-101:25),"nodes[i]"
561,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(101:26-101:27),"j"
562,MEMBEREXPRESSION,"nodes",Prob20.java(101:17-101:22),"nodes"
563,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(101:23-101:24),"i"
564,MEMBEREXPRESSION,"distance",Prob20.java(99:10-99:30),"nodes[i][j].distance"
565,MEMBEREXPRESSION,"distMin",Prob20.java(99:33-99:40),"distMin"
566,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(99:10-99:21),"nodes[i][j]"
567,DECLAREDREFERENCEEXPRESSION,"Prob20",Prob20.java(99:33-99:40),"Prob20"
568,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob20.java(99:10-99:18),"nodes[i]"
569,DECLAREDREFERENCEEXPRESSION,"j",Prob20.java(99:19-99:20),"j"
570,MEMBEREXPRESSION,"nodes",Prob20.java(99:10-99:15),"nodes"
571,DECLAREDREFERENCEEXPRESSION,"i",Prob20.java(99:16-99:17),"i"
572,PARAMVARIABLEDECLARATION,"par0",,""
573,CALLEXPRESSION,"check_pos",Prob20.java(62:6-62:21),"check_pos(next)"
574,DECLAREDREFERENCEEXPRESSION,"next",Prob20.java(62:16-62:20),"next"
575,PARAMVARIABLEDECLARATION,"int0",,""
576,CALLEXPRESSION,"check_pos",Prob20.java(65:6-65:21),"check_pos(next)"
577,CALLEXPRESSION,"check_pos",Prob20.java(57:7-57:21),"check_pos(pos)"
578,DECLAREDREFERENCEEXPRESSION,"pos",Prob20.java(57:17-57:20),"pos"
579,DECLAREDREFERENCEEXPRESSION,"next",Prob20.java(65:16-65:20),"next"
580,PARAMVARIABLEDECLARATION,"int0",,""
581,PARAMVARIABLEDECLARATION,"int1",,""
582,PARAMVARIABLEDECLARATION,"charPtrPtr2",,""
583,CALLEXPRESSION,"verificaNuvem",Prob20.java(83:3-83:44),"verificaNuvem(nLinhas, nColunas, caract);"
584,CALLEXPRESSION,"verificaNuvem",Prob20.java(83:3-83:44),"verificaNuvem(nLinhas, nColunas, caract);"
585,DECLAREDREFERENCEEXPRESSION,"caract",Prob20.java(83:36-83:42),"caract"
586,DECLAREDREFERENCEEXPRESSION,"caract",Prob20.java(83:36-83:42),"caract"
587,DECLAREDREFERENCEEXPRESSION,"nLinhas",Prob20.java(83:17-83:24),"nLinhas"
588,DECLAREDREFERENCEEXPRESSION,"nLinhas",Prob20.java(83:17-83:24),"nLinhas"
589,DECLAREDREFERENCEEXPRESSION,"nColunas",Prob20.java(83:26-83:34),"nColunas"
590,DECLAREDREFERENCEEXPRESSION,"nColunas",Prob20.java(83:26-83:34),"nColunas"
591,PARAMVARIABLEDECLARATION,"int0",,""
592,PARAMVARIABLEDECLARATION,"int1",,""
593,PARAMVARIABLEDECLARATION,"charPtrPtr2",,""
594,CALLEXPRESSION,"verificaAeroporto",Prob20.java(85:3-85:48),"verificaAeroporto(nLinhas, nColunas, caract);"
595,CALLEXPRESSION,"verificaAeroporto",Prob20.java(85:3-85:48),"verificaAeroporto(nLinhas, nColunas, caract);"
596,DECLAREDREFERENCEEXPRESSION,"caract",Prob20.java(85:40-85:46),"caract"
597,DECLAREDREFERENCEEXPRESSION,"caract",Prob20.java(85:40-85:46),"caract"
598,DECLAREDREFERENCEEXPRESSION,"nLinhas",Prob20.java(85:21-85:28),"nLinhas"
599,DECLAREDREFERENCEEXPRESSION,"nLinhas",Prob20.java(85:21-85:28),"nLinhas"
600,DECLAREDREFERENCEEXPRESSION,"nColunas",Prob20.java(85:30-85:38),"nColunas"
601,DECLAREDREFERENCEEXPRESSION,"nColunas",Prob20.java(85:30-85:38),"nColunas"
602,PARAMVARIABLEDECLARATION,"ponto0",,""
603,CALLEXPRESSION,"verificaposicao",P20.java(33:6-33:30),"verificaposicao(proximo)"
604,CALLEXPRESSION,"verificaposicao",P20.java(33:6-33:30),"verificaposicao(proximo)"
605,CALLEXPRESSION,"verificaposicao",P20.java(34:6-34:30),"verificaposicao(proximo)"
606,DECLAREDREFERENCEEXPRESSION,"proximo",P20.java(34:22-34:29),"proximo"
607,DECLAREDREFERENCEEXPRESSION,"proximo",P20.java(33:22-33:29),"proximo"
608,DECLAREDREFERENCEEXPRESSION,"proximo",P20.java(33:22-33:29),"proximo"
609,PARAMVARIABLEDECLARATION,"par0",,""
610,CALLEXPRESSION,"not_wall",Prob20.java(62:25-62:39),"not_wall(next)"
611,DECLAREDREFERENCEEXPRESSION,"next",Prob20.java(62:34-62:38),"next"
612,PARAMVARIABLEDECLARATION,"int0",,""
613,CALLEXPRESSION,"not_wall",Prob20.java(65:25-65:39),"not_wall(next)"
614,DECLAREDREFERENCEEXPRESSION,"next",Prob20.java(65:34-65:38),"next"
615,PARAMVARIABLEDECLARATION,"e0",,""
616,CALLEXPRESSION,"bfs",P20.java(72:2-72:21),"bfs(q.peekFirst());"
617,CALLEXPRESSION,"bfs",P20.java(72:2-72:21),"bfs(q.peekFirst());"
618,CALLEXPRESSION,"bfs",P20.java(73:2-73:21),"bfs(q.peekFirst());"
619,CALLEXPRESSION,"bfs",Prob20.java(39:2-39:21),"bfs(q.peekFirst());"
620,CALLEXPRESSION,"bfs",Prob20.java(41:2-41:21),"bfs(q.peekFirst());"
621,MEMBERCALLEXPRESSION,"peekFirst",P20.java(72:6-72:19),"q.peekFirst()"
622,MEMBERCALLEXPRESSION,"peekFirst",Prob20.java(39:6-39:19),"q.peekFirst()"
623,MEMBERCALLEXPRESSION,"peekFirst",Prob20.java(41:6-41:19),"q.peekFirst()"
624,MEMBERCALLEXPRESSION,"peekFirst",P20.java(72:6-72:19),"q.peekFirst()"
625,MEMBERCALLEXPRESSION,"peekFirst",P20.java(73:6-73:19),"q.peekFirst()"
626,PARAMVARIABLEDECLARATION,"e0",,""
627,PARAMVARIABLEDECLARATION,"charPtrPtr1",,""
628,PARAMVARIABLEDECLARATION,"int2",,""
629,PARAMVARIABLEDECLARATION,"int3",,""
630,CALLEXPRESSION,"bfs",Prob20.java(28:16-28:42),"bfs(list.get(i),map, l ,c)"
631,CALLEXPRESSION,"bfs",Prob20.java(28:16-28:42),"bfs(list.get(i),map, l ,c)"
632,DECLAREDREFERENCEEXPRESSION,"map",Prob20.java(28:32-28:35),"map"
633,DECLAREDREFERENCEEXPRESSION,"map",Prob20.java(28:32-28:35),"map"
634,DECLAREDREFERENCEEXPRESSION,"l",Prob20.java(28:37-28:38),"l"
635,DECLAREDREFERENCEEXPRESSION,"l",Prob20.java(28:37-28:38),"l"
636,DECLAREDREFERENCEEXPRESSION,"c",Prob20.java(28:40-28:41),"c"
637,DECLAREDREFERENCEEXPRESSION,"c",Prob20.java(28:40-28:41),"c"
638,MEMBERCALLEXPRESSION,"get",Prob20.java(28:20-28:31),"list.get(i)"
639,MEMBERCALLEXPRESSION,"get",Prob20.java(28:20-28:31),"list.get(i)"
640,PARAMVARIABLEDECLARATION,"charPtrPtr0",,""
641,PARAMVARIABLEDECLARATION,"java.util.linkedlist1",,""
642,PARAMVARIABLEDECLARATION,"int2",,""
643,PARAMVARIABLEDECLARATION,"int3",,""
644,PARAMVARIABLEDECLARATION,"int4",,""
645,CALLEXPRESSION,"bfs",Prob20.java(36:2-36:29),"bfs(map,list, l ,c, count);"
646,CALLEXPRESSION,"bfs",Prob20.java(33:2-33:29),"bfs(map,list, l ,c, count);"
647,DECLAREDREFERENCEEXPRESSION,"list",Prob20.java(33:10-33:14),"list"
648,DECLAREDREFERENCEEXPRESSION,"list",Prob20.java(36:10-36:14),"list"
649,DECLAREDREFERENCEEXPRESSION,"l",Prob20.java(33:16-33:17),"l"
650,DECLAREDREFERENCEEXPRESSION,"l",Prob20.java(36:16-36:17),"l"
651,DECLAREDREFERENCEEXPRESSION,"c",Prob20.java(36:19-36:20),"c"
652,DECLAREDREFERENCEEXPRESSION,"c",Prob20.java(33:19-33:20),"c"
653,DECLAREDREFERENCEEXPRESSION,"count",Prob20.java(36:22-36:27),"count"
654,DECLAREDREFERENCEEXPRESSION,"count",Prob20.java(33:22-33:27),"count"
655,DECLAREDREFERENCEEXPRESSION,"map",Prob20.java(33:6-33:9),"map"
656,DECLAREDREFERENCEEXPRESSION,"map",Prob20.java(36:6-36:9),"map"
657,PARAMVARIABLEDECLARATION,"int0",,""
658,PARAMVARIABLEDECLARATION,"int1",,""
659,PARAMVARIABLEDECLARATION,"intPtrPtr2",,""
660,PARAMVARIABLEDECLARATION,"booleanPtrPtr3",,""
661,PARAMVARIABLEDECLARATION,"java.util.queue4",,""
662,PARAMVARIABLEDECLARATION,"java.util.linkedlist5",,""
663,CALLEXPRESSION,"dfs",Prob20.java(102:3-102:56),"dfs(nLinhas, nColunas, dist, vis, fila, listaNuvens);"
664,CALLEXPRESSION,"dfs",Prob20.java(100:3-100:56),"dfs(nLinhas, nColunas, dist, vis, fila, listaNuvens);"
665,DECLAREDREFERENCEEXPRESSION,"nLinhas",Prob20.java(100:7-100:14),"nLinhas"
666,DECLAREDREFERENCEEXPRESSION,"nLinhas",Prob20.java(102:7-102:14),"nLinhas"
667,MEMBEREXPRESSION,"listaNuvens",Prob20.java(100:43-100:54),"listaNuvens"
668,MEMBEREXPRESSION,"listaNuvens",Prob20.java(102:43-102:54),"listaNuvens"
669,DECLAREDREFERENCEEXPRESSION,"nColunas",Prob20.java(102:16-102:24),"nColunas"
670,DECLAREDREFERENCEEXPRESSION,"nColunas",Prob20.java(100:16-100:24),"nColunas"
671,MEMBEREXPRESSION,"fila",Prob20.java(100:37-100:41),"fila"
672,MEMBEREXPRESSION,"fila",Prob20.java(102:37-102:41),"fila"
673,DECLAREDREFERENCEEXPRESSION,"vis",Prob20.java(102:32-102:35),"vis"
674,DECLAREDREFERENCEEXPRESSION,"vis",Prob20.java(100:32-100:35),"vis"
675,DECLAREDREFERENCEEXPRESSION,"dist",Prob20.java(100:26-100:30),"dist"
676,DECLAREDREFERENCEEXPRESSION,"dist",Prob20.java(102:26-102:30),"dist"
677,FIELDDECLARATION,"this",,""
678,FIELDDECLARATION,"visited",Prob20.java(7:2-7:25),"visited"
679,FIELDDECLARATION,"distance",Prob20.java(9:2-9:22),"distance"
680,COMPOUNDSTATEMENT,"",Prob20.java(11:10-14:3),"{
		visited = false;
		distance = 10;
	}"
681,CONSTRUCTEXPRESSION,"",Prob20.java(91:19-91:30),"new Node3()"
682,CONSTRUCTEXPRESSION,"",Prob20.java(91:19-91:30),"new Node3()"
683,CONSTRUCTEXPRESSION,"",Nuvens.java(90:19-90:30),"new Node3()"
684,CONSTRUCTEXPRESSION,"",Prob20.java(91:19-91:30),"new Node3()"
685,CONSTRUCTEXPRESSION,"",Prob20.java(91:19-91:30),"new Node3()"
686,CONSTRUCTEXPRESSION,"",Prob20.java(91:19-91:30),"new Node3()"
687,CONSTRUCTEXPRESSION,"",Prob20.java(91:19-91:30),"new Node3()"
688,DECLAREDREFERENCEEXPRESSION,"this",Prob20.java(12:3-12:10),"this"
689,RETURNSTATEMENT,"",,""
690,BINARYOPERATOR,"=",Prob20.java(12:3-12:19),"visited = false;"
691,BINARYOPERATOR,"=",Prob20.java(13:3-13:17),"distance = 10;"
692,MEMBEREXPRESSION,"visited",Prob20.java(12:3-12:10),"visited"
693,LITERAL,"",Prob20.java(12:13-12:18),"false"
694,DECLAREDREFERENCEEXPRESSION,"this",Prob20.java(13:3-13:11),"this"
695,MEMBEREXPRESSION,"distance",Prob20.java(13:3-13:11),"distance"
696,LITERAL,"",Prob20.java(13:14-13:16),"10"

id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07563758_21_201403047/Prob21Improved.java",,""
2,RECORDDECLARATION,"Prob21Improved",Prob21Improved.java(5:1-64:2),"class Prob21Improved{
    
    static int n_pontos;
    static Node[] pontos;
    static double[][] dist;
    
    public static void main(String[] args){
	Scanner stdin = new Scanner(System.in);
	
	n_pontos = stdin.nextInt();
	pontos = new Node[n_pontos + 1];
	dist = new double[n_pontos + 1][n_pontos + 1];
	double distancia_minima = 0;
	
	for(int i = 1; i <= n_pontos; i++)
	    pontos[i] = new Node(stdin.nextDouble(),stdin.nextDouble(),i);
	
	
	for(int i = 1; i <= n_pontos; i++)
	    for(int j = 1; j <= n_pontos; j++)
		dist[i][j] = calc_dist(pontos[i],pontos[j]);
	
	MST_Prim(1);
	
	for(int i = 1; i <= n_pontos; i++){
	    distancia_minima += pontos[i].dist;
	}
	
	System.out.printf(""%.2f\n"",distancia_minima);
    }
    
    static double calc_dist(Node a, Node b){
	double x_dist = (a.x - b.x) * (a.x - b.x);
	double y_dist = (a.y - b.y) * (a.y - b.y);
	return Math.sqrt((x_dist + y_dist));
    }
    
    static void MST_Prim(int c){
	double dist_min = 1500;
	int o;
	int d;
	PriorityQueue<Par> q  = new PriorityQueue<Par>();
	
	pontos[c].dist = 0;
	
	for(int i = 1; i <= n_pontos; i++){
	    q.add(new Par(pontos[i].index,pontos[i].dist));
	}

	while(q.size() != 0){
	    Par current = q.poll();
	    pontos[current.index].visited = true;
	    for(d = 1; d <= n_pontos; d++)
		if(dist[current.index][d] < pontos[d].dist  && !pontos[d].visited){
		    pontos[d].dist = dist[current.index][d];
		    q.add(new Par(pontos[d].index,pontos[d].dist));
		}
	}
    }
}"
3,RECORDDECLARATION,"Par",Prob21Improved.java(68:1-89:2),"class Par implements Comparable<Par> {
    
    int index;
    double dist;

    Par(int index, double distancia){
	this.index = index;
	this.dist = distancia;
    }
    
    
    public int compareTo(Par a){
	double result = this.dist - a.dist;
	if(result < 0)
	    return -1;
	if(result > 0)
	    return 1;
	else
	    return 0;
	    
    }
}"
4,RECORDDECLARATION,"Node",Prob21Improved.java(91:1-123:2),"class Node{
    
    double x;
    double y;
    boolean visited;
    double dist;
    int index;
    
    
    Node(double x,double y, boolean v, double d, int i){
	this.x = x;
	this.y = y;
	this.visited = v;
	this.dist = d;
	this.index = i;
    }
    
    Node(double x,double y, int i){
	this.x =   x;
	this.y =   y;
	this.visited = false;
	this.dist = 1500;
	this.index = i;
    }

    Node(Node a){
	this.x =   a.x;
	this.y =   a.y;
	this.visited = a.visited;
	this.dist = a.dist;
	this.index = a.index;
    }
}"
5,INCLUDEDECLARATION,"java.lang",,""
6,INCLUDEDECLARATION,"java.io",,""
7,INCLUDEDECLARATION,"java.util",,""
8,FIELDDECLARATION,"this",,""
9,FIELDDECLARATION,"n_pontos",Prob21Improved.java(7:5-7:25),"n_pontos"
10,FIELDDECLARATION,"pontos",Prob21Improved.java(8:5-8:26),"pontos"
11,FIELDDECLARATION,"dist",Prob21Improved.java(9:5-9:28),"dist"
12,METHODDECLARATION,"main",Prob21Improved.java(11:5-34:6),"public static void main(String[] args){
	Scanner stdin = new Scanner(System.in);
	
	n_pontos = stdin.nextInt();
	pontos = new Node[n_pontos + 1];
	dist = new double[n_pontos + 1][n_pontos + 1];
	double distancia_minima = 0;
	
	for(int i = 1; i <= n_pontos; i++)
	    pontos[i] = new Node(stdin.nextDouble(),stdin.nextDouble(),i);
	
	
	for(int i = 1; i <= n_pontos; i++)
	    for(int j = 1; j <= n_pontos; j++)
		dist[i][j] = calc_dist(pontos[i],pontos[j]);
	
	MST_Prim(1);
	
	for(int i = 1; i <= n_pontos; i++){
	    distancia_minima += pontos[i].dist;
	}
	
	System.out.printf(""%.2f\n"",distancia_minima);
    }"
13,METHODDECLARATION,"calc_dist",Prob21Improved.java(36:5-40:6),"static double calc_dist(Node a, Node b){
	double x_dist = (a.x - b.x) * (a.x - b.x);
	double y_dist = (a.y - b.y) * (a.y - b.y);
	return Math.sqrt((x_dist + y_dist));
    }"
14,METHODDECLARATION,"MST_Prim",Prob21Improved.java(42:5-63:6),"static void MST_Prim(int c){
	double dist_min = 1500;
	int o;
	int d;
	PriorityQueue<Par> q  = new PriorityQueue<Par>();
	
	pontos[c].dist = 0;
	
	for(int i = 1; i <= n_pontos; i++){
	    q.add(new Par(pontos[i].index,pontos[i].dist));
	}

	while(q.size() != 0){
	    Par current = q.poll();
	    pontos[current.index].visited = true;
	    for(d = 1; d <= n_pontos; d++)
		if(dist[current.index][d] < pontos[d].dist  && !pontos[d].visited){
		    pontos[d].dist = dist[current.index][d];
		    q.add(new Par(pontos[d].index,pontos[d].dist));
		}
	}
    }"
15,CONSTRUCTORDECLARATION,"Prob21Improved",,""
16,VARIABLEDECLARATION,"this",,""
17,COMPOUNDSTATEMENT,"",Prob21Improved.java(42:32-63:6),"{
	double dist_min = 1500;
	int o;
	int d;
	PriorityQueue<Par> q  = new PriorityQueue<Par>();
	
	pontos[c].dist = 0;
	
	for(int i = 1; i <= n_pontos; i++){
	    q.add(new Par(pontos[i].index,pontos[i].dist));
	}

	while(q.size() != 0){
	    Par current = q.poll();
	    pontos[current.index].visited = true;
	    for(d = 1; d <= n_pontos; d++)
		if(dist[current.index][d] < pontos[d].dist  && !pontos[d].visited){
		    pontos[d].dist = dist[current.index][d];
		    q.add(new Par(pontos[d].index,pontos[d].dist));
		}
	}
    }"
18,PARAMVARIABLEDECLARATION,"c",Prob21Improved.java(42:26-42:31),"int c"
19,LITERAL,"",Prob21Improved.java(43:20-43:24),"1500"
20,RETURNSTATEMENT,"",,""
21,DECLARATIONSTATEMENT,"",Prob21Improved.java(43:2-43:25),"double dist_min = 1500;"
22,DECLARATIONSTATEMENT,"",Prob21Improved.java(44:2-44:8),"int o;"
23,DECLARATIONSTATEMENT,"",Prob21Improved.java(45:2-45:8),"int d;"
24,DECLARATIONSTATEMENT,"",Prob21Improved.java(46:2-46:51),"PriorityQueue<Par> q  = new PriorityQueue<Par>();"
25,BINARYOPERATOR,"=",Prob21Improved.java(48:2-48:21),"pontos[c].dist = 0;"
26,FORSTATEMENT,"",Prob21Improved.java(50:2-52:3),"for(int i = 1; i <= n_pontos; i++){
	    q.add(new Par(pontos[i].index,pontos[i].dist));
	}"
27,WHILESTATEMENT,"",Prob21Improved.java(54:2-62:3),"while(q.size() != 0){
	    Par current = q.poll();
	    pontos[current.index].visited = true;
	    for(d = 1; d <= n_pontos; d++)
		if(dist[current.index][d] < pontos[d].dist  && !pontos[d].visited){
		    pontos[d].dist = dist[current.index][d];
		    q.add(new Par(pontos[d].index,pontos[d].dist));
		}
	}"
28,VARIABLEDECLARATION,"dist_min",Prob21Improved.java(43:9-43:24),"dist_min = 1500"
29,VARIABLEDECLARATION,"o",Prob21Improved.java(44:6-44:7),"o"
30,VARIABLEDECLARATION,"d",Prob21Improved.java(45:6-45:7),"d"
31,VARIABLEDECLARATION,"q",Prob21Improved.java(46:21-46:50),"q  = new PriorityQueue<Par>()"
32,CONSTRUCTEXPRESSION,"",Prob21Improved.java(46:26-46:50),"new PriorityQueue<Par>()"
33,COMPOUNDSTATEMENT,"",Prob21Improved.java(50:36-52:3),"{
	    q.add(new Par(pontos[i].index,pontos[i].dist));
	}"
34,DECLARATIONSTATEMENT,"",Prob21Improved.java(50:6-50:15),"int i = 1"
35,BINARYOPERATOR,"<=",Prob21Improved.java(50:17-50:30),"i <= n_pontos"
36,UNARYOPERATOR,"++",Prob21Improved.java(50:32-50:35),"i++"
37,VARIABLEDECLARATION,"i",Prob21Improved.java(50:10-50:15),"i = 1"
38,DECLAREDREFERENCEEXPRESSION,"q",Prob21Improved.java(51:6-51:7),"q"
39,DECLAREDREFERENCEEXPRESSION,"q",Prob21Improved.java(54:8-54:9),"q"
40,MEMBERCALLEXPRESSION,"add",Prob21Improved.java(51:6-51:53),"q.add(new Par(pontos[i].index,pontos[i].dist));"
41,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(50:32-50:33),"i"
42,DECLAREDREFERENCEEXPRESSION,"add",Prob21Improved.java(51:8-51:11),"add"
43,NEWEXPRESSION,"",Prob21Improved.java(51:12-51:51),"new Par(pontos[i].index,pontos[i].dist)"
44,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(51:20-51:26),"Prob21Improved"
45,CONSTRUCTEXPRESSION,"",Prob21Improved.java(51:12-51:51),"new Par(pontos[i].index,pontos[i].dist)"
46,CONSTRUCTORDECLARATION,"Par",,""
47,MEMBEREXPRESSION,"dist",Prob21Improved.java(51:36-51:50),"pontos[i].dist"
48,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(51:36-51:45),"pontos[i]"
49,PARAMVARIABLEDECLARATION,"double1",,""
50,MEMBEREXPRESSION,"pontos",Prob21Improved.java(51:36-51:42),"pontos"
51,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(51:43-51:44),"i"
52,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(51:36-51:42),"Prob21Improved"
53,MEMBEREXPRESSION,"index",Prob21Improved.java(51:20-51:35),"pontos[i].index"
54,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(51:20-51:29),"pontos[i]"
55,PARAMVARIABLEDECLARATION,"int0",,""
56,MEMBEREXPRESSION,"pontos",Prob21Improved.java(51:20-51:26),"pontos"
57,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(51:27-51:28),"i"
58,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(50:17-50:18),"i"
59,MEMBEREXPRESSION,"n_pontos",Prob21Improved.java(50:22-50:30),"n_pontos"
60,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(50:22-50:30),"Prob21Improved"
61,LITERAL,"",Prob21Improved.java(50:14-50:15),"1"
62,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(48:2-48:8),"Prob21Improved"
63,UNINITIALIZEDVALUE,"Uninitialized Value",,""
64,BINARYOPERATOR,"!=",Prob21Improved.java(54:8-54:21),"q.size() != 0"
65,COMPOUNDSTATEMENT,"",Prob21Improved.java(54:22-62:3),"{
	    Par current = q.poll();
	    pontos[current.index].visited = true;
	    for(d = 1; d <= n_pontos; d++)
		if(dist[current.index][d] < pontos[d].dist  && !pontos[d].visited){
		    pontos[d].dist = dist[current.index][d];
		    q.add(new Par(pontos[d].index,pontos[d].dist));
		}
	}"
66,DECLAREDREFERENCEEXPRESSION,"q",Prob21Improved.java(55:20-55:21),"q"
67,DECLARATIONSTATEMENT,"",Prob21Improved.java(55:6-55:29),"Par current = q.poll();"
68,BINARYOPERATOR,"=",Prob21Improved.java(56:6-56:43),"pontos[current.index].visited = true;"
69,FORSTATEMENT,"",Prob21Improved.java(57:6-61:4),"for(d = 1; d <= n_pontos; d++)
		if(dist[current.index][d] < pontos[d].dist  && !pontos[d].visited){
		    pontos[d].dist = dist[current.index][d];
		    q.add(new Par(pontos[d].index,pontos[d].dist));
		}"
70,VARIABLEDECLARATION,"current",Prob21Improved.java(55:10-55:28),"current = q.poll()"
71,MEMBEREXPRESSION,"visited",Prob21Improved.java(56:6-56:35),"pontos[current.index].visited"
72,LITERAL,"",Prob21Improved.java(56:38-56:42),"true"
73,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(57:10-57:11),"d"
74,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(56:6-56:27),"pontos[current.index]"
75,MEMBEREXPRESSION,"pontos",Prob21Improved.java(56:6-56:12),"pontos"
76,MEMBEREXPRESSION,"index",Prob21Improved.java(56:13-56:26),"current.index"
77,DECLAREDREFERENCEEXPRESSION,"current",Prob21Improved.java(56:13-56:20),"current"
78,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(56:6-56:12),"Prob21Improved"
79,MEMBERCALLEXPRESSION,"poll",Prob21Improved.java(55:20-55:28),"q.poll()"
80,DECLAREDREFERENCEEXPRESSION,"poll",Prob21Improved.java(55:22-55:26),"poll"
81,IFSTATEMENT,"",Prob21Improved.java(58:3-61:4),"if(dist[current.index][d] < pontos[d].dist  && !pontos[d].visited){
		    pontos[d].dist = dist[current.index][d];
		    q.add(new Par(pontos[d].index,pontos[d].dist));
		}"
82,BINARYOPERATOR,"=",Prob21Improved.java(57:10-57:15),"d = 1"
83,BINARYOPERATOR,"<=",Prob21Improved.java(57:17-57:30),"d <= n_pontos"
84,UNARYOPERATOR,"++",Prob21Improved.java(57:32-57:35),"d++"
85,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(58:6-58:10),"Prob21Improved"
86,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(57:32-57:33),"d"
87,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(57:17-57:18),"d"
88,COMPOUNDSTATEMENT,"",Prob21Improved.java(58:69-61:4),"{
		    pontos[d].dist = dist[current.index][d];
		    q.add(new Par(pontos[d].index,pontos[d].dist));
		}"
89,BINARYOPERATOR,"&&",Prob21Improved.java(58:6-58:68),"dist[current.index][d] < pontos[d].dist  && !pontos[d].visited"
90,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(59:7-59:13),"Prob21Improved"
91,BINARYOPERATOR,"=",Prob21Improved.java(59:7-59:47),"pontos[d].dist = dist[current.index][d];"
92,MEMBERCALLEXPRESSION,"add",Prob21Improved.java(60:7-60:54),"q.add(new Par(pontos[d].index,pontos[d].dist));"
93,DECLAREDREFERENCEEXPRESSION,"add",Prob21Improved.java(60:9-60:12),"add"
94,NEWEXPRESSION,"",Prob21Improved.java(60:13-60:52),"new Par(pontos[d].index,pontos[d].dist)"
95,DECLAREDREFERENCEEXPRESSION,"q",Prob21Improved.java(60:7-60:8),"q"
96,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(60:21-60:27),"Prob21Improved"
97,CONSTRUCTEXPRESSION,"",Prob21Improved.java(60:13-60:52),"new Par(pontos[d].index,pontos[d].dist)"
98,MEMBEREXPRESSION,"dist",Prob21Improved.java(60:37-60:51),"pontos[d].dist"
99,MEMBEREXPRESSION,"index",Prob21Improved.java(60:21-60:36),"pontos[d].index"
100,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(60:21-60:30),"pontos[d]"
101,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(60:37-60:43),"Prob21Improved"
102,MEMBEREXPRESSION,"pontos",Prob21Improved.java(60:21-60:27),"pontos"
103,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(60:28-60:29),"d"
104,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(60:37-60:46),"pontos[d]"
105,MEMBEREXPRESSION,"pontos",Prob21Improved.java(60:37-60:43),"pontos"
106,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(60:44-60:45),"d"
107,MEMBEREXPRESSION,"dist",Prob21Improved.java(59:7-59:21),"pontos[d].dist"
108,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(59:24-59:46),"dist[current.index][d]"
109,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(59:24-59:43),"dist[current.index]"
110,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(59:44-59:45),"d"
111,MEMBEREXPRESSION,"dist",Prob21Improved.java(59:24-59:28),"dist"
112,MEMBEREXPRESSION,"index",Prob21Improved.java(59:29-59:42),"current.index"
113,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(59:24-59:28),"Prob21Improved"
114,DECLAREDREFERENCEEXPRESSION,"current",Prob21Improved.java(59:29-59:36),"current"
115,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(59:7-59:16),"pontos[d]"
116,MEMBEREXPRESSION,"pontos",Prob21Improved.java(59:7-59:13),"pontos"
117,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(59:14-59:15),"d"
118,BINARYOPERATOR,"<",Prob21Improved.java(58:6-58:45),"dist[current.index][d] < pontos[d].dist"
119,UNARYOPERATOR,"!",Prob21Improved.java(58:50-58:68),"!pontos[d].visited"
120,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(58:6-58:28),"dist[current.index][d]"
121,MEMBEREXPRESSION,"dist",Prob21Improved.java(58:31-58:45),"pontos[d].dist"
122,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(58:51-58:57),"Prob21Improved"
123,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(58:6-58:25),"dist[current.index]"
124,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(58:26-58:27),"d"
125,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(58:31-58:37),"Prob21Improved"
126,MEMBEREXPRESSION,"dist",Prob21Improved.java(58:6-58:10),"dist"
127,MEMBEREXPRESSION,"index",Prob21Improved.java(58:11-58:24),"current.index"
128,DECLAREDREFERENCEEXPRESSION,"current",Prob21Improved.java(58:11-58:18),"current"
129,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(58:31-58:40),"pontos[d]"
130,MEMBEREXPRESSION,"pontos",Prob21Improved.java(58:31-58:37),"pontos"
131,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(58:38-58:39),"d"
132,MEMBEREXPRESSION,"visited",Prob21Improved.java(58:51-58:68),"pontos[d].visited"
133,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(58:51-58:60),"pontos[d]"
134,MEMBEREXPRESSION,"pontos",Prob21Improved.java(58:51-58:57),"pontos"
135,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(58:58-58:59),"d"
136,LITERAL,"",Prob21Improved.java(57:14-57:15),"1"
137,MEMBEREXPRESSION,"n_pontos",Prob21Improved.java(57:22-57:30),"n_pontos"
138,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(57:22-57:30),"Prob21Improved"
139,MEMBERCALLEXPRESSION,"size",Prob21Improved.java(54:8-54:16),"q.size()"
140,LITERAL,"",Prob21Improved.java(54:20-54:21),"0"
141,DECLAREDREFERENCEEXPRESSION,"size",Prob21Improved.java(54:10-54:14),"size"
142,UNINITIALIZEDVALUE,"Uninitialized Value",,""
143,MEMBEREXPRESSION,"dist",Prob21Improved.java(48:2-48:16),"pontos[c].dist"
144,LITERAL,"",Prob21Improved.java(48:19-48:20),"0"
145,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(48:2-48:11),"pontos[c]"
146,MEMBEREXPRESSION,"pontos",Prob21Improved.java(48:2-48:8),"pontos"
147,DECLAREDREFERENCEEXPRESSION,"c",Prob21Improved.java(48:9-48:10),"c"
148,NEWEXPRESSION,"",Prob21Improved.java(46:26-46:50),"new PriorityQueue<Par>()"
149,VARIABLEDECLARATION,"this",,""
150,COMPOUNDSTATEMENT,"",Prob21Improved.java(36:44-40:6),"{
	double x_dist = (a.x - b.x) * (a.x - b.x);
	double y_dist = (a.y - b.y) * (a.y - b.y);
	return Math.sqrt((x_dist + y_dist));
    }"
151,PARAMVARIABLEDECLARATION,"a",Prob21Improved.java(36:29-36:35),"Node a"
152,PARAMVARIABLEDECLARATION,"b",Prob21Improved.java(36:37-36:43),"Node b"
153,DECLAREDREFERENCEEXPRESSION,"a",Prob21Improved.java(37:19-37:20),"a"
154,RETURNSTATEMENT,"",Prob21Improved.java(39:2-39:38),"return Math.sqrt((x_dist + y_dist));"
155,DECLARATIONSTATEMENT,"",Prob21Improved.java(37:2-37:44),"double x_dist = (a.x - b.x) * (a.x - b.x);"
156,DECLARATIONSTATEMENT,"",Prob21Improved.java(38:2-38:44),"double y_dist = (a.y - b.y) * (a.y - b.y);"
157,VARIABLEDECLARATION,"x_dist",Prob21Improved.java(37:9-37:43),"x_dist = (a.x - b.x) * (a.x - b.x)"
158,VARIABLEDECLARATION,"y_dist",Prob21Improved.java(38:9-38:43),"y_dist = (a.y - b.y) * (a.y - b.y)"
159,BINARYOPERATOR,"*",Prob21Improved.java(37:18-37:43),"(a.x - b.x) * (a.x - b.x)"
160,BINARYOPERATOR,"-",Prob21Improved.java(37:19-37:28),"a.x - b.x"
161,BINARYOPERATOR,"-",Prob21Improved.java(37:33-37:42),"a.x - b.x"
162,MEMBEREXPRESSION,"x",Prob21Improved.java(37:33-37:36),"a.x"
163,MEMBEREXPRESSION,"x",Prob21Improved.java(37:39-37:42),"b.x"
164,DECLAREDREFERENCEEXPRESSION,"b",Prob21Improved.java(37:39-37:40),"b"
165,DECLAREDREFERENCEEXPRESSION,"a",Prob21Improved.java(37:33-37:34),"a"
166,MEMBEREXPRESSION,"x",Prob21Improved.java(37:19-37:22),"a.x"
167,MEMBEREXPRESSION,"x",Prob21Improved.java(37:25-37:28),"b.x"
168,DECLAREDREFERENCEEXPRESSION,"b",Prob21Improved.java(37:25-37:26),"b"
169,BINARYOPERATOR,"*",Prob21Improved.java(38:18-38:43),"(a.y - b.y) * (a.y - b.y)"
170,BINARYOPERATOR,"-",Prob21Improved.java(38:19-38:28),"a.y - b.y"
171,BINARYOPERATOR,"-",Prob21Improved.java(38:33-38:42),"a.y - b.y"
172,MEMBEREXPRESSION,"y",Prob21Improved.java(38:33-38:36),"a.y"
173,MEMBEREXPRESSION,"y",Prob21Improved.java(38:39-38:42),"b.y"
174,DECLAREDREFERENCEEXPRESSION,"b",Prob21Improved.java(38:39-38:40),"b"
175,DECLAREDREFERENCEEXPRESSION,"a",Prob21Improved.java(38:33-38:34),"a"
176,MEMBEREXPRESSION,"y",Prob21Improved.java(38:19-38:22),"a.y"
177,MEMBEREXPRESSION,"y",Prob21Improved.java(38:25-38:28),"b.y"
178,DECLAREDREFERENCEEXPRESSION,"a",Prob21Improved.java(38:19-38:20),"a"
179,DECLAREDREFERENCEEXPRESSION,"b",Prob21Improved.java(38:25-38:26),"b"
180,STATICCALLEXPRESSION,"sqrt",Prob21Improved.java(39:9-39:37),"Math.sqrt((x_dist + y_dist))"
181,BINARYOPERATOR,"+",Prob21Improved.java(39:20-39:35),"x_dist + y_dist"
182,DECLAREDREFERENCEEXPRESSION,"x_dist",Prob21Improved.java(39:20-39:26),"x_dist"
183,DECLAREDREFERENCEEXPRESSION,"y_dist",Prob21Improved.java(39:29-39:35),"y_dist"
184,VARIABLEDECLARATION,"this",,""
185,COMPOUNDSTATEMENT,"",Prob21Improved.java(11:43-34:6),"{
	Scanner stdin = new Scanner(System.in);
	
	n_pontos = stdin.nextInt();
	pontos = new Node[n_pontos + 1];
	dist = new double[n_pontos + 1][n_pontos + 1];
	double distancia_minima = 0;
	
	for(int i = 1; i <= n_pontos; i++)
	    pontos[i] = new Node(stdin.nextDouble(),stdin.nextDouble(),i);
	
	
	for(int i = 1; i <= n_pontos; i++)
	    for(int j = 1; j <= n_pontos; j++)
		dist[i][j] = calc_dist(pontos[i],pontos[j]);
	
	MST_Prim(1);
	
	for(int i = 1; i <= n_pontos; i++){
	    distancia_minima += pontos[i].dist;
	}
	
	System.out.printf(""%.2f\n"",distancia_minima);
    }"
186,PARAMVARIABLEDECLARATION,"args",Prob21Improved.java(11:29-11:42),"String[] args"
187,DECLAREDREFERENCEEXPRESSION,"System",Prob21Improved.java(12:30-12:36),"System"
188,RETURNSTATEMENT,"",,""
189,DECLARATIONSTATEMENT,"",Prob21Improved.java(12:2-12:41),"Scanner stdin = new Scanner(System.in);"
190,BINARYOPERATOR,"=",Prob21Improved.java(14:2-14:29),"n_pontos = stdin.nextInt();"
191,BINARYOPERATOR,"=",Prob21Improved.java(15:2-15:34),"pontos = new Node[n_pontos + 1];"
192,BINARYOPERATOR,"=",Prob21Improved.java(16:2-16:48),"dist = new double[n_pontos + 1][n_pontos + 1];"
193,DECLARATIONSTATEMENT,"",Prob21Improved.java(17:2-17:30),"double distancia_minima = 0;"
194,FORSTATEMENT,"",Prob21Improved.java(19:2-20:68),"for(int i = 1; i <= n_pontos; i++)
	    pontos[i] = new Node(stdin.nextDouble(),stdin.nextDouble(),i);"
195,FORSTATEMENT,"",Prob21Improved.java(23:2-25:47),"for(int i = 1; i <= n_pontos; i++)
	    for(int j = 1; j <= n_pontos; j++)
		dist[i][j] = calc_dist(pontos[i],pontos[j]);"
196,CALLEXPRESSION,"MST_Prim",Prob21Improved.java(27:2-27:14),"MST_Prim(1);"
197,FORSTATEMENT,"",Prob21Improved.java(29:2-31:3),"for(int i = 1; i <= n_pontos; i++){
	    distancia_minima += pontos[i].dist;
	}"
198,MEMBERCALLEXPRESSION,"printf",Prob21Improved.java(33:2-33:47),"System.out.printf(""%.2f\n"",distancia_minima);"
199,VARIABLEDECLARATION,"stdin",Prob21Improved.java(12:10-12:40),"stdin = new Scanner(System.in)"
200,VARIABLEDECLARATION,"distancia_minima",Prob21Improved.java(17:9-17:29),"distancia_minima = 0"
201,MEMBEREXPRESSION,"n_pontos",Prob21Improved.java(14:2-14:10),"n_pontos"
202,MEMBERCALLEXPRESSION,"nextInt",Prob21Improved.java(14:13-14:28),"stdin.nextInt()"
203,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(15:2-15:8),"Prob21Improved"
204,DECLAREDREFERENCEEXPRESSION,"nextInt",Prob21Improved.java(14:19-14:26),"nextInt"
205,DECLAREDREFERENCEEXPRESSION,"stdin",Prob21Improved.java(14:13-14:18),"stdin"
206,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(14:2-14:10),"Prob21Improved"
207,MEMBEREXPRESSION,"pontos",Prob21Improved.java(15:2-15:8),"pontos"
208,ARRAYCREATIONEXPRESSION,"",Prob21Improved.java(15:11-15:33),"new Node[n_pontos + 1]"
209,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(16:2-16:6),"Prob21Improved"
210,BINARYOPERATOR,"+",Prob21Improved.java(15:20-15:32),"n_pontos + 1"
211,MEMBEREXPRESSION,"n_pontos",Prob21Improved.java(15:20-15:28),"n_pontos"
212,LITERAL,"",Prob21Improved.java(15:31-15:32),"1"
213,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(15:20-15:28),"Prob21Improved"
214,DECLAREDREFERENCEEXPRESSION,"printf",Prob21Improved.java(33:13-33:19),"printf"
215,DECLAREDREFERENCEEXPRESSION,"distancia_minima",Prob21Improved.java(33:29-33:45),"distancia_minima"
216,LITERAL,"",Prob21Improved.java(33:20-33:28),"""%.2f\n"""
217,MEMBEREXPRESSION,"out",Prob21Improved.java(33:2-33:12),"System.out"
218,DECLAREDREFERENCEEXPRESSION,"System",Prob21Improved.java(33:2-33:8),"System"
219,LITERAL,"",Prob21Improved.java(17:28-17:29),"0"
220,BINARYOPERATOR,"=",Prob21Improved.java(20:6-20:68),"pontos[i] = new Node(stdin.nextDouble(),stdin.nextDouble(),i);"
221,DECLARATIONSTATEMENT,"",Prob21Improved.java(19:6-19:15),"int i = 1"
222,BINARYOPERATOR,"<=",Prob21Improved.java(19:17-19:30),"i <= n_pontos"
223,UNARYOPERATOR,"++",Prob21Improved.java(19:32-19:35),"i++"
224,VARIABLEDECLARATION,"i",Prob21Improved.java(19:10-19:15),"i = 1"
225,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(20:6-20:12),"Prob21Improved"
226,LITERAL,"",Prob21Improved.java(23:14-23:15),"1"
227,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(19:32-19:33),"i"
228,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(19:17-19:18),"i"
229,LITERAL,"",Prob21Improved.java(19:14-19:15),"1"
230,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(20:6-20:15),"pontos[i]"
231,NEWEXPRESSION,"",Prob21Improved.java(20:18-20:67),"new Node(stdin.nextDouble(),stdin.nextDouble(),i)"
232,CONSTRUCTEXPRESSION,"",Prob21Improved.java(20:18-20:67),"new Node(stdin.nextDouble(),stdin.nextDouble(),i)"
233,CONSTRUCTORDECLARATION,"Node",,""
234,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(20:65-20:66),"i"
235,MEMBERCALLEXPRESSION,"nextDouble",Prob21Improved.java(20:46-20:64),"stdin.nextDouble()"
236,DECLAREDREFERENCEEXPRESSION,"nextDouble",Prob21Improved.java(20:52-20:62),"nextDouble"
237,PARAMVARIABLEDECLARATION,"double1",,""
238,DECLAREDREFERENCEEXPRESSION,"stdin",Prob21Improved.java(20:46-20:51),"stdin"
239,MEMBERCALLEXPRESSION,"nextDouble",Prob21Improved.java(20:27-20:45),"stdin.nextDouble()"
240,PARAMVARIABLEDECLARATION,"int2",,""
241,DECLAREDREFERENCEEXPRESSION,"nextDouble",Prob21Improved.java(20:33-20:43),"nextDouble"
242,PARAMVARIABLEDECLARATION,"double0",,""
243,DECLAREDREFERENCEEXPRESSION,"stdin",Prob21Improved.java(20:27-20:32),"stdin"
244,MEMBEREXPRESSION,"pontos",Prob21Improved.java(20:6-20:12),"pontos"
245,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(20:13-20:14),"i"
246,MEMBEREXPRESSION,"n_pontos",Prob21Improved.java(19:22-19:30),"n_pontos"
247,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(19:22-19:30),"Prob21Improved"
248,FORSTATEMENT,"",Prob21Improved.java(24:6-25:47),"for(int j = 1; j <= n_pontos; j++)
		dist[i][j] = calc_dist(pontos[i],pontos[j]);"
249,DECLARATIONSTATEMENT,"",Prob21Improved.java(23:6-23:15),"int i = 1"
250,BINARYOPERATOR,"<=",Prob21Improved.java(23:17-23:30),"i <= n_pontos"
251,UNARYOPERATOR,"++",Prob21Improved.java(23:32-23:35),"i++"
252,VARIABLEDECLARATION,"i",Prob21Improved.java(23:10-23:15),"i = 1"
253,LITERAL,"",Prob21Improved.java(24:18-24:19),"1"
254,LITERAL,"",Prob21Improved.java(27:11-27:12),"1"
255,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(23:17-23:18),"i"
256,MEMBEREXPRESSION,"n_pontos",Prob21Improved.java(23:22-23:30),"n_pontos"
257,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(23:22-23:30),"Prob21Improved"
258,BINARYOPERATOR,"=",Prob21Improved.java(25:3-25:47),"dist[i][j] = calc_dist(pontos[i],pontos[j]);"
259,DECLARATIONSTATEMENT,"",Prob21Improved.java(24:10-24:19),"int j = 1"
260,BINARYOPERATOR,"<=",Prob21Improved.java(24:21-24:34),"j <= n_pontos"
261,UNARYOPERATOR,"++",Prob21Improved.java(24:36-24:39),"j++"
262,VARIABLEDECLARATION,"j",Prob21Improved.java(24:14-24:19),"j = 1"
263,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(25:3-25:7),"Prob21Improved"
264,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(23:32-23:33),"i"
265,DECLAREDREFERENCEEXPRESSION,"j",Prob21Improved.java(24:21-24:22),"j"
266,MEMBEREXPRESSION,"n_pontos",Prob21Improved.java(24:26-24:34),"n_pontos"
267,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(24:26-24:34),"Prob21Improved"
268,DECLAREDREFERENCEEXPRESSION,"j",Prob21Improved.java(24:36-24:37),"j"
269,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(25:3-25:13),"dist[i][j]"
270,CALLEXPRESSION,"calc_dist",Prob21Improved.java(25:16-25:46),"calc_dist(pontos[i],pontos[j])"
271,METHODDECLARATION,"calc_dist",Prob21Improved.java(37:5-41:6),"static double calc_dist(Node a, Node b){
	double x_dist = (a.x - b.x) * (a.x - b.x);
	double y_dist = (a.y - b.y) * (a.y - b.y);
	return Math.sqrt((x_dist + y_dist));
    }"
272,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(25:26-25:35),"pontos[i]"
273,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(25:36-25:45),"pontos[j]"
274,MEMBEREXPRESSION,"pontos",Prob21Improved.java(25:36-25:42),"pontos"
275,DECLAREDREFERENCEEXPRESSION,"j",Prob21Improved.java(25:43-25:44),"j"
276,PARAMVARIABLEDECLARATION,"b",Prob21Improved.java(37:37-37:43),"Node b"
277,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(25:36-25:42),"Prob21Improved"
278,MEMBEREXPRESSION,"pontos",Prob21Improved.java(25:26-25:32),"pontos"
279,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(25:33-25:34),"i"
280,PARAMVARIABLEDECLARATION,"a",Prob21Improved.java(37:29-37:35),"Node a"
281,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(25:26-25:32),"Prob21Improved"
282,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(25:3-25:10),"dist[i]"
283,DECLAREDREFERENCEEXPRESSION,"j",Prob21Improved.java(25:11-25:12),"j"
284,MEMBEREXPRESSION,"dist",Prob21Improved.java(25:3-25:7),"dist"
285,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(25:8-25:9),"i"
286,MEMBEREXPRESSION,"dist",Prob21Improved.java(16:2-16:6),"dist"
287,ARRAYCREATIONEXPRESSION,"",Prob21Improved.java(16:9-16:47),"new double[n_pontos + 1][n_pontos + 1]"
288,BINARYOPERATOR,"+",Prob21Improved.java(16:20-16:32),"n_pontos + 1"
289,BINARYOPERATOR,"+",Prob21Improved.java(16:34-16:46),"n_pontos + 1"
290,MEMBEREXPRESSION,"n_pontos",Prob21Improved.java(16:20-16:28),"n_pontos"
291,LITERAL,"",Prob21Improved.java(16:31-16:32),"1"
292,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(16:34-16:42),"Prob21Improved"
293,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(16:20-16:28),"Prob21Improved"
294,MEMBEREXPRESSION,"n_pontos",Prob21Improved.java(16:34-16:42),"n_pontos"
295,LITERAL,"",Prob21Improved.java(16:45-16:46),"1"
296,COMPOUNDSTATEMENT,"",Prob21Improved.java(29:36-31:3),"{
	    distancia_minima += pontos[i].dist;
	}"
297,DECLARATIONSTATEMENT,"",Prob21Improved.java(29:6-29:15),"int i = 1"
298,BINARYOPERATOR,"<=",Prob21Improved.java(29:17-29:30),"i <= n_pontos"
299,UNARYOPERATOR,"++",Prob21Improved.java(29:32-29:35),"i++"
300,VARIABLEDECLARATION,"i",Prob21Improved.java(29:10-29:15),"i = 1"
301,DECLAREDREFERENCEEXPRESSION,"distancia_minima",Prob21Improved.java(30:6-30:22),"distancia_minima"
302,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(29:17-29:18),"i"
303,MEMBEREXPRESSION,"n_pontos",Prob21Improved.java(29:22-29:30),"n_pontos"
304,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(29:22-29:30),"Prob21Improved"
305,LITERAL,"",Prob21Improved.java(29:14-29:15),"1"
306,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(29:32-29:33),"i"
307,BINARYOPERATOR,"+=",Prob21Improved.java(30:6-30:41),"distancia_minima += pontos[i].dist;"
308,MEMBEREXPRESSION,"dist",Prob21Improved.java(30:26-30:40),"pontos[i].dist"
309,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21Improved.java(30:26-30:35),"pontos[i]"
310,MEMBEREXPRESSION,"pontos",Prob21Improved.java(30:26-30:32),"pontos"
311,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(30:33-30:34),"i"
312,DECLAREDREFERENCEEXPRESSION,"Prob21Improved",Prob21Improved.java(30:26-30:32),"Prob21Improved"
313,NEWEXPRESSION,"",Prob21Improved.java(12:18-12:40),"new Scanner(System.in)"
314,CONSTRUCTEXPRESSION,"",Prob21Improved.java(12:18-12:40),"new Scanner(System.in)"
315,MEMBEREXPRESSION,"in",Prob21Improved.java(12:30-12:39),"System.in"
316,METHODDECLARATION,"MST_Prim",Prob21Improved.java(43:5-64:6),"static void MST_Prim(int c){
	double dist_min = 1500;
	int o;
	int d;
	PriorityQueue<Par> q  = new PriorityQueue<Par>();
	
	pontos[c].dist = 0;
	
	for(int i = 1; i < n_pontos; i++){
	    q.add(new Par(pontos[i].index,pontos[i].dist));
	}
	
	while(q.size() != 0){
	    Par current = q.poll();
	    pontos[current.index].visited = true;
	    for(d = 1; d <= n_pontos; d++)
		if(dist[current.index][d] < pontos[d].dist  && !pontos[d].visited){
		    pontos[d].dist = dist[current.index][d];
		    q.add(new Par(pontos[d].index,pontos[d].dist));
		}
	}
    }"
317,PARAMVARIABLEDECLARATION,"c",Prob21Improved.java(43:26-43:31),"int c"
318,FIELDDECLARATION,"this",,""
319,FIELDDECLARATION,"x",Prob21Improved.java(93:5-93:14),"x"
320,FIELDDECLARATION,"y",Prob21Improved.java(94:5-94:14),"y"
321,FIELDDECLARATION,"visited",Prob21Improved.java(95:5-95:21),"visited"
322,FIELDDECLARATION,"dist",Prob21Improved.java(96:5-96:17),"dist"
323,FIELDDECLARATION,"index",Prob21Improved.java(97:5-97:15),"index"
324,CONSTRUCTORDECLARATION,"Node",Prob21Improved.java(100:5-106:6),"Node(double x,double y, boolean v, double d, int i){
	this.x = x;
	this.y = y;
	this.visited = v;
	this.dist = d;
	this.index = i;
    }"
325,CONSTRUCTORDECLARATION,"Node",Prob21Improved.java(108:5-114:6),"Node(double x,double y, int i){
	this.x =   x;
	this.y =   y;
	this.visited = false;
	this.dist = 1500;
	this.index = i;
    }"
326,CONSTRUCTORDECLARATION,"Node",Prob21Improved.java(116:5-122:6),"Node(Node a){
	this.x =   a.x;
	this.y =   a.y;
	this.visited = a.visited;
	this.dist = a.dist;
	this.index = a.index;
    }"
327,COMPOUNDSTATEMENT,"",Prob21Improved.java(100:56-106:6),"{
	this.x = x;
	this.y = y;
	this.visited = v;
	this.dist = d;
	this.index = i;
    }"
328,PARAMVARIABLEDECLARATION,"x",Prob21Improved.java(100:10-100:18),"double x"
329,PARAMVARIABLEDECLARATION,"y",Prob21Improved.java(100:19-100:27),"double y"
330,PARAMVARIABLEDECLARATION,"v",Prob21Improved.java(100:29-100:38),"boolean v"
331,PARAMVARIABLEDECLARATION,"d",Prob21Improved.java(100:40-100:48),"double d"
332,PARAMVARIABLEDECLARATION,"i",Prob21Improved.java(100:50-100:55),"int i"
333,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(101:2-101:6),"this"
334,RETURNSTATEMENT,"",,""
335,BINARYOPERATOR,"=",Prob21Improved.java(101:2-101:13),"this.x = x;"
336,BINARYOPERATOR,"=",Prob21Improved.java(102:2-102:13),"this.y = y;"
337,BINARYOPERATOR,"=",Prob21Improved.java(103:2-103:19),"this.visited = v;"
338,BINARYOPERATOR,"=",Prob21Improved.java(104:2-104:16),"this.dist = d;"
339,BINARYOPERATOR,"=",Prob21Improved.java(105:2-105:17),"this.index = i;"
340,MEMBEREXPRESSION,"index",Prob21Improved.java(105:2-105:12),"this.index"
341,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(105:15-105:16),"i"
342,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(105:2-105:6),"this"
343,MEMBEREXPRESSION,"x",Prob21Improved.java(101:2-101:8),"this.x"
344,DECLAREDREFERENCEEXPRESSION,"x",Prob21Improved.java(101:11-101:12),"x"
345,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(102:2-102:6),"this"
346,MEMBEREXPRESSION,"dist",Prob21Improved.java(104:2-104:11),"this.dist"
347,DECLAREDREFERENCEEXPRESSION,"d",Prob21Improved.java(104:14-104:15),"d"
348,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(104:2-104:6),"this"
349,MEMBEREXPRESSION,"y",Prob21Improved.java(102:2-102:8),"this.y"
350,DECLAREDREFERENCEEXPRESSION,"y",Prob21Improved.java(102:11-102:12),"y"
351,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(103:2-103:6),"this"
352,MEMBEREXPRESSION,"visited",Prob21Improved.java(103:2-103:14),"this.visited"
353,DECLAREDREFERENCEEXPRESSION,"v",Prob21Improved.java(103:17-103:18),"v"
354,COMPOUNDSTATEMENT,"",Prob21Improved.java(108:35-114:6),"{
	this.x =   x;
	this.y =   y;
	this.visited = false;
	this.dist = 1500;
	this.index = i;
    }"
355,PARAMVARIABLEDECLARATION,"x",Prob21Improved.java(108:10-108:18),"double x"
356,PARAMVARIABLEDECLARATION,"y",Prob21Improved.java(108:19-108:27),"double y"
357,PARAMVARIABLEDECLARATION,"i",Prob21Improved.java(108:29-108:34),"int i"
358,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(109:2-109:6),"this"
359,RETURNSTATEMENT,"",,""
360,BINARYOPERATOR,"=",Prob21Improved.java(109:2-109:15),"this.x =   x;"
361,BINARYOPERATOR,"=",Prob21Improved.java(110:2-110:15),"this.y =   y;"
362,BINARYOPERATOR,"=",Prob21Improved.java(111:2-111:23),"this.visited = false;"
363,BINARYOPERATOR,"=",Prob21Improved.java(112:2-112:19),"this.dist = 1500;"
364,BINARYOPERATOR,"=",Prob21Improved.java(113:2-113:17),"this.index = i;"
365,MEMBEREXPRESSION,"index",Prob21Improved.java(113:2-113:12),"this.index"
366,DECLAREDREFERENCEEXPRESSION,"i",Prob21Improved.java(113:15-113:16),"i"
367,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(113:2-113:6),"this"
368,MEMBEREXPRESSION,"x",Prob21Improved.java(109:2-109:8),"this.x"
369,DECLAREDREFERENCEEXPRESSION,"x",Prob21Improved.java(109:13-109:14),"x"
370,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(110:2-110:6),"this"
371,MEMBEREXPRESSION,"y",Prob21Improved.java(110:2-110:8),"this.y"
372,DECLAREDREFERENCEEXPRESSION,"y",Prob21Improved.java(110:13-110:14),"y"
373,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(111:2-111:6),"this"
374,MEMBEREXPRESSION,"visited",Prob21Improved.java(111:2-111:14),"this.visited"
375,LITERAL,"",Prob21Improved.java(111:17-111:22),"false"
376,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(112:2-112:6),"this"
377,MEMBEREXPRESSION,"dist",Prob21Improved.java(112:2-112:11),"this.dist"
378,LITERAL,"",Prob21Improved.java(112:14-112:18),"1500"
379,COMPOUNDSTATEMENT,"",Prob21Improved.java(116:17-122:6),"{
	this.x =   a.x;
	this.y =   a.y;
	this.visited = a.visited;
	this.dist = a.dist;
	this.index = a.index;
    }"
380,PARAMVARIABLEDECLARATION,"a",Prob21Improved.java(116:10-116:16),"Node a"
381,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(117:2-117:6),"this"
382,RETURNSTATEMENT,"",,""
383,BINARYOPERATOR,"=",Prob21Improved.java(117:2-117:17),"this.x =   a.x;"
384,BINARYOPERATOR,"=",Prob21Improved.java(118:2-118:17),"this.y =   a.y;"
385,BINARYOPERATOR,"=",Prob21Improved.java(119:2-119:27),"this.visited = a.visited;"
386,BINARYOPERATOR,"=",Prob21Improved.java(120:2-120:21),"this.dist = a.dist;"
387,BINARYOPERATOR,"=",Prob21Improved.java(121:2-121:23),"this.index = a.index;"
388,MEMBEREXPRESSION,"dist",Prob21Improved.java(120:2-120:11),"this.dist"
389,MEMBEREXPRESSION,"dist",Prob21Improved.java(120:14-120:20),"a.dist"
390,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(121:2-121:6),"this"
391,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(120:2-120:6),"this"
392,DECLAREDREFERENCEEXPRESSION,"a",Prob21Improved.java(120:14-120:15),"a"
393,MEMBEREXPRESSION,"index",Prob21Improved.java(121:2-121:12),"this.index"
394,MEMBEREXPRESSION,"index",Prob21Improved.java(121:15-121:22),"a.index"
395,DECLAREDREFERENCEEXPRESSION,"a",Prob21Improved.java(121:15-121:16),"a"
396,MEMBEREXPRESSION,"visited",Prob21Improved.java(119:2-119:14),"this.visited"
397,MEMBEREXPRESSION,"visited",Prob21Improved.java(119:17-119:26),"a.visited"
398,DECLAREDREFERENCEEXPRESSION,"a",Prob21Improved.java(119:17-119:18),"a"
399,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(119:2-119:6),"this"
400,MEMBEREXPRESSION,"x",Prob21Improved.java(117:2-117:8),"this.x"
401,MEMBEREXPRESSION,"x",Prob21Improved.java(117:13-117:16),"a.x"
402,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(118:2-118:6),"this"
403,DECLAREDREFERENCEEXPRESSION,"a",Prob21Improved.java(117:13-117:14),"a"
404,MEMBEREXPRESSION,"y",Prob21Improved.java(118:2-118:8),"this.y"
405,MEMBEREXPRESSION,"y",Prob21Improved.java(118:13-118:16),"a.y"
406,DECLAREDREFERENCEEXPRESSION,"a",Prob21Improved.java(118:13-118:14),"a"
407,FIELDDECLARATION,"this",,""
408,FIELDDECLARATION,"index",Prob21Improved.java(70:5-70:15),"index"
409,FIELDDECLARATION,"dist",Prob21Improved.java(71:5-71:17),"dist"
410,METHODDECLARATION,"compareTo",Prob21Improved.java(79:5-88:6),"public int compareTo(Par a){
	double result = this.dist - a.dist;
	if(result < 0)
	    return -1;
	if(result > 0)
	    return 1;
	else
	    return 0;
	    
    }"
411,CONSTRUCTORDECLARATION,"Par",Prob21Improved.java(73:5-76:6),"Par(int index, double distancia){
	this.index = index;
	this.dist = distancia;
    }"
412,COMPOUNDSTATEMENT,"",Prob21Improved.java(73:37-76:6),"{
	this.index = index;
	this.dist = distancia;
    }"
413,PARAMVARIABLEDECLARATION,"index",Prob21Improved.java(73:9-73:18),"int index"
414,PARAMVARIABLEDECLARATION,"distancia",Prob21Improved.java(73:20-73:36),"double distancia"
415,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(74:2-74:6),"this"
416,RETURNSTATEMENT,"",,""
417,BINARYOPERATOR,"=",Prob21Improved.java(74:2-74:21),"this.index = index;"
418,BINARYOPERATOR,"=",Prob21Improved.java(75:2-75:24),"this.dist = distancia;"
419,MEMBEREXPRESSION,"index",Prob21Improved.java(74:2-74:12),"this.index"
420,DECLAREDREFERENCEEXPRESSION,"index",Prob21Improved.java(74:15-74:20),"index"
421,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(75:2-75:6),"this"
422,MEMBEREXPRESSION,"dist",Prob21Improved.java(75:2-75:11),"this.dist"
423,DECLAREDREFERENCEEXPRESSION,"distancia",Prob21Improved.java(75:14-75:23),"distancia"
424,VARIABLEDECLARATION,"this",,""
425,COMPOUNDSTATEMENT,"",Prob21Improved.java(79:32-88:6),"{
	double result = this.dist - a.dist;
	if(result < 0)
	    return -1;
	if(result > 0)
	    return 1;
	else
	    return 0;
	    
    }"
426,PARAMVARIABLEDECLARATION,"a",Prob21Improved.java(79:26-79:31),"Par a"
427,DECLAREDREFERENCEEXPRESSION,"this",Prob21Improved.java(80:18-80:22),"this"
428,RETURNSTATEMENT,"",,""
429,DECLARATIONSTATEMENT,"",Prob21Improved.java(80:2-80:37),"double result = this.dist - a.dist;"
430,IFSTATEMENT,"",Prob21Improved.java(81:2-82:16),"if(result < 0)
	    return -1;"
431,IFSTATEMENT,"",Prob21Improved.java(83:2-86:15),"if(result > 0)
	    return 1;
	else
	    return 0;"
432,VARIABLEDECLARATION,"result",Prob21Improved.java(80:9-80:36),"result = this.dist - a.dist"
433,BINARYOPERATOR,">",Prob21Improved.java(83:5-83:15),"result > 0"
434,RETURNSTATEMENT,"",Prob21Improved.java(84:6-84:15),"return 1;"
435,RETURNSTATEMENT,"",Prob21Improved.java(86:6-86:15),"return 0;"
436,LITERAL,"",Prob21Improved.java(84:13-84:14),"1"
437,LITERAL,"",Prob21Improved.java(86:13-86:14),"0"
438,DECLAREDREFERENCEEXPRESSION,"result",Prob21Improved.java(83:5-83:11),"result"
439,LITERAL,"",Prob21Improved.java(83:14-83:15),"0"
440,DECLAREDREFERENCEEXPRESSION,"result",Prob21Improved.java(81:5-81:11),"result"
441,BINARYOPERATOR,"-",Prob21Improved.java(80:18-80:36),"this.dist - a.dist"
442,MEMBEREXPRESSION,"dist",Prob21Improved.java(80:18-80:27),"this.dist"
443,MEMBEREXPRESSION,"dist",Prob21Improved.java(80:30-80:36),"a.dist"
444,DECLAREDREFERENCEEXPRESSION,"a",Prob21Improved.java(80:30-80:31),"a"
445,BINARYOPERATOR,"<",Prob21Improved.java(81:5-81:15),"result < 0"
446,RETURNSTATEMENT,"",Prob21Improved.java(82:6-82:16),"return -1;"
447,LITERAL,"",Prob21Improved.java(82:14-82:15),"1"
448,LITERAL,"",Prob21Improved.java(81:14-81:15),"0"
449,UNARYOPERATOR,"-",Prob21Improved.java(82:13-82:15),"-1"

id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/05076429_21_200800296/Prob21.java",,""
2,RECORDDECLARATION,"Edge",Prob21.java(6:1-18:2),"class Edge implements Comparable<Edge> {
    Edge(No a, No b){
	this.a = a;
	this.b = b;

    }
    No a, b;

    @Override
    public int compareTo(Edge other) {
	return (int) (((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y)) - ((other.a.x-other.b.x)*(other.a.x-other.b.x) + (other.a.y-other.b.y)*(other.a.y-other.b.y)));
    }
}"
3,RECORDDECLARATION,"No",Prob21.java(20:1-28:2),"class No {
    No(double x, double y, int idx) {
	this.x = x;
	this.y = y;
	this.idx = idx;
    }
    double x, y;
    int idx;
}"
4,RECORDDECLARATION,"UnionFind",Prob21.java(30:1-51:2),"class UnionFind{
    int n;
    int a[];

    UnionFind(int n){
	this.n=n;
	a = new int[n];
	for (int i = 0; i< n; i++)
	    a[i]=i;
    }

    int FindSet(int i){
	if ( a[i]==i)
	    return i;
	return a[i] = FindSet(a[i]);
    }

    void UnionSet(int l, int r) {
	a[FindSet(l)] = FindSet(r);
    }

}"
5,RECORDDECLARATION,"Prob21",Prob21.java(54:1-87:2),"public class Prob21{
    static int n;


    public static void main(String args[]){

	Scanner in = new Scanner(System.in);
	n = in.nextInt();

	ArrayList<No> nos = new ArrayList<No>();
	ArrayList<Edge> arestas = new ArrayList<Edge>();
	double comp = 0.0;
	
	for (int i=0; i < n; i++)
	    nos.add(new No(in.nextDouble(), in.nextDouble(), i));	    
       
	UnionFind sets = new UnionFind(n);

	for (int i=0; i < n; i++)
 	    for (int j=i+1; j< n; j++)
		arestas.add(new Edge(nos.get(i), nos.get(j)));

	Collections.sort(arestas);
	
	for (Edge e : arestas)
	    if (sets.FindSet(e.a.idx) != sets.FindSet(e.b.idx)){
		sets.UnionSet(e.a.idx, e.b.idx);
		comp += Math.sqrt((e.a.x-e.b.x)*(e.a.x-e.b.x) + (e.a.y-e.b.y)*(e.a.y-e.b.y));
		
	    }
	System.out.printf(""%.2f\n"", comp);
    }

}"
6,INCLUDEDECLARATION,"java.util",,""
7,FIELDDECLARATION,"this",,""
8,FIELDDECLARATION,"n",Prob21.java(31:5-31:11),"n"
9,FIELDDECLARATION,"a",Prob21.java(32:5-32:13),"a"
10,METHODDECLARATION,"FindSet",Prob21.java(41:5-45:6),"int FindSet(int i){
	if ( a[i]==i)
	    return i;
	return a[i] = FindSet(a[i]);
    }"
11,METHODDECLARATION,"UnionSet",Prob21.java(47:5-49:6),"void UnionSet(int l, int r) {
	a[FindSet(l)] = FindSet(r);
    }"
12,CONSTRUCTORDECLARATION,"UnionFind",Prob21.java(34:5-39:6),"UnionFind(int n){
	this.n=n;
	a = new int[n];
	for (int i = 0; i< n; i++)
	    a[i]=i;
    }"
13,VARIABLEDECLARATION,"this",,""
14,COMPOUNDSTATEMENT,"",Prob21.java(47:33-49:6),"{
	a[FindSet(l)] = FindSet(r);
    }"
15,PARAMVARIABLEDECLARATION,"l",Prob21.java(47:19-47:24),"int l"
16,PARAMVARIABLEDECLARATION,"r",Prob21.java(47:26-47:31),"int r"
17,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(48:2-48:3),"this"
18,RETURNSTATEMENT,"",,""
19,BINARYOPERATOR,"=",Prob21.java(48:2-48:29),"a[FindSet(l)] = FindSet(r);"
20,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(48:2-48:15),"a[FindSet(l)]"
21,CALLEXPRESSION,"FindSet",Prob21.java(48:18-48:28),"FindSet(r)"
22,MEMBEREXPRESSION,"a",Prob21.java(48:2-48:3),"a"
23,CALLEXPRESSION,"FindSet",Prob21.java(48:4-48:14),"FindSet(l)"
24,DECLAREDREFERENCEEXPRESSION,"r",Prob21.java(48:26-48:27),"r"
25,DECLAREDREFERENCEEXPRESSION,"l",Prob21.java(48:12-48:13),"l"
26,METHODDECLARATION,"FindSet",,""
27,PARAMVARIABLEDECLARATION,"int0",,""
28,VARIABLEDECLARATION,"this",,""
29,COMPOUNDSTATEMENT,"",Prob21.java(41:23-45:6),"{
	if ( a[i]==i)
	    return i;
	return a[i] = FindSet(a[i]);
    }"
30,PARAMVARIABLEDECLARATION,"i",Prob21.java(41:17-41:22),"int i"
31,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(42:7-42:8),"this"
32,RETURNSTATEMENT,"",Prob21.java(44:2-44:30),"return a[i] = FindSet(a[i]);"
33,IFSTATEMENT,"",Prob21.java(42:2-43:15),"if ( a[i]==i)
	    return i;"
34,BINARYOPERATOR,"==",Prob21.java(42:7-42:14),"a[i]==i"
35,RETURNSTATEMENT,"",Prob21.java(43:6-43:15),"return i;"
36,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(43:13-43:14),"i"
37,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(44:9-44:10),"this"
38,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(42:7-42:11),"a[i]"
39,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(42:13-42:14),"i"
40,MEMBEREXPRESSION,"a",Prob21.java(42:7-42:8),"a"
41,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(42:9-42:10),"i"
42,BINARYOPERATOR,"=",Prob21.java(44:9-44:29),"a[i] = FindSet(a[i])"
43,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(44:9-44:13),"a[i]"
44,CALLEXPRESSION,"FindSet",Prob21.java(44:16-44:29),"FindSet(a[i])"
45,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(44:24-44:28),"a[i]"
46,MEMBEREXPRESSION,"a",Prob21.java(44:24-44:25),"a"
47,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(44:26-44:27),"i"
48,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(44:24-44:25),"this"
49,MEMBEREXPRESSION,"a",Prob21.java(44:9-44:10),"a"
50,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(44:11-44:12),"i"
51,COMPOUNDSTATEMENT,"",Prob21.java(34:21-39:6),"{
	this.n=n;
	a = new int[n];
	for (int i = 0; i< n; i++)
	    a[i]=i;
    }"
52,PARAMVARIABLEDECLARATION,"n",Prob21.java(34:15-34:20),"int n"
53,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(35:2-35:6),"this"
54,RETURNSTATEMENT,"",,""
55,BINARYOPERATOR,"=",Prob21.java(35:2-35:11),"this.n=n;"
56,BINARYOPERATOR,"=",Prob21.java(36:2-36:17),"a = new int[n];"
57,FORSTATEMENT,"",Prob21.java(37:2-38:13),"for (int i = 0; i< n; i++)
	    a[i]=i;"
58,MEMBEREXPRESSION,"a",Prob21.java(36:2-36:3),"a"
59,ARRAYCREATIONEXPRESSION,"",Prob21.java(36:6-36:16),"new int[n]"
60,LITERAL,"",Prob21.java(37:15-37:16),"0"
61,DECLAREDREFERENCEEXPRESSION,"n",Prob21.java(36:14-36:15),"n"
62,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(36:2-36:3),"this"
63,MEMBEREXPRESSION,"n",Prob21.java(35:2-35:8),"this.n"
64,DECLAREDREFERENCEEXPRESSION,"n",Prob21.java(35:9-35:10),"n"
65,BINARYOPERATOR,"=",Prob21.java(38:6-38:13),"a[i]=i;"
66,DECLARATIONSTATEMENT,"",Prob21.java(37:7-37:16),"int i = 0"
67,BINARYOPERATOR,"<",Prob21.java(37:18-37:22),"i< n"
68,UNARYOPERATOR,"++",Prob21.java(37:24-37:27),"i++"
69,VARIABLEDECLARATION,"i",Prob21.java(37:11-37:16),"i = 0"
70,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(38:6-38:7),"this"
71,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(38:6-38:10),"a[i]"
72,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(38:11-38:12),"i"
73,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(37:24-37:25),"i"
74,MEMBEREXPRESSION,"a",Prob21.java(38:6-38:7),"a"
75,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(38:8-38:9),"i"
76,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(37:18-37:19),"i"
77,DECLAREDREFERENCEEXPRESSION,"n",Prob21.java(37:21-37:22),"n"
78,FIELDDECLARATION,"this",,""
79,FIELDDECLARATION,"a",Prob21.java(12:5-12:13),"a"
80,METHODDECLARATION,"compareTo",Prob21.java(14:5-17:6),"@Override
    public int compareTo(Edge other) {
	return (int) (((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y)) - ((other.a.x-other.b.x)*(other.a.x-other.b.x) + (other.a.y-other.b.y)*(other.a.y-other.b.y)));
    }"
81,CONSTRUCTORDECLARATION,"Edge",Prob21.java(7:5-11:6),"Edge(No a, No b){
	this.a = a;
	this.b = b;

    }"
82,COMPOUNDSTATEMENT,"",Prob21.java(7:21-11:6),"{
	this.a = a;
	this.b = b;

    }"
83,PARAMVARIABLEDECLARATION,"a",Prob21.java(7:10-7:14),"No a"
84,PARAMVARIABLEDECLARATION,"b",Prob21.java(7:16-7:20),"No b"
85,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(8:2-8:6),"this"
86,RETURNSTATEMENT,"",,""
87,BINARYOPERATOR,"=",Prob21.java(8:2-8:13),"this.a = a;"
88,BINARYOPERATOR,"=",Prob21.java(9:2-9:13),"this.b = b;"
89,MEMBEREXPRESSION,"a",Prob21.java(8:2-8:8),"this.a"
90,DECLAREDREFERENCEEXPRESSION,"a",Prob21.java(8:11-8:12),"a"
91,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(9:2-9:6),"this"
92,MEMBEREXPRESSION,"b",Prob21.java(9:2-9:8),"this.b"
93,DECLAREDREFERENCEEXPRESSION,"b",Prob21.java(9:11-9:12),"b"
94,VARIABLEDECLARATION,"this",,""
95,COMPOUNDSTATEMENT,"",Prob21.java(15:38-17:6),"{
	return (int) (((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y)) - ((other.a.x-other.b.x)*(other.a.x-other.b.x) + (other.a.y-other.b.y)*(other.a.y-other.b.y)));
    }"
96,PARAMVARIABLEDECLARATION,"other",Prob21.java(15:26-15:36),"Edge other"
97,DECLAREDREFERENCEEXPRESSION,"a",Prob21.java(16:18-16:19),"a"
98,RETURNSTATEMENT,"",Prob21.java(16:2-16:155),"return (int) (((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y)) - ((other.a.x-other.b.x)*(other.a.x-other.b.x) + (other.a.y-other.b.y)*(other.a.y-other.b.y)));"
99,CASTEXPRESSION,"static_cast",Prob21.java(16:9-16:154),"(int) (((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y)) - ((other.a.x-other.b.x)*(other.a.x-other.b.x) + (other.a.y-other.b.y)*(other.a.y-other.b.y)))"
100,BINARYOPERATOR,"-",Prob21.java(16:16-16:153),"((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y)) - ((other.a.x-other.b.x)*(other.a.x-other.b.x) + (other.a.y-other.b.y)*(other.a.y-other.b.y))"
101,BINARYOPERATOR,"+",Prob21.java(16:17-16:58),"(a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y)"
102,BINARYOPERATOR,"+",Prob21.java(16:63-16:152),"(other.a.x-other.b.x)*(other.a.x-other.b.x) + (other.a.y-other.b.y)*(other.a.y-other.b.y)"
103,BINARYOPERATOR,"*",Prob21.java(16:63-16:106),"(other.a.x-other.b.x)*(other.a.x-other.b.x)"
104,BINARYOPERATOR,"*",Prob21.java(16:109-16:152),"(other.a.y-other.b.y)*(other.a.y-other.b.y)"
105,BINARYOPERATOR,"-",Prob21.java(16:64-16:83),"other.a.x-other.b.x"
106,BINARYOPERATOR,"-",Prob21.java(16:86-16:105),"other.a.x-other.b.x"
107,DECLAREDREFERENCEEXPRESSION,"other",Prob21.java(16:110-16:115),"other"
108,MEMBEREXPRESSION,"x",Prob21.java(16:86-16:95),"other.a.x"
109,MEMBEREXPRESSION,"x",Prob21.java(16:96-16:105),"other.b.x"
110,MEMBEREXPRESSION,"a",Prob21.java(16:86-16:93),"other.a"
111,DECLAREDREFERENCEEXPRESSION,"other",Prob21.java(16:96-16:101),"other"
112,DECLAREDREFERENCEEXPRESSION,"other",Prob21.java(16:86-16:91),"other"
113,MEMBEREXPRESSION,"b",Prob21.java(16:96-16:103),"other.b"
114,MEMBEREXPRESSION,"x",Prob21.java(16:64-16:73),"other.a.x"
115,MEMBEREXPRESSION,"x",Prob21.java(16:74-16:83),"other.b.x"
116,MEMBEREXPRESSION,"a",Prob21.java(16:64-16:71),"other.a"
117,DECLAREDREFERENCEEXPRESSION,"other",Prob21.java(16:74-16:79),"other"
118,DECLAREDREFERENCEEXPRESSION,"other",Prob21.java(16:64-16:69),"other"
119,MEMBEREXPRESSION,"b",Prob21.java(16:74-16:81),"other.b"
120,BINARYOPERATOR,"-",Prob21.java(16:110-16:129),"other.a.y-other.b.y"
121,BINARYOPERATOR,"-",Prob21.java(16:132-16:151),"other.a.y-other.b.y"
122,MEMBEREXPRESSION,"y",Prob21.java(16:132-16:141),"other.a.y"
123,MEMBEREXPRESSION,"y",Prob21.java(16:142-16:151),"other.b.y"
124,MEMBEREXPRESSION,"b",Prob21.java(16:142-16:149),"other.b"
125,DECLAREDREFERENCEEXPRESSION,"other",Prob21.java(16:142-16:147),"other"
126,MEMBEREXPRESSION,"a",Prob21.java(16:132-16:139),"other.a"
127,DECLAREDREFERENCEEXPRESSION,"other",Prob21.java(16:132-16:137),"other"
128,MEMBEREXPRESSION,"y",Prob21.java(16:110-16:119),"other.a.y"
129,MEMBEREXPRESSION,"y",Prob21.java(16:120-16:129),"other.b.y"
130,MEMBEREXPRESSION,"a",Prob21.java(16:110-16:117),"other.a"
131,DECLAREDREFERENCEEXPRESSION,"other",Prob21.java(16:120-16:125),"other"
132,MEMBEREXPRESSION,"b",Prob21.java(16:120-16:127),"other.b"
133,BINARYOPERATOR,"*",Prob21.java(16:17-16:36),"(a.x-b.x)*(a.x-b.x)"
134,BINARYOPERATOR,"*",Prob21.java(16:39-16:58),"(a.y-b.y)*(a.y-b.y)"
135,BINARYOPERATOR,"-",Prob21.java(16:40-16:47),"a.y-b.y"
136,BINARYOPERATOR,"-",Prob21.java(16:50-16:57),"a.y-b.y"
137,MEMBEREXPRESSION,"y",Prob21.java(16:50-16:53),"a.y"
138,MEMBEREXPRESSION,"y",Prob21.java(16:54-16:57),"b.y"
139,DECLAREDREFERENCEEXPRESSION,"a",Prob21.java(16:50-16:51),"a"
140,DECLAREDREFERENCEEXPRESSION,"b",Prob21.java(16:54-16:55),"b"
141,MEMBEREXPRESSION,"y",Prob21.java(16:40-16:43),"a.y"
142,MEMBEREXPRESSION,"y",Prob21.java(16:44-16:47),"b.y"
143,DECLAREDREFERENCEEXPRESSION,"a",Prob21.java(16:40-16:41),"a"
144,DECLAREDREFERENCEEXPRESSION,"b",Prob21.java(16:44-16:45),"b"
145,BINARYOPERATOR,"-",Prob21.java(16:18-16:25),"a.x-b.x"
146,BINARYOPERATOR,"-",Prob21.java(16:28-16:35),"a.x-b.x"
147,MEMBEREXPRESSION,"x",Prob21.java(16:28-16:31),"a.x"
148,MEMBEREXPRESSION,"x",Prob21.java(16:32-16:35),"b.x"
149,DECLAREDREFERENCEEXPRESSION,"a",Prob21.java(16:28-16:29),"a"
150,DECLAREDREFERENCEEXPRESSION,"b",Prob21.java(16:32-16:33),"b"
151,MEMBEREXPRESSION,"x",Prob21.java(16:18-16:21),"a.x"
152,MEMBEREXPRESSION,"x",Prob21.java(16:22-16:25),"b.x"
153,DECLAREDREFERENCEEXPRESSION,"b",Prob21.java(16:22-16:23),"b"
154,FIELDDECLARATION,"this",,""
155,FIELDDECLARATION,"x",Prob21.java(26:5-26:17),"x"
156,FIELDDECLARATION,"idx",Prob21.java(27:5-27:13),"idx"
157,CONSTRUCTORDECLARATION,"No",Prob21.java(21:5-25:6),"No(double x, double y, int idx) {
	this.x = x;
	this.y = y;
	this.idx = idx;
    }"
158,COMPOUNDSTATEMENT,"",Prob21.java(21:37-25:6),"{
	this.x = x;
	this.y = y;
	this.idx = idx;
    }"
159,PARAMVARIABLEDECLARATION,"x",Prob21.java(21:8-21:16),"double x"
160,PARAMVARIABLEDECLARATION,"y",Prob21.java(21:18-21:26),"double y"
161,PARAMVARIABLEDECLARATION,"idx",Prob21.java(21:28-21:35),"int idx"
162,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(22:2-22:6),"this"
163,RETURNSTATEMENT,"",,""
164,BINARYOPERATOR,"=",Prob21.java(22:2-22:13),"this.x = x;"
165,BINARYOPERATOR,"=",Prob21.java(23:2-23:13),"this.y = y;"
166,BINARYOPERATOR,"=",Prob21.java(24:2-24:17),"this.idx = idx;"
167,MEMBEREXPRESSION,"idx",Prob21.java(24:2-24:10),"this.idx"
168,DECLAREDREFERENCEEXPRESSION,"idx",Prob21.java(24:13-24:16),"idx"
169,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(24:2-24:6),"this"
170,MEMBEREXPRESSION,"x",Prob21.java(22:2-22:8),"this.x"
171,DECLAREDREFERENCEEXPRESSION,"x",Prob21.java(22:11-22:12),"x"
172,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(23:2-23:6),"this"
173,MEMBEREXPRESSION,"y",Prob21.java(23:2-23:8),"this.y"
174,DECLAREDREFERENCEEXPRESSION,"y",Prob21.java(23:11-23:12),"y"
175,FIELDDECLARATION,"this",,""
176,FIELDDECLARATION,"n",Prob21.java(55:5-55:18),"n"
177,METHODDECLARATION,"main",Prob21.java(58:5-85:6),"public static void main(String args[]){

	Scanner in = new Scanner(System.in);
	n = in.nextInt();

	ArrayList<No> nos = new ArrayList<No>();
	ArrayList<Edge> arestas = new ArrayList<Edge>();
	double comp = 0.0;
	
	for (int i=0; i < n; i++)
	    nos.add(new No(in.nextDouble(), in.nextDouble(), i));	    
       
	UnionFind sets = new UnionFind(n);

	for (int i=0; i < n; i++)
 	    for (int j=i+1; j< n; j++)
		arestas.add(new Edge(nos.get(i), nos.get(j)));

	Collections.sort(arestas);
	
	for (Edge e : arestas)
	    if (sets.FindSet(e.a.idx) != sets.FindSet(e.b.idx)){
		sets.UnionSet(e.a.idx, e.b.idx);
		comp += Math.sqrt((e.a.x-e.b.x)*(e.a.x-e.b.x) + (e.a.y-e.b.y)*(e.a.y-e.b.y));
		
	    }
	System.out.printf(""%.2f\n"", comp);
    }"
178,CONSTRUCTORDECLARATION,"Prob21",,""
179,VARIABLEDECLARATION,"this",,""
180,COMPOUNDSTATEMENT,"",Prob21.java(58:43-85:6),"{

	Scanner in = new Scanner(System.in);
	n = in.nextInt();

	ArrayList<No> nos = new ArrayList<No>();
	ArrayList<Edge> arestas = new ArrayList<Edge>();
	double comp = 0.0;
	
	for (int i=0; i < n; i++)
	    nos.add(new No(in.nextDouble(), in.nextDouble(), i));	    
       
	UnionFind sets = new UnionFind(n);

	for (int i=0; i < n; i++)
 	    for (int j=i+1; j< n; j++)
		arestas.add(new Edge(nos.get(i), nos.get(j)));

	Collections.sort(arestas);
	
	for (Edge e : arestas)
	    if (sets.FindSet(e.a.idx) != sets.FindSet(e.b.idx)){
		sets.UnionSet(e.a.idx, e.b.idx);
		comp += Math.sqrt((e.a.x-e.b.x)*(e.a.x-e.b.x) + (e.a.y-e.b.y)*(e.a.y-e.b.y));
		
	    }
	System.out.printf(""%.2f\n"", comp);
    }"
181,PARAMVARIABLEDECLARATION,"args",Prob21.java(58:29-58:42),"String args[]"
182,DECLAREDREFERENCEEXPRESSION,"System",Prob21.java(60:27-60:33),"System"
183,RETURNSTATEMENT,"",,""
184,DECLARATIONSTATEMENT,"",Prob21.java(60:2-60:38),"Scanner in = new Scanner(System.in);"
185,BINARYOPERATOR,"=",Prob21.java(61:2-61:19),"n = in.nextInt();"
186,DECLARATIONSTATEMENT,"",Prob21.java(63:2-63:42),"ArrayList<No> nos = new ArrayList<No>();"
187,DECLARATIONSTATEMENT,"",Prob21.java(64:2-64:50),"ArrayList<Edge> arestas = new ArrayList<Edge>();"
188,DECLARATIONSTATEMENT,"",Prob21.java(65:2-65:20),"double comp = 0.0;"
189,FORSTATEMENT,"",Prob21.java(67:2-68:59),"for (int i=0; i < n; i++)
	    nos.add(new No(in.nextDouble(), in.nextDouble(), i));"
190,DECLARATIONSTATEMENT,"",Prob21.java(70:2-70:36),"UnionFind sets = new UnionFind(n);"
191,FORSTATEMENT,"",Prob21.java(72:2-74:49),"for (int i=0; i < n; i++)
 	    for (int j=i+1; j< n; j++)
		arestas.add(new Edge(nos.get(i), nos.get(j)));"
192,STATICCALLEXPRESSION,"sort",Prob21.java(76:2-76:28),"Collections.sort(arestas);"
193,FOREACHSTATEMENT,"",Prob21.java(78:2-83:7),"for (Edge e : arestas)
	    if (sets.FindSet(e.a.idx) != sets.FindSet(e.b.idx)){
		sets.UnionSet(e.a.idx, e.b.idx);
		comp += Math.sqrt((e.a.x-e.b.x)*(e.a.x-e.b.x) + (e.a.y-e.b.y)*(e.a.y-e.b.y));
		
	    }"
194,MEMBERCALLEXPRESSION,"printf",Prob21.java(84:2-84:36),"System.out.printf(""%.2f\n"", comp);"
195,VARIABLEDECLARATION,"in",Prob21.java(60:10-60:37),"in = new Scanner(System.in)"
196,VARIABLEDECLARATION,"nos",Prob21.java(63:16-63:41),"nos = new ArrayList<No>()"
197,VARIABLEDECLARATION,"arestas",Prob21.java(64:18-64:49),"arestas = new ArrayList<Edge>()"
198,VARIABLEDECLARATION,"comp",Prob21.java(65:9-65:19),"comp = 0.0"
199,VARIABLEDECLARATION,"sets",Prob21.java(70:12-70:35),"sets = new UnionFind(n)"
200,DECLARATIONSTATEMENT,"",Prob21.java(78:7-78:13),"Edge e"
201,DECLAREDREFERENCEEXPRESSION,"arestas",Prob21.java(78:16-78:23),"arestas"
202,IFSTATEMENT,"",Prob21.java(79:6-83:7),"if (sets.FindSet(e.a.idx) != sets.FindSet(e.b.idx)){
		sets.UnionSet(e.a.idx, e.b.idx);
		comp += Math.sqrt((e.a.x-e.b.x)*(e.a.x-e.b.x) + (e.a.y-e.b.y)*(e.a.y-e.b.y));
		
	    }"
203,VARIABLEDECLARATION,"e",Prob21.java(78:12-78:13),"e"
204,DECLAREDREFERENCEEXPRESSION,"sets",Prob21.java(79:10-79:14),"sets"
205,DECLAREDREFERENCEEXPRESSION,"System",Prob21.java(84:2-84:8),"System"
206,UNINITIALIZEDVALUE,"Uninitialized Value",,""
207,BINARYOPERATOR,"!=",Prob21.java(79:10-79:56),"sets.FindSet(e.a.idx) != sets.FindSet(e.b.idx)"
208,COMPOUNDSTATEMENT,"",Prob21.java(79:57-83:7),"{
		sets.UnionSet(e.a.idx, e.b.idx);
		comp += Math.sqrt((e.a.x-e.b.x)*(e.a.x-e.b.x) + (e.a.y-e.b.y)*(e.a.y-e.b.y));
		
	    }"
209,DECLAREDREFERENCEEXPRESSION,"sets",Prob21.java(80:3-80:7),"sets"
210,MEMBERCALLEXPRESSION,"UnionSet",Prob21.java(80:3-80:35),"sets.UnionSet(e.a.idx, e.b.idx);"
211,BINARYOPERATOR,"+=",Prob21.java(81:3-81:80),"comp += Math.sqrt((e.a.x-e.b.x)*(e.a.x-e.b.x) + (e.a.y-e.b.y)*(e.a.y-e.b.y));"
212,DECLAREDREFERENCEEXPRESSION,"comp",Prob21.java(81:3-81:7),"comp"
213,STATICCALLEXPRESSION,"sqrt",Prob21.java(81:11-81:79),"Math.sqrt((e.a.x-e.b.x)*(e.a.x-e.b.x) + (e.a.y-e.b.y)*(e.a.y-e.b.y))"
214,BINARYOPERATOR,"+",Prob21.java(81:21-81:78),"(e.a.x-e.b.x)*(e.a.x-e.b.x) + (e.a.y-e.b.y)*(e.a.y-e.b.y)"
215,BINARYOPERATOR,"*",Prob21.java(81:21-81:48),"(e.a.x-e.b.x)*(e.a.x-e.b.x)"
216,BINARYOPERATOR,"*",Prob21.java(81:51-81:78),"(e.a.y-e.b.y)*(e.a.y-e.b.y)"
217,BINARYOPERATOR,"-",Prob21.java(81:22-81:33),"e.a.x-e.b.x"
218,BINARYOPERATOR,"-",Prob21.java(81:36-81:47),"e.a.x-e.b.x"
219,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(81:52-81:53),"e"
220,MEMBEREXPRESSION,"x",Prob21.java(81:36-81:41),"e.a.x"
221,MEMBEREXPRESSION,"x",Prob21.java(81:42-81:47),"e.b.x"
222,MEMBEREXPRESSION,"a",Prob21.java(81:36-81:39),"e.a"
223,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(81:42-81:43),"e"
224,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(81:36-81:37),"e"
225,MEMBEREXPRESSION,"b",Prob21.java(81:42-81:45),"e.b"
226,MEMBEREXPRESSION,"x",Prob21.java(81:22-81:27),"e.a.x"
227,MEMBEREXPRESSION,"x",Prob21.java(81:28-81:33),"e.b.x"
228,MEMBEREXPRESSION,"b",Prob21.java(81:28-81:31),"e.b"
229,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(81:28-81:29),"e"
230,MEMBEREXPRESSION,"a",Prob21.java(81:22-81:25),"e.a"
231,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(81:22-81:23),"e"
232,BINARYOPERATOR,"-",Prob21.java(81:52-81:63),"e.a.y-e.b.y"
233,BINARYOPERATOR,"-",Prob21.java(81:66-81:77),"e.a.y-e.b.y"
234,MEMBEREXPRESSION,"y",Prob21.java(81:52-81:57),"e.a.y"
235,MEMBEREXPRESSION,"y",Prob21.java(81:58-81:63),"e.b.y"
236,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(81:66-81:67),"e"
237,MEMBEREXPRESSION,"a",Prob21.java(81:52-81:55),"e.a"
238,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(81:58-81:59),"e"
239,MEMBEREXPRESSION,"b",Prob21.java(81:58-81:61),"e.b"
240,MEMBEREXPRESSION,"y",Prob21.java(81:66-81:71),"e.a.y"
241,MEMBEREXPRESSION,"y",Prob21.java(81:72-81:77),"e.b.y"
242,MEMBEREXPRESSION,"a",Prob21.java(81:66-81:69),"e.a"
243,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(81:72-81:73),"e"
244,MEMBEREXPRESSION,"b",Prob21.java(81:72-81:75),"e.b"
245,DECLAREDREFERENCEEXPRESSION,"UnionSet",Prob21.java(80:8-80:16),"UnionSet"
246,METHODDECLARATION,"UnionSet",,""
247,MEMBEREXPRESSION,"idx",Prob21.java(80:26-80:33),"e.b.idx"
248,MEMBEREXPRESSION,"b",Prob21.java(80:26-80:29),"e.b"
249,PARAMVARIABLEDECLARATION,"int1",,""
250,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(80:26-80:27),"e"
251,MEMBEREXPRESSION,"idx",Prob21.java(80:17-80:24),"e.a.idx"
252,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(80:17-80:18),"e"
253,MEMBEREXPRESSION,"a",Prob21.java(80:17-80:20),"e.a"
254,PARAMVARIABLEDECLARATION,"int0",,""
255,MEMBERCALLEXPRESSION,"FindSet",Prob21.java(79:10-79:31),"sets.FindSet(e.a.idx)"
256,MEMBERCALLEXPRESSION,"FindSet",Prob21.java(79:35-79:56),"sets.FindSet(e.b.idx)"
257,DECLAREDREFERENCEEXPRESSION,"FindSet",Prob21.java(79:15-79:22),"FindSet"
258,DECLAREDREFERENCEEXPRESSION,"sets",Prob21.java(79:35-79:39),"sets"
259,MEMBEREXPRESSION,"idx",Prob21.java(79:23-79:30),"e.a.idx"
260,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(79:23-79:24),"e"
261,MEMBEREXPRESSION,"a",Prob21.java(79:23-79:26),"e.a"
262,DECLAREDREFERENCEEXPRESSION,"FindSet",Prob21.java(79:40-79:47),"FindSet"
263,MEMBEREXPRESSION,"idx",Prob21.java(79:48-79:55),"e.b.idx"
264,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(79:48-79:49),"e"
265,MEMBEREXPRESSION,"b",Prob21.java(79:48-79:51),"e.b"
266,LITERAL,"",Prob21.java(72:13-72:14),"0"
267,LITERAL,"",Prob21.java(65:16-65:19),"0.0"
268,NEWEXPRESSION,"",Prob21.java(63:22-63:41),"new ArrayList<No>()"
269,CONSTRUCTEXPRESSION,"",Prob21.java(63:22-63:41),"new ArrayList<No>()"
270,NEWEXPRESSION,"",Prob21.java(64:28-64:49),"new ArrayList<Edge>()"
271,CONSTRUCTEXPRESSION,"",Prob21.java(64:28-64:49),"new ArrayList<Edge>()"
272,FORSTATEMENT,"",Prob21.java(73:7-74:49),"for (int j=i+1; j< n; j++)
		arestas.add(new Edge(nos.get(i), nos.get(j)));"
273,DECLARATIONSTATEMENT,"",Prob21.java(72:7-72:14),"int i=0"
274,BINARYOPERATOR,"<",Prob21.java(72:16-72:21),"i < n"
275,UNARYOPERATOR,"++",Prob21.java(72:23-72:26),"i++"
276,VARIABLEDECLARATION,"i",Prob21.java(72:11-72:14),"i=0"
277,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(73:18-73:19),"i"
278,DECLAREDREFERENCEEXPRESSION,"arestas",Prob21.java(76:19-76:26),"arestas"
279,MEMBERCALLEXPRESSION,"add",Prob21.java(74:3-74:49),"arestas.add(new Edge(nos.get(i), nos.get(j)));"
280,DECLARATIONSTATEMENT,"",Prob21.java(73:12-73:21),"int j=i+1"
281,BINARYOPERATOR,"<",Prob21.java(73:23-73:27),"j< n"
282,UNARYOPERATOR,"++",Prob21.java(73:29-73:32),"j++"
283,VARIABLEDECLARATION,"j",Prob21.java(73:16-73:21),"j=i+1"
284,DECLAREDREFERENCEEXPRESSION,"arestas",Prob21.java(74:3-74:10),"arestas"
285,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(72:23-72:24),"i"
286,DECLAREDREFERENCEEXPRESSION,"j",Prob21.java(73:29-73:30),"j"
287,DECLAREDREFERENCEEXPRESSION,"j",Prob21.java(73:23-73:24),"j"
288,BINARYOPERATOR,"+",Prob21.java(73:18-73:21),"i+1"
289,LITERAL,"",Prob21.java(73:20-73:21),"1"
290,DECLAREDREFERENCEEXPRESSION,"add",Prob21.java(74:11-74:14),"add"
291,NEWEXPRESSION,"",Prob21.java(74:15-74:47),"new Edge(nos.get(i), nos.get(j))"
292,DECLAREDREFERENCEEXPRESSION,"nos",Prob21.java(74:24-74:27),"nos"
293,CONSTRUCTEXPRESSION,"",Prob21.java(74:15-74:47),"new Edge(nos.get(i), nos.get(j))"
294,CONSTRUCTORDECLARATION,"Edge",,""
295,MEMBERCALLEXPRESSION,"get",Prob21.java(74:36-74:46),"nos.get(j)"
296,DECLAREDREFERENCEEXPRESSION,"get",Prob21.java(74:40-74:43),"get"
297,PARAMVARIABLEDECLARATION,"e1",,""
298,DECLAREDREFERENCEEXPRESSION,"j",Prob21.java(74:44-74:45),"j"
299,DECLAREDREFERENCEEXPRESSION,"nos",Prob21.java(74:36-74:39),"nos"
300,MEMBERCALLEXPRESSION,"get",Prob21.java(74:24-74:34),"nos.get(i)"
301,DECLAREDREFERENCEEXPRESSION,"get",Prob21.java(74:28-74:31),"get"
302,PARAMVARIABLEDECLARATION,"e0",,""
303,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(74:32-74:33),"i"
304,MEMBEREXPRESSION,"n",Prob21.java(73:26-73:27),"n"
305,DECLAREDREFERENCEEXPRESSION,"Prob21",Prob21.java(73:26-73:27),"Prob21"
306,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(72:16-72:17),"i"
307,MEMBEREXPRESSION,"n",Prob21.java(72:20-72:21),"n"
308,DECLAREDREFERENCEEXPRESSION,"Prob21",Prob21.java(72:20-72:21),"Prob21"
309,MEMBEREXPRESSION,"n",Prob21.java(61:2-61:3),"n"
310,MEMBERCALLEXPRESSION,"nextInt",Prob21.java(61:6-61:18),"in.nextInt()"
311,DECLAREDREFERENCEEXPRESSION,"Prob21",Prob21.java(61:2-61:3),"Prob21"
312,DECLAREDREFERENCEEXPRESSION,"in",Prob21.java(61:6-61:8),"in"
313,DECLAREDREFERENCEEXPRESSION,"nextInt",Prob21.java(61:9-61:16),"nextInt"
314,NEWEXPRESSION,"",Prob21.java(60:15-60:37),"new Scanner(System.in)"
315,CONSTRUCTEXPRESSION,"",Prob21.java(60:15-60:37),"new Scanner(System.in)"
316,MEMBEREXPRESSION,"in",Prob21.java(60:27-60:36),"System.in"
317,MEMBERCALLEXPRESSION,"add",Prob21.java(68:6-68:59),"nos.add(new No(in.nextDouble(), in.nextDouble(), i));"
318,DECLARATIONSTATEMENT,"",Prob21.java(67:7-67:14),"int i=0"
319,BINARYOPERATOR,"<",Prob21.java(67:16-67:21),"i < n"
320,UNARYOPERATOR,"++",Prob21.java(67:23-67:26),"i++"
321,VARIABLEDECLARATION,"i",Prob21.java(67:11-67:14),"i=0"
322,DECLAREDREFERENCEEXPRESSION,"nos",Prob21.java(68:6-68:9),"nos"
323,DECLAREDREFERENCEEXPRESSION,"Prob21",Prob21.java(70:33-70:34),"Prob21"
324,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(67:16-67:17),"i"
325,MEMBEREXPRESSION,"n",Prob21.java(67:20-67:21),"n"
326,DECLAREDREFERENCEEXPRESSION,"Prob21",Prob21.java(67:20-67:21),"Prob21"
327,DECLAREDREFERENCEEXPRESSION,"add",Prob21.java(68:10-68:13),"add"
328,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(67:23-67:24),"i"
329,NEWEXPRESSION,"",Prob21.java(68:14-68:57),"new No(in.nextDouble(), in.nextDouble(), i)"
330,CONSTRUCTEXPRESSION,"",Prob21.java(68:14-68:57),"new No(in.nextDouble(), in.nextDouble(), i)"
331,CONSTRUCTORDECLARATION,"No",,""
332,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(68:55-68:56),"i"
333,MEMBERCALLEXPRESSION,"nextDouble",Prob21.java(68:21-68:36),"in.nextDouble()"
334,DECLAREDREFERENCEEXPRESSION,"nextDouble",Prob21.java(68:24-68:34),"nextDouble"
335,PARAMVARIABLEDECLARATION,"double0",,""
336,DECLAREDREFERENCEEXPRESSION,"in",Prob21.java(68:38-68:40),"in"
337,DECLAREDREFERENCEEXPRESSION,"in",Prob21.java(68:21-68:23),"in"
338,PARAMVARIABLEDECLARATION,"int2",,""
339,MEMBERCALLEXPRESSION,"nextDouble",Prob21.java(68:38-68:53),"in.nextDouble()"
340,DECLAREDREFERENCEEXPRESSION,"nextDouble",Prob21.java(68:41-68:51),"nextDouble"
341,PARAMVARIABLEDECLARATION,"double1",,""
342,LITERAL,"",Prob21.java(67:13-67:14),"0"
343,DECLAREDREFERENCEEXPRESSION,"printf",Prob21.java(84:13-84:19),"printf"
344,DECLAREDREFERENCEEXPRESSION,"comp",Prob21.java(84:30-84:34),"comp"
345,LITERAL,"",Prob21.java(84:20-84:28),"""%.2f\n"""
346,MEMBEREXPRESSION,"out",Prob21.java(84:2-84:12),"System.out"
347,NEWEXPRESSION,"",Prob21.java(70:19-70:35),"new UnionFind(n)"
348,CONSTRUCTEXPRESSION,"",Prob21.java(70:19-70:35),"new UnionFind(n)"
349,CONSTRUCTORDECLARATION,"UnionFind",ex21.java(41:5-51:6),"public UnionFind(int n_edges){

	pai = new int[n_edges];
	rank = new int[n_edges];
	this.n_edges = n_edges;

	for(int i=0; i<n_edges; i++){
	    pai[i] = i;
	    rank[i] = 0; //rank da sub-árvore de um nó
	}
    }"
350,MEMBEREXPRESSION,"n",Prob21.java(70:33-70:34),"n"
351,PARAMVARIABLEDECLARATION,"n_edges",ex21.java(41:22-41:33),"int n_edges"

id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/04908832_21_201405558/Freckles.java",,""
2,RECORDDECLARATION,"Freckles",Freckles.java(4:1-81:2),"class Freckles
{
    static int rank=0;


    public static void main(String args[])
    {
    Scanner stdin = new Scanner(System.in);

    int N=stdin.nextInt();

    Point FaceMap[]=new Point[N];

    for(int i=0;i<N;i++)
        {
        FaceMap[i]=new Point(stdin.nextDouble(),stdin.nextDouble());
        }
    DrawOnHisFace(FaceMap,N);
    }
    public static void DrawOnHisFace(Point face[],int N)
    {
	int groups=N;
    PriorityQueue<Link> links = new PriorityQueue<Link>();

    for(int i=0;i<N-1;i++)
        {
        for(int i2=i+1;i2<N;i2++)
            links.add(new Link(i,i2,Distance(face[i],face[i2]) ));
        }
    double total=0;

    /*
    while(links.size()!=0)
    {
    Link l=links.poll();
    System.out.println(l);
    }
    */

    while(links.size()!=0 && groups!=1)
        {
        Link first=links.poll();

        Point a=face[first.a];
        Point b=face[first.b];

        rank=0;
        Point parentA=a.FindParent();
        int rankA=rank;

        rank=0;
        Point parentB=b.FindParent();
        int rankB=rank;

        if(parentA!=parentB)
            {
            if(rankA>rankB)
                parentA.UniteRoots(parentB);
            else
                parentB.UniteRoots(parentA);
	    groups--;
            total+=first.d;
            }

        }
    System.out.format(""%.2f\n"",total);

    }
    public static double Distance(Point a,Point b)
    {
    double x=Math.abs(a.x-b.x);
    double y=Math.abs(a.y-b.y);
    return Math.sqrt( (x*x) + (y*y) );
    }



}"
3,RECORDDECLARATION,"Point",Freckles.java(83:1-130:2),"class Point
{
    Point prev;

    double x;
    double y;

    Point(double X,double Y)
    {
    prev=this;

    x=X;
    y=Y;
    }
    public int compareTo(Point a)
    {
    if(a.x==x && a.y==y)
        return 0;
    else if(a.x>x)
        return -1;
    else
        return 1;
    }
    public Point FindParent()
    {
    if(prev==this)
        return this;
    else
        {
        Freckles.rank++;
        prev=prev.FindParent();
        }
    if(prev!=this)
        {
        Freckles.rank++;
        Point parent=prev.FindParent();
        prev=parent;
        return parent;
        }
    return this;

    }

    public void UniteRoots(Point a)
    {
    a.prev=this;
    }
}"
4,RECORDDECLARATION,"Link",Freckles.java(132:1-161:2),"class Link implements Comparable<Link>
{
    int a;  //index of point a
    int b;  //index of point b

    double d;  //distance between the points

    Link(int A,int B,double D)
    {
    a=A;
    b=B;
    d=D;
    }

@Override
    public int compareTo(Link l)
    {
    if(l.d<d)
        return 1;
    else if(l.d>d)
        return -1;
    else
        return 0;
    }
    public String toString()
    {
    return new String(""(""+a+"",""+b+"",""+d+"")"");
    }

}"
5,INCLUDEDECLARATION,"java.util",,""
6,FIELDDECLARATION,"this",,""
7,FIELDDECLARATION,"rank",Freckles.java(6:5-6:23),"rank = 0"
8,METHODDECLARATION,"main",Freckles.java(9:5-22:6),"public static void main(String args[])
    {
    Scanner stdin = new Scanner(System.in);

    int N=stdin.nextInt();

    Point FaceMap[]=new Point[N];

    for(int i=0;i<N;i++)
        {
        FaceMap[i]=new Point(stdin.nextDouble(),stdin.nextDouble());
        }
    DrawOnHisFace(FaceMap,N);
    }"
9,METHODDECLARATION,"DrawOnHisFace",Freckles.java(23:5-71:6),"public static void DrawOnHisFace(Point face[],int N)
    {
	int groups=N;
    PriorityQueue<Link> links = new PriorityQueue<Link>();

    for(int i=0;i<N-1;i++)
        {
        for(int i2=i+1;i2<N;i2++)
            links.add(new Link(i,i2,Distance(face[i],face[i2]) ));
        }
    double total=0;

    /*
    while(links.size()!=0)
    {
    Link l=links.poll();
    System.out.println(l);
    }
    */

    while(links.size()!=0 && groups!=1)
        {
        Link first=links.poll();

        Point a=face[first.a];
        Point b=face[first.b];

        rank=0;
        Point parentA=a.FindParent();
        int rankA=rank;

        rank=0;
        Point parentB=b.FindParent();
        int rankB=rank;

        if(parentA!=parentB)
            {
            if(rankA>rankB)
                parentA.UniteRoots(parentB);
            else
                parentB.UniteRoots(parentA);
	    groups--;
            total+=first.d;
            }

        }
    System.out.format(""%.2f\n"",total);

    }"
10,METHODDECLARATION,"Distance",Freckles.java(72:5-77:6),"public static double Distance(Point a,Point b)
    {
    double x=Math.abs(a.x-b.x);
    double y=Math.abs(a.y-b.y);
    return Math.sqrt( (x*x) + (y*y) );
    }"
11,METHODDECLARATION,"min",,""
12,METHODDECLARATION,"prim",,""
13,METHODDECLARATION,"calc",,""
14,METHODDECLARATION,"min",,""
15,CONSTRUCTORDECLARATION,"Freckles",,""
16,VARIABLEDECLARATION,"this",,""
17,COMPOUNDSTATEMENT,"",Freckles.java(73:5-77:6),"{
    double x=Math.abs(a.x-b.x);
    double y=Math.abs(a.y-b.y);
    return Math.sqrt( (x*x) + (y*y) );
    }"
18,PARAMVARIABLEDECLARATION,"a",Freckles.java(72:35-72:42),"Point a"
19,PARAMVARIABLEDECLARATION,"b",Freckles.java(72:43-72:50),"Point b"
20,CALLEXPRESSION,"Distance",Freckles.java(31:37-31:63),"Distance(face[i],face[i2])"
21,DECLAREDREFERENCEEXPRESSION,"a",Freckles.java(74:23-74:24),"a"
22,RETURNSTATEMENT,"",Freckles.java(76:5-76:39),"return Math.sqrt( (x*x) + (y*y) );"
23,DECLARATIONSTATEMENT,"",Freckles.java(74:5-74:32),"double x=Math.abs(a.x-b.x);"
24,DECLARATIONSTATEMENT,"",Freckles.java(75:5-75:32),"double y=Math.abs(a.y-b.y);"
25,VARIABLEDECLARATION,"x",Freckles.java(74:12-74:31),"x=Math.abs(a.x-b.x)"
26,VARIABLEDECLARATION,"y",Freckles.java(75:12-75:31),"y=Math.abs(a.y-b.y)"
27,STATICCALLEXPRESSION,"abs",Freckles.java(75:14-75:31),"Math.abs(a.y-b.y)"
28,BINARYOPERATOR,"-",Freckles.java(75:23-75:30),"a.y-b.y"
29,MEMBEREXPRESSION,"y",Freckles.java(75:23-75:26),"a.y"
30,MEMBEREXPRESSION,"y",Freckles.java(75:27-75:30),"b.y"
31,DECLAREDREFERENCEEXPRESSION,"b",Freckles.java(75:27-75:28),"b"
32,DECLAREDREFERENCEEXPRESSION,"a",Freckles.java(75:23-75:24),"a"
33,STATICCALLEXPRESSION,"abs",Freckles.java(74:14-74:31),"Math.abs(a.x-b.x)"
34,BINARYOPERATOR,"-",Freckles.java(74:23-74:30),"a.x-b.x"
35,MEMBEREXPRESSION,"x",Freckles.java(74:23-74:26),"a.x"
36,MEMBEREXPRESSION,"x",Freckles.java(74:27-74:30),"b.x"
37,DECLAREDREFERENCEEXPRESSION,"b",Freckles.java(74:27-74:28),"b"
38,DECLAREDREFERENCEEXPRESSION,"x",Freckles.java(76:24-76:25),"x"
39,STATICCALLEXPRESSION,"sqrt",Freckles.java(76:12-76:38),"Math.sqrt( (x*x) + (y*y) )"
40,BINARYOPERATOR,"+",Freckles.java(76:23-76:36),"(x*x) + (y*y)"
41,BINARYOPERATOR,"*",Freckles.java(76:24-76:27),"x*x"
42,BINARYOPERATOR,"*",Freckles.java(76:32-76:35),"y*y"
43,DECLAREDREFERENCEEXPRESSION,"y",Freckles.java(76:32-76:33),"y"
44,DECLAREDREFERENCEEXPRESSION,"y",Freckles.java(76:34-76:35),"y"
45,DECLAREDREFERENCEEXPRESSION,"x",Freckles.java(76:26-76:27),"x"
46,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(31:46-31:53),"face[i]"
47,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(31:54-31:62),"face[i2]"
48,PARAMVARIABLEDECLARATION,"doublePtrPtr0",,""
49,PARAMVARIABLEDECLARATION,"int1",,""
50,CALLEXPRESSION,"prim",Freckles.java(53:3-53:19),"prim(matrix, 0);"
51,CALLEXPRESSION,"prim",Freckles.java(61:3-61:19),"prim(matrix, 0);"
52,MEMBEREXPRESSION,"matrix",Freckles.java(61:8-61:14),"matrix"
53,MEMBEREXPRESSION,"matrix",Freckles.java(53:8-53:14),"matrix"
54,LITERAL,"",Freckles.java(53:16-53:17),"0"
55,LITERAL,"",Freckles.java(61:16-61:17),"0"
56,VARIABLEDECLARATION,"this",,""
57,COMPOUNDSTATEMENT,"",Freckles.java(10:5-22:6),"{
    Scanner stdin = new Scanner(System.in);

    int N=stdin.nextInt();

    Point FaceMap[]=new Point[N];

    for(int i=0;i<N;i++)
        {
        FaceMap[i]=new Point(stdin.nextDouble(),stdin.nextDouble());
        }
    DrawOnHisFace(FaceMap,N);
    }"
58,PARAMVARIABLEDECLARATION,"args",Freckles.java(9:29-9:42),"String args[]"
59,DECLAREDREFERENCEEXPRESSION,"System",Freckles.java(11:33-11:39),"System"
60,RETURNSTATEMENT,"",,""
61,DECLARATIONSTATEMENT,"",Freckles.java(11:5-11:44),"Scanner stdin = new Scanner(System.in);"
62,DECLARATIONSTATEMENT,"",Freckles.java(13:5-13:27),"int N=stdin.nextInt();"
63,DECLARATIONSTATEMENT,"",Freckles.java(15:5-15:34),"Point FaceMap[]=new Point[N];"
64,FORSTATEMENT,"",Freckles.java(17:5-20:10),"for(int i=0;i<N;i++)
        {
        FaceMap[i]=new Point(stdin.nextDouble(),stdin.nextDouble());
        }"
65,CALLEXPRESSION,"DrawOnHisFace",Freckles.java(21:5-21:30),"DrawOnHisFace(FaceMap,N);"
66,VARIABLEDECLARATION,"stdin",Freckles.java(11:13-11:43),"stdin = new Scanner(System.in)"
67,VARIABLEDECLARATION,"N",Freckles.java(13:9-13:26),"N=stdin.nextInt()"
68,VARIABLEDECLARATION,"FaceMap",Freckles.java(15:11-15:33),"FaceMap[]=new Point[N]"
69,COMPOUNDSTATEMENT,"",Freckles.java(18:9-20:10),"{
        FaceMap[i]=new Point(stdin.nextDouble(),stdin.nextDouble());
        }"
70,DECLARATIONSTATEMENT,"",Freckles.java(17:9-17:16),"int i=0"
71,BINARYOPERATOR,"<",Freckles.java(17:17-17:20),"i<N"
72,UNARYOPERATOR,"++",Freckles.java(17:21-17:24),"i++"
73,VARIABLEDECLARATION,"i",Freckles.java(17:13-17:16),"i=0"
74,DECLAREDREFERENCEEXPRESSION,"FaceMap",Freckles.java(19:9-19:16),"FaceMap"
75,DECLAREDREFERENCEEXPRESSION,"FaceMap",Freckles.java(21:19-21:26),"FaceMap"
76,DECLAREDREFERENCEEXPRESSION,"i",Freckles.java(17:17-17:18),"i"
77,DECLAREDREFERENCEEXPRESSION,"i",Freckles.java(17:21-17:22),"i"
78,LITERAL,"",Freckles.java(17:15-17:16),"0"
79,DECLAREDREFERENCEEXPRESSION,"N",Freckles.java(17:19-17:20),"N"
80,BINARYOPERATOR,"=",Freckles.java(19:9-19:69),"FaceMap[i]=new Point(stdin.nextDouble(),stdin.nextDouble());"
81,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(19:9-19:19),"FaceMap[i]"
82,NEWEXPRESSION,"",Freckles.java(19:20-19:68),"new Point(stdin.nextDouble(),stdin.nextDouble())"
83,CONSTRUCTEXPRESSION,"",Freckles.java(19:20-19:68),"new Point(stdin.nextDouble(),stdin.nextDouble())"
84,CONSTRUCTORDECLARATION,"Point",,""
85,MEMBERCALLEXPRESSION,"nextDouble",Freckles.java(19:49-19:67),"stdin.nextDouble()"
86,DECLAREDREFERENCEEXPRESSION,"nextDouble",Freckles.java(19:55-19:65),"nextDouble"
87,PARAMVARIABLEDECLARATION,"double1",,""
88,DECLAREDREFERENCEEXPRESSION,"stdin",Freckles.java(19:49-19:54),"stdin"
89,MEMBERCALLEXPRESSION,"nextDouble",Freckles.java(19:30-19:48),"stdin.nextDouble()"
90,DECLAREDREFERENCEEXPRESSION,"nextDouble",Freckles.java(19:36-19:46),"nextDouble"
91,PARAMVARIABLEDECLARATION,"double0",,""
92,DECLAREDREFERENCEEXPRESSION,"stdin",Freckles.java(19:30-19:35),"stdin"
93,DECLAREDREFERENCEEXPRESSION,"i",Freckles.java(19:17-19:18),"i"
94,MEMBERCALLEXPRESSION,"nextInt",Freckles.java(13:11-13:26),"stdin.nextInt()"
95,DECLAREDREFERENCEEXPRESSION,"nextInt",Freckles.java(13:17-13:24),"nextInt"
96,DECLAREDREFERENCEEXPRESSION,"stdin",Freckles.java(13:11-13:16),"stdin"
97,DECLAREDREFERENCEEXPRESSION,"N",Freckles.java(15:31-15:32),"N"
98,NEWEXPRESSION,"",Freckles.java(11:21-11:43),"new Scanner(System.in)"
99,CONSTRUCTEXPRESSION,"",Freckles.java(11:21-11:43),"new Scanner(System.in)"
100,MEMBEREXPRESSION,"in",Freckles.java(11:33-11:42),"System.in"
101,DECLAREDREFERENCEEXPRESSION,"N",Freckles.java(21:27-21:28),"N"
102,PARAMVARIABLEDECLARATION,"N",Freckles.java(23:51-23:56),"int N"
103,PARAMVARIABLEDECLARATION,"face",Freckles.java(23:38-23:50),"Point face[]"
104,ARRAYCREATIONEXPRESSION,"",Freckles.java(15:21-15:33),"new Point[N]"
105,PARAMVARIABLEDECLARATION,"double0",,""
106,PARAMVARIABLEDECLARATION,"double1",,""
107,PARAMVARIABLEDECLARATION,"double2",,""
108,PARAMVARIABLEDECLARATION,"double3",,""
109,CALLEXPRESSION,"calc",Freckles.java(46:35-46:115),"calc(coordinates[i][0], coordinates[j][0], coordinates[i][1], coordinates[j][1])"
110,CALLEXPRESSION,"calc",Freckles.java(46:36-46:116),"calc(coordinates[i][0], coordinates[j][0], coordinates[i][1], coordinates[j][1])"
111,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(46:98-46:115),"coordinates[j][1]"
112,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(46:97-46:114),"coordinates[j][1]"
113,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(46:59-46:76),"coordinates[j][0]"
114,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(46:60-46:77),"coordinates[j][0]"
115,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(46:78-46:95),"coordinates[i][1]"
116,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(46:79-46:96),"coordinates[i][1]"
117,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(46:40-46:57),"coordinates[i][0]"
118,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(46:41-46:58),"coordinates[i][0]"
119,VARIABLEDECLARATION,"this",,""
120,COMPOUNDSTATEMENT,"",Freckles.java(24:5-71:6),"{
	int groups=N;
    PriorityQueue<Link> links = new PriorityQueue<Link>();

    for(int i=0;i<N-1;i++)
        {
        for(int i2=i+1;i2<N;i2++)
            links.add(new Link(i,i2,Distance(face[i],face[i2]) ));
        }
    double total=0;

    /*
    while(links.size()!=0)
    {
    Link l=links.poll();
    System.out.println(l);
    }
    */

    while(links.size()!=0 && groups!=1)
        {
        Link first=links.poll();

        Point a=face[first.a];
        Point b=face[first.b];

        rank=0;
        Point parentA=a.FindParent();
        int rankA=rank;

        rank=0;
        Point parentB=b.FindParent();
        int rankB=rank;

        if(parentA!=parentB)
            {
            if(rankA>rankB)
                parentA.UniteRoots(parentB);
            else
                parentB.UniteRoots(parentA);
	    groups--;
            total+=first.d;
            }

        }
    System.out.format(""%.2f\n"",total);

    }"
121,DECLAREDREFERENCEEXPRESSION,"N",Freckles.java(25:13-25:14),"N"
122,RETURNSTATEMENT,"",,""
123,DECLARATIONSTATEMENT,"",Freckles.java(25:2-25:15),"int groups=N;"
124,DECLARATIONSTATEMENT,"",Freckles.java(26:5-26:59),"PriorityQueue<Link> links = new PriorityQueue<Link>();"
125,FORSTATEMENT,"",Freckles.java(28:5-32:10),"for(int i=0;i<N-1;i++)
        {
        for(int i2=i+1;i2<N;i2++)
            links.add(new Link(i,i2,Distance(face[i],face[i2]) ));
        }"
126,DECLARATIONSTATEMENT,"",Freckles.java(33:5-33:20),"double total=0;"
127,WHILESTATEMENT,"",Freckles.java(43:5-68:10),"while(links.size()!=0 && groups!=1)
        {
        Link first=links.poll();

        Point a=face[first.a];
        Point b=face[first.b];

        rank=0;
        Point parentA=a.FindParent();
        int rankA=rank;

        rank=0;
        Point parentB=b.FindParent();
        int rankB=rank;

        if(parentA!=parentB)
            {
            if(rankA>rankB)
                parentA.UniteRoots(parentB);
            else
                parentB.UniteRoots(parentA);
	    groups--;
            total+=first.d;
            }

        }"
128,MEMBERCALLEXPRESSION,"format",Freckles.java(69:5-69:39),"System.out.format(""%.2f\n"",total);"
129,VARIABLEDECLARATION,"groups",Freckles.java(25:6-25:14),"groups=N"
130,VARIABLEDECLARATION,"links",Freckles.java(26:25-26:58),"links = new PriorityQueue<Link>()"
131,VARIABLEDECLARATION,"total",Freckles.java(33:12-33:19),"total=0"
132,LITERAL,"",Freckles.java(33:18-33:19),"0"
133,LITERAL,"",Freckles.java(28:15-28:16),"0"
134,DECLAREDREFERENCEEXPRESSION,"links",Freckles.java(43:11-43:16),"links"
135,BINARYOPERATOR,"&&",Freckles.java(43:11-43:39),"links.size()!=0 && groups!=1"
136,COMPOUNDSTATEMENT,"",Freckles.java(44:9-68:10),"{
        Link first=links.poll();

        Point a=face[first.a];
        Point b=face[first.b];

        rank=0;
        Point parentA=a.FindParent();
        int rankA=rank;

        rank=0;
        Point parentB=b.FindParent();
        int rankB=rank;

        if(parentA!=parentB)
            {
            if(rankA>rankB)
                parentA.UniteRoots(parentB);
            else
                parentB.UniteRoots(parentA);
	    groups--;
            total+=first.d;
            }

        }"
137,DECLAREDREFERENCEEXPRESSION,"links",Freckles.java(45:20-45:25),"links"
138,DECLAREDREFERENCEEXPRESSION,"System",Freckles.java(69:5-69:11),"System"
139,BINARYOPERATOR,"!=",Freckles.java(43:11-43:26),"links.size()!=0"
140,BINARYOPERATOR,"!=",Freckles.java(43:30-43:39),"groups!=1"
141,MEMBERCALLEXPRESSION,"size",Freckles.java(43:11-43:23),"links.size()"
142,LITERAL,"",Freckles.java(43:25-43:26),"0"
143,DECLAREDREFERENCEEXPRESSION,"groups",Freckles.java(43:30-43:36),"groups"
144,DECLAREDREFERENCEEXPRESSION,"size",Freckles.java(43:17-43:21),"size"
145,LITERAL,"",Freckles.java(43:38-43:39),"1"
146,DECLARATIONSTATEMENT,"",Freckles.java(45:9-45:33),"Link first=links.poll();"
147,DECLARATIONSTATEMENT,"",Freckles.java(47:9-47:31),"Point a=face[first.a];"
148,DECLARATIONSTATEMENT,"",Freckles.java(48:9-48:31),"Point b=face[first.b];"
149,BINARYOPERATOR,"=",Freckles.java(50:9-50:16),"rank=0;"
150,DECLARATIONSTATEMENT,"",Freckles.java(51:9-51:38),"Point parentA=a.FindParent();"
151,DECLARATIONSTATEMENT,"",Freckles.java(52:9-52:24),"int rankA=rank;"
152,BINARYOPERATOR,"=",Freckles.java(54:9-54:16),"rank=0;"
153,DECLARATIONSTATEMENT,"",Freckles.java(55:9-55:38),"Point parentB=b.FindParent();"
154,DECLARATIONSTATEMENT,"",Freckles.java(56:9-56:24),"int rankB=rank;"
155,IFSTATEMENT,"",Freckles.java(58:9-66:14),"if(parentA!=parentB)
            {
            if(rankA>rankB)
                parentA.UniteRoots(parentB);
            else
                parentB.UniteRoots(parentA);
	    groups--;
            total+=first.d;
            }"
156,VARIABLEDECLARATION,"first",Freckles.java(45:14-45:32),"first=links.poll()"
157,VARIABLEDECLARATION,"a",Freckles.java(47:15-47:30),"a=face[first.a]"
158,VARIABLEDECLARATION,"b",Freckles.java(48:15-48:30),"b=face[first.b]"
159,VARIABLEDECLARATION,"parentA",Freckles.java(51:15-51:37),"parentA=a.FindParent()"
160,VARIABLEDECLARATION,"rankA",Freckles.java(52:13-52:23),"rankA=rank"
161,VARIABLEDECLARATION,"parentB",Freckles.java(55:15-55:37),"parentB=b.FindParent()"
162,VARIABLEDECLARATION,"rankB",Freckles.java(56:13-56:23),"rankB=rank"
163,COMPOUNDSTATEMENT,"",Freckles.java(59:13-66:14),"{
            if(rankA>rankB)
                parentA.UniteRoots(parentB);
            else
                parentB.UniteRoots(parentA);
	    groups--;
            total+=first.d;
            }"
164,DECLAREDREFERENCEEXPRESSION,"face",Freckles.java(47:17-47:21),"face"
165,MEMBEREXPRESSION,"rank",Freckles.java(56:19-56:23),"rank"
166,DECLAREDREFERENCEEXPRESSION,"Freckles",Freckles.java(56:19-56:23),"Freckles"
167,MEMBERCALLEXPRESSION,"FindParent",Freckles.java(51:23-51:37),"a.FindParent()"
168,DECLAREDREFERENCEEXPRESSION,"FindParent",Freckles.java(51:25-51:35),"FindParent"
169,METHODDECLARATION,"FindParent",,""
170,DECLAREDREFERENCEEXPRESSION,"a",Freckles.java(51:23-51:24),"a"
171,DECLAREDREFERENCEEXPRESSION,"Freckles",Freckles.java(54:9-54:13),"Freckles"
172,DECLAREDREFERENCEEXPRESSION,"face",Freckles.java(48:17-48:21),"face"
173,DECLAREDREFERENCEEXPRESSION,"parentA",Freckles.java(58:12-58:19),"parentA"
174,BINARYOPERATOR,"!=",Freckles.java(58:12-58:28),"parentA!=parentB"
175,DECLAREDREFERENCEEXPRESSION,"rankA",Freckles.java(60:16-60:21),"rankA"
176,DECLAREDREFERENCEEXPRESSION,"parentB",Freckles.java(58:21-58:28),"parentB"
177,IFSTATEMENT,"",Freckles.java(60:13-63:45),"if(rankA>rankB)
                parentA.UniteRoots(parentB);
            else
                parentB.UniteRoots(parentA);"
178,UNARYOPERATOR,"--",Freckles.java(64:6-64:15),"groups--;"
179,BINARYOPERATOR,"+=",Freckles.java(65:13-65:28),"total+=first.d;"
180,DECLAREDREFERENCEEXPRESSION,"total",Freckles.java(65:13-65:18),"total"
181,MEMBEREXPRESSION,"d",Freckles.java(65:20-65:27),"first.d"
182,DECLAREDREFERENCEEXPRESSION,"first",Freckles.java(65:20-65:25),"first"
183,BINARYOPERATOR,">",Freckles.java(60:16-60:27),"rankA>rankB"
184,MEMBERCALLEXPRESSION,"UniteRoots",Freckles.java(61:17-61:45),"parentA.UniteRoots(parentB);"
185,MEMBERCALLEXPRESSION,"UniteRoots",Freckles.java(63:17-63:45),"parentB.UniteRoots(parentA);"
186,DECLAREDREFERENCEEXPRESSION,"parentA",Freckles.java(61:17-61:24),"parentA"
187,DECLAREDREFERENCEEXPRESSION,"parentB",Freckles.java(63:17-63:24),"parentB"
188,DECLAREDREFERENCEEXPRESSION,"UniteRoots",Freckles.java(61:25-61:35),"UniteRoots"
189,METHODDECLARATION,"UniteRoots",,""
190,DECLAREDREFERENCEEXPRESSION,"groups",Freckles.java(64:6-64:12),"groups"
191,DECLAREDREFERENCEEXPRESSION,"parentB",Freckles.java(61:36-61:43),"parentB"
192,PARAMVARIABLEDECLARATION,"point0",,""
193,DECLAREDREFERENCEEXPRESSION,"UniteRoots",Freckles.java(63:25-63:35),"UniteRoots"
194,DECLAREDREFERENCEEXPRESSION,"parentA",Freckles.java(63:36-63:43),"parentA"
195,DECLAREDREFERENCEEXPRESSION,"rankB",Freckles.java(60:22-60:27),"rankB"
196,MEMBERCALLEXPRESSION,"poll",Freckles.java(45:20-45:32),"links.poll()"
197,DECLAREDREFERENCEEXPRESSION,"poll",Freckles.java(45:26-45:30),"poll"
198,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(47:17-47:30),"face[first.a]"
199,MEMBEREXPRESSION,"a",Freckles.java(47:22-47:29),"first.a"
200,DECLAREDREFERENCEEXPRESSION,"first",Freckles.java(47:22-47:27),"first"
201,DECLAREDREFERENCEEXPRESSION,"Freckles",Freckles.java(50:9-50:13),"Freckles"
202,DECLAREDREFERENCEEXPRESSION,"Freckles",Freckles.java(52:19-52:23),"Freckles"
203,ARRAYSUBSCRIPTIONEXPRESSION,"",Freckles.java(48:17-48:30),"face[first.b]"
204,MEMBEREXPRESSION,"b",Freckles.java(48:22-48:29),"first.b"
205,DECLAREDREFERENCEEXPRESSION,"first",Freckles.java(48:22-48:27),"first"
206,MEMBEREXPRESSION,"rank",Freckles.java(54:9-54:13),"rank"
207,LITERAL,"",Freckles.java(54:14-54:15),"0"
208,DECLAREDREFERENCEEXPRESSION,"b",Freckles.java(55:23-55:24),"b"
209,MEMBEREXPRESSION,"rank",Freckles.java(52:19-52:23),"rank"
210,MEMBERCALLEXPRESSION,"FindParent",Freckles.java(55:23-55:37),"b.FindParent()"
211,DECLAREDREFERENCEEXPRESSION,"FindParent",Freckles.java(55:25-55:35),"FindParent"
212,MEMBEREXPRESSION,"rank",Freckles.java(50:9-50:13),"rank"
213,LITERAL,"",Freckles.java(50:14-50:15),"0"
214,DECLAREDREFERENCEEXPRESSION,"format",Freckles.java(69:16-69:22),"format"
215,DECLAREDREFERENCEEXPRESSION,"total",Freckles.java(69:32-69:37),"total"
216,MEMBEREXPRESSION,"out",Freckles.java(69:5-69:15),"System.out"
217,LITERAL,"",Freckles.java(69:23-69:31),"""%.2f\n"""
218,COMPOUNDSTATEMENT,"",Freckles.java(29:9-32:10),"{
        for(int i2=i+1;i2<N;i2++)
            links.add(new Link(i,i2,Distance(face[i],face[i2]) ));
        }"
219,DECLARATIONSTATEMENT,"",Freckles.java(28:9-28:16),"int i=0"
220,BINARYOPERATOR,"<",Freckles.java(28:17-28:22),"i<N-1"
221,UNARYOPERATOR,"++",Freckles.java(28:23-28:26),"i++"
222,VARIABLEDECLARATION,"i",Freckles.java(28:13-28:16),"i=0"
223,DECLAREDREFERENCEEXPRESSION,"i",Freckles.java(30:20-30:21),"i"
224,DECLAREDREFERENCEEXPRESSION,"i",Freckles.java(28:17-28:18),"i"
225,DECLAREDREFERENCEEXPRESSION,"i",Freckles.java(28:23-28:24),"i"
226,FORSTATEMENT,"",Freckles.java(30:9-31:67),"for(int i2=i+1;i2<N;i2++)
            links.add(new Link(i,i2,Distance(face[i],face[i2]) ));"
227,MEMBERCALLEXPRESSION,"add",Freckles.java(31:13-31:67),"links.add(new Link(i,i2,Distance(face[i],face[i2]) ));"
228,DECLARATIONSTATEMENT,"",Freckles.java(30:13-30:23),"int i2=i+1"
229,BINARYOPERATOR,"<",Freckles.java(30:24-30:28),"i2<N"
230,UNARYOPERATOR,"++",Freckles.java(30:29-30:33),"i2++"
231,VARIABLEDECLARATION,"i2",Freckles.java(30:17-30:23),"i2=i+1"
232,DECLAREDREFERENCEEXPRESSION,"links",Freckles.java(31:13-31:18),"links"
233,DECLAREDREFERENCEEXPRESSION,"add",Freckles.java(31:19-31:22),"add"
234,DECLAREDREFERENCEEXPRESSION,"i2",Freckles.java(30:29-30:31),"i2"
235,NEWEXPRESSION,"",Freckles.java(31:23-31:65),"new Link(i,i2,Distance(face[i],face[i2]) )"
236,CONSTRUCTEXPRESSION,"",Freckles.java(31:23-31:65),"new Link(i,i2,Distance(face[i],face[i2]) )"
237,CONSTRUCTORDECLARATION,"Link",,""
238,PARAMVARIABLEDECLARATION,"double2",,""
239,DECLAREDREFERENCEEXPRESSION,"face",Freckles.java(31:54-31:58),"face"
240,DECLAREDREFERENCEEXPRESSION,"i2",Freckles.java(31:59-31:61),"i2"
241,DECLAREDREFERENCEEXPRESSION,"face",Freckles.java(31:46-31:50),"face"
242,DECLAREDREFERENCEEXPRESSION,"i",Freckles.java(31:51-31:52),"i"
243,DECLAREDREFERENCEEXPRESSION,"i2",Freckles.java(31:34-31:36),"i2"
244,PARAMVARIABLEDECLARATION,"int1",,""
245,DECLAREDREFERENCEEXPRESSION,"i",Freckles.java(31:32-31:33),"i"
246,PARAMVARIABLEDECLARATION,"int0",,""
247,DECLAREDREFERENCEEXPRESSION,"i2",Freckles.java(30:24-30:26),"i2"
248,BINARYOPERATOR,"+",Freckles.java(30:20-30:23),"i+1"
249,LITERAL,"",Freckles.java(30:22-30:23),"1"
250,DECLAREDREFERENCEEXPRESSION,"N",Freckles.java(30:27-30:28),"N"
251,BINARYOPERATOR,"-",Freckles.java(28:19-28:22),"N-1"
252,DECLAREDREFERENCEEXPRESSION,"N",Freckles.java(28:19-28:20),"N"
253,LITERAL,"",Freckles.java(28:21-28:22),"1"
254,NEWEXPRESSION,"",Freckles.java(26:33-26:58),"new PriorityQueue<Link>()"
255,CONSTRUCTEXPRESSION,"",Freckles.java(26:33-26:58),"new PriorityQueue<Link>()"
256,PARAMVARIABLEDECLARATION,"doublePtrPtr0",,""
257,CALLEXPRESSION,"min",Freckles.java(98:12-98:22),"min(graph)"
258,DECLAREDREFERENCEEXPRESSION,"graph",Freckles.java(98:16-98:21),"graph"
259,PARAMVARIABLEDECLARATION,"java.util.linkedlist0",,""
260,CALLEXPRESSION,"min",Freckles.java(87:12-87:25),"min(vertices)"
261,DECLAREDREFERENCEEXPRESSION,"vertices",Freckles.java(87:16-87:24),"vertices"
262,LITERAL,"",Freckles.java(6:21-6:22),"0"
263,FIELDDECLARATION,"this",,""
264,FIELDDECLARATION,"prev",Freckles.java(85:5-85:16),"prev"
265,FIELDDECLARATION,"x",Freckles.java(87:5-87:14),"x"
266,FIELDDECLARATION,"y",Freckles.java(88:5-88:14),"y"
267,METHODDECLARATION,"compareTo",Freckles.java(97:5-105:6),"public int compareTo(Point a)
    {
    if(a.x==x && a.y==y)
        return 0;
    else if(a.x>x)
        return -1;
    else
        return 1;
    }"
268,METHODDECLARATION,"FindParent",Freckles.java(106:5-124:6),"public Point FindParent()
    {
    if(prev==this)
        return this;
    else
        {
        Freckles.rank++;
        prev=prev.FindParent();
        }
    if(prev!=this)
        {
        Freckles.rank++;
        Point parent=prev.FindParent();
        prev=parent;
        return parent;
        }
    return this;

    }"
269,METHODDECLARATION,"UniteRoots",Freckles.java(126:5-129:6),"public void UniteRoots(Point a)
    {
    a.prev=this;
    }"
270,CONSTRUCTORDECLARATION,"Point",Freckles.java(90:5-96:6),"Point(double X,double Y)
    {
    prev=this;

    x=X;
    y=Y;
    }"
271,COMPOUNDSTATEMENT,"",Freckles.java(91:5-96:6),"{
    prev=this;

    x=X;
    y=Y;
    }"
272,PARAMVARIABLEDECLARATION,"X",Freckles.java(90:11-90:19),"double X"
273,PARAMVARIABLEDECLARATION,"Y",Freckles.java(90:20-90:28),"double Y"
274,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(92:5-92:9),"this"
275,RETURNSTATEMENT,"",,""
276,BINARYOPERATOR,"=",Freckles.java(92:5-92:15),"prev=this;"
277,BINARYOPERATOR,"=",Freckles.java(94:5-94:9),"x=X;"
278,BINARYOPERATOR,"=",Freckles.java(95:5-95:9),"y=Y;"
279,MEMBEREXPRESSION,"y",Freckles.java(95:5-95:6),"y"
280,DECLAREDREFERENCEEXPRESSION,"Y",Freckles.java(95:7-95:8),"Y"
281,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(95:5-95:6),"this"
282,MEMBEREXPRESSION,"x",Freckles.java(94:5-94:6),"x"
283,DECLAREDREFERENCEEXPRESSION,"X",Freckles.java(94:7-94:8),"X"
284,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(94:5-94:6),"this"
285,MEMBEREXPRESSION,"prev",Freckles.java(92:5-92:9),"prev"
286,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(92:10-92:14),"this"
287,VARIABLEDECLARATION,"this",,""
288,COMPOUNDSTATEMENT,"",Freckles.java(107:5-124:6),"{
    if(prev==this)
        return this;
    else
        {
        Freckles.rank++;
        prev=prev.FindParent();
        }
    if(prev!=this)
        {
        Freckles.rank++;
        Point parent=prev.FindParent();
        prev=parent;
        return parent;
        }
    return this;

    }"
289,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(108:8-108:12),"this"
290,RETURNSTATEMENT,"",Freckles.java(122:5-122:17),"return this;"
291,IFSTATEMENT,"",Freckles.java(108:5-114:10),"if(prev==this)
        return this;
    else
        {
        Freckles.rank++;
        prev=prev.FindParent();
        }"
292,IFSTATEMENT,"",Freckles.java(115:5-121:10),"if(prev!=this)
        {
        Freckles.rank++;
        Point parent=prev.FindParent();
        prev=parent;
        return parent;
        }"
293,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(122:12-122:16),"this"
294,BINARYOPERATOR,"!=",Freckles.java(115:8-115:18),"prev!=this"
295,COMPOUNDSTATEMENT,"",Freckles.java(116:9-121:10),"{
        Freckles.rank++;
        Point parent=prev.FindParent();
        prev=parent;
        return parent;
        }"
296,DECLAREDREFERENCEEXPRESSION,"Freckles",Freckles.java(117:9-117:17),"Freckles"
297,MEMBEREXPRESSION,"prev",Freckles.java(115:8-115:12),"prev"
298,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(115:14-115:18),"this"
299,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(115:8-115:12),"this"
300,COMPOUNDSTATEMENT,"",Freckles.java(111:9-114:10),"{
        Freckles.rank++;
        prev=prev.FindParent();
        }"
301,UNARYOPERATOR,"++",Freckles.java(117:9-117:25),"Freckles.rank++;"
302,DECLARATIONSTATEMENT,"",Freckles.java(118:9-118:40),"Point parent=prev.FindParent();"
303,BINARYOPERATOR,"=",Freckles.java(119:9-119:21),"prev=parent;"
304,RETURNSTATEMENT,"",Freckles.java(120:9-120:23),"return parent;"
305,VARIABLEDECLARATION,"parent",Freckles.java(118:15-118:39),"parent=prev.FindParent()"
306,MEMBERCALLEXPRESSION,"FindParent",Freckles.java(118:22-118:39),"prev.FindParent()"
307,DECLAREDREFERENCEEXPRESSION,"FindParent",Freckles.java(118:27-118:37),"FindParent"
308,MEMBEREXPRESSION,"prev",Freckles.java(118:22-118:26),"prev"
309,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(118:22-118:26),"this"
310,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(119:9-119:13),"this"
311,MEMBEREXPRESSION,"prev",Freckles.java(119:9-119:13),"prev"
312,DECLAREDREFERENCEEXPRESSION,"parent",Freckles.java(119:14-119:20),"parent"
313,DECLAREDREFERENCEEXPRESSION,"parent",Freckles.java(120:16-120:22),"parent"
314,MEMBEREXPRESSION,"rank",Freckles.java(117:9-117:22),"Freckles.rank"
315,BINARYOPERATOR,"==",Freckles.java(108:8-108:18),"prev==this"
316,RETURNSTATEMENT,"",Freckles.java(109:9-109:21),"return this;"
317,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(109:16-109:20),"this"
318,DECLAREDREFERENCEEXPRESSION,"Freckles",Freckles.java(112:9-112:17),"Freckles"
319,MEMBEREXPRESSION,"prev",Freckles.java(108:8-108:12),"prev"
320,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(108:14-108:18),"this"
321,UNARYOPERATOR,"++",Freckles.java(112:9-112:25),"Freckles.rank++;"
322,BINARYOPERATOR,"=",Freckles.java(113:9-113:32),"prev=prev.FindParent();"
323,MEMBEREXPRESSION,"rank",Freckles.java(112:9-112:22),"Freckles.rank"
324,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(113:9-113:13),"this"
325,MEMBEREXPRESSION,"prev",Freckles.java(113:9-113:13),"prev"
326,MEMBERCALLEXPRESSION,"FindParent",Freckles.java(113:14-113:31),"prev.FindParent()"
327,DECLAREDREFERENCEEXPRESSION,"FindParent",Freckles.java(113:19-113:29),"FindParent"
328,MEMBEREXPRESSION,"prev",Freckles.java(113:14-113:18),"prev"
329,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(113:14-113:18),"this"
330,VARIABLEDECLARATION,"this",,""
331,COMPOUNDSTATEMENT,"",Freckles.java(127:5-129:6),"{
    a.prev=this;
    }"
332,PARAMVARIABLEDECLARATION,"a",Freckles.java(126:28-126:35),"Point a"
333,DECLAREDREFERENCEEXPRESSION,"a",Freckles.java(128:5-128:6),"a"
334,RETURNSTATEMENT,"",,""
335,BINARYOPERATOR,"=",Freckles.java(128:5-128:17),"a.prev=this;"
336,MEMBEREXPRESSION,"prev",Freckles.java(128:5-128:11),"a.prev"
337,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(128:12-128:16),"this"
338,VARIABLEDECLARATION,"this",,""
339,COMPOUNDSTATEMENT,"",Freckles.java(98:5-105:6),"{
    if(a.x==x && a.y==y)
        return 0;
    else if(a.x>x)
        return -1;
    else
        return 1;
    }"
340,PARAMVARIABLEDECLARATION,"a",Freckles.java(97:26-97:33),"Point a"
341,DECLAREDREFERENCEEXPRESSION,"a",Freckles.java(99:8-99:9),"a"
342,RETURNSTATEMENT,"",,""
343,IFSTATEMENT,"",Freckles.java(99:5-104:18),"if(a.x==x && a.y==y)
        return 0;
    else if(a.x>x)
        return -1;
    else
        return 1;"
344,BINARYOPERATOR,"&&",Freckles.java(99:8-99:24),"a.x==x && a.y==y"
345,RETURNSTATEMENT,"",Freckles.java(100:9-100:18),"return 0;"
346,IFSTATEMENT,"",Freckles.java(101:10-104:18),"if(a.x>x)
        return -1;
    else
        return 1;"
347,LITERAL,"",Freckles.java(100:16-100:17),"0"
348,DECLAREDREFERENCEEXPRESSION,"a",Freckles.java(101:13-101:14),"a"
349,BINARYOPERATOR,"==",Freckles.java(99:8-99:14),"a.x==x"
350,BINARYOPERATOR,"==",Freckles.java(99:18-99:24),"a.y==y"
351,MEMBEREXPRESSION,"y",Freckles.java(99:18-99:21),"a.y"
352,MEMBEREXPRESSION,"y",Freckles.java(99:23-99:24),"y"
353,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(99:23-99:24),"this"
354,DECLAREDREFERENCEEXPRESSION,"a",Freckles.java(99:18-99:19),"a"
355,MEMBEREXPRESSION,"x",Freckles.java(99:8-99:11),"a.x"
356,MEMBEREXPRESSION,"x",Freckles.java(99:13-99:14),"x"
357,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(99:13-99:14),"this"
358,BINARYOPERATOR,">",Freckles.java(101:13-101:18),"a.x>x"
359,RETURNSTATEMENT,"",Freckles.java(102:9-102:19),"return -1;"
360,RETURNSTATEMENT,"",Freckles.java(104:9-104:18),"return 1;"
361,LITERAL,"",Freckles.java(102:17-102:18),"1"
362,LITERAL,"",Freckles.java(104:16-104:17),"1"
363,UNARYOPERATOR,"-",Freckles.java(102:16-102:18),"-1"
364,MEMBEREXPRESSION,"x",Freckles.java(101:13-101:16),"a.x"
365,MEMBEREXPRESSION,"x",Freckles.java(101:17-101:18),"x"
366,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(101:17-101:18),"this"
367,FIELDDECLARATION,"this",,""
368,FIELDDECLARATION,"a",Freckles.java(134:5-134:11),"a"
369,FIELDDECLARATION,"b",Freckles.java(135:5-135:11),"b"
370,FIELDDECLARATION,"d",Freckles.java(137:5-137:14),"d"
371,METHODDECLARATION,"compareTo",Freckles.java(146:1-155:6),"@Override
    public int compareTo(Link l)
    {
    if(l.d<d)
        return 1;
    else if(l.d>d)
        return -1;
    else
        return 0;
    }"
372,METHODDECLARATION,"toString",Freckles.java(156:5-159:6),"public String toString()
    {
    return new String(""(""+a+"",""+b+"",""+d+"")"");
    }"
373,CONSTRUCTORDECLARATION,"Link",Freckles.java(139:5-144:6),"Link(int A,int B,double D)
    {
    a=A;
    b=B;
    d=D;
    }"
374,VARIABLEDECLARATION,"this",,""
375,COMPOUNDSTATEMENT,"",Freckles.java(157:5-159:6),"{
    return new String(""(""+a+"",""+b+"",""+d+"")"");
    }"
376,LITERAL,"",Freckles.java(158:23-158:26),"""("""
377,RETURNSTATEMENT,"",Freckles.java(158:5-158:46),"return new String(""(""+a+"",""+b+"",""+d+"")"");"
378,NEWEXPRESSION,"",Freckles.java(158:12-158:45),"new String(""(""+a+"",""+b+"",""+d+"")"")"
379,CONSTRUCTEXPRESSION,"",Freckles.java(158:12-158:45),"new String(""(""+a+"",""+b+"",""+d+"")"")"
380,BINARYOPERATOR,"+",Freckles.java(158:23-158:44),"""(""+a+"",""+b+"",""+d+"")"""
381,BINARYOPERATOR,"+",Freckles.java(158:23-158:40),"""(""+a+"",""+b+"",""+d"
382,LITERAL,"",Freckles.java(158:41-158:44),""")"""
383,BINARYOPERATOR,"+",Freckles.java(158:23-158:38),"""(""+a+"",""+b+"","""
384,MEMBEREXPRESSION,"d",Freckles.java(158:39-158:40),"d"
385,BINARYOPERATOR,"+",Freckles.java(158:23-158:34),"""(""+a+"",""+b"
386,LITERAL,"",Freckles.java(158:35-158:38),""","""
387,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(158:39-158:40),"this"
388,BINARYOPERATOR,"+",Freckles.java(158:23-158:32),"""(""+a+"","""
389,MEMBEREXPRESSION,"b",Freckles.java(158:33-158:34),"b"
390,BINARYOPERATOR,"+",Freckles.java(158:23-158:28),"""(""+a"
391,LITERAL,"",Freckles.java(158:29-158:32),""","""
392,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(158:33-158:34),"this"
393,MEMBEREXPRESSION,"a",Freckles.java(158:27-158:28),"a"
394,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(158:27-158:28),"this"
395,COMPOUNDSTATEMENT,"",Freckles.java(140:5-144:6),"{
    a=A;
    b=B;
    d=D;
    }"
396,PARAMVARIABLEDECLARATION,"A",Freckles.java(139:10-139:15),"int A"
397,PARAMVARIABLEDECLARATION,"B",Freckles.java(139:16-139:21),"int B"
398,PARAMVARIABLEDECLARATION,"D",Freckles.java(139:22-139:30),"double D"
399,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(141:5-141:6),"this"
400,RETURNSTATEMENT,"",,""
401,BINARYOPERATOR,"=",Freckles.java(141:5-141:9),"a=A;"
402,BINARYOPERATOR,"=",Freckles.java(142:5-142:9),"b=B;"
403,BINARYOPERATOR,"=",Freckles.java(143:5-143:9),"d=D;"
404,MEMBEREXPRESSION,"d",Freckles.java(143:5-143:6),"d"
405,DECLAREDREFERENCEEXPRESSION,"D",Freckles.java(143:7-143:8),"D"
406,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(143:5-143:6),"this"
407,MEMBEREXPRESSION,"b",Freckles.java(142:5-142:6),"b"
408,DECLAREDREFERENCEEXPRESSION,"B",Freckles.java(142:7-142:8),"B"
409,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(142:5-142:6),"this"
410,MEMBEREXPRESSION,"a",Freckles.java(141:5-141:6),"a"
411,DECLAREDREFERENCEEXPRESSION,"A",Freckles.java(141:7-141:8),"A"
412,VARIABLEDECLARATION,"this",,""
413,COMPOUNDSTATEMENT,"",Freckles.java(148:5-155:6),"{
    if(l.d<d)
        return 1;
    else if(l.d>d)
        return -1;
    else
        return 0;
    }"
414,PARAMVARIABLEDECLARATION,"l",Freckles.java(147:26-147:32),"Link l"
415,DECLAREDREFERENCEEXPRESSION,"l",Freckles.java(149:8-149:9),"l"
416,RETURNSTATEMENT,"",,""
417,IFSTATEMENT,"",Freckles.java(149:5-154:18),"if(l.d<d)
        return 1;
    else if(l.d>d)
        return -1;
    else
        return 0;"
418,BINARYOPERATOR,"<",Freckles.java(149:8-149:13),"l.d<d"
419,RETURNSTATEMENT,"",Freckles.java(150:9-150:18),"return 1;"
420,IFSTATEMENT,"",Freckles.java(151:10-154:18),"if(l.d>d)
        return -1;
    else
        return 0;"
421,LITERAL,"",Freckles.java(150:16-150:17),"1"
422,DECLAREDREFERENCEEXPRESSION,"l",Freckles.java(151:13-151:14),"l"
423,BINARYOPERATOR,">",Freckles.java(151:13-151:18),"l.d>d"
424,RETURNSTATEMENT,"",Freckles.java(152:9-152:19),"return -1;"
425,RETURNSTATEMENT,"",Freckles.java(154:9-154:18),"return 0;"
426,LITERAL,"",Freckles.java(152:17-152:18),"1"
427,LITERAL,"",Freckles.java(154:16-154:17),"0"
428,MEMBEREXPRESSION,"d",Freckles.java(151:13-151:16),"l.d"
429,MEMBEREXPRESSION,"d",Freckles.java(151:17-151:18),"d"
430,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(151:17-151:18),"this"
431,UNARYOPERATOR,"-",Freckles.java(152:16-152:18),"-1"
432,MEMBEREXPRESSION,"d",Freckles.java(149:8-149:11),"l.d"
433,MEMBEREXPRESSION,"d",Freckles.java(149:12-149:13),"d"
434,DECLAREDREFERENCEEXPRESSION,"this",Freckles.java(149:12-149:13),"this"

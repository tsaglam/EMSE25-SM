id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07779631_21_200908475/prob21.java",,""
2,RECORDDECLARATION,"Node",prob21.java(8:1-24:2),"class Node implements Comparable<Node>{
	double w;
	int from; 
	int to; 

	Node(double w, int from, int to){
		this.w = w;
		this.from = from;
		this.to = to;
	}

	public int compareTo(Node o) {
		
		return Double.compare(this.w, o.w);
	}

}"
3,RECORDDECLARATION,"prob21",prob21.java(27:1-123:2),"public class prob21{
	static List<Node> nodelist;
	static int n;
	static int [] pset;
	static int [] rank;

	//create the set
	static void makeSet(int n1){
		pset = new int[n1];
		rank = new int[n1];
		for(int i = 0; i < n1; i++){
			pset[i] = i;
			rank[i] = 0;
		}
	}

	//search the set
	static int findSet(int i){
		if(i!=pset[i]) {
			pset[i] = findSet(pset[i]);
		}
		return pset[i];
	}

	//is it the same set?

	static boolean isSameSet(int i, int j){
		return findSet(i) == findSet(j);

	}

	//Union.

	static void Union(int i, int j){
		int xRz = findSet(i);
		int yRz = findSet(j);


		if(rank[xRz] > rank[yRz])
			pset[yRz] = xRz;
		else {
			pset[xRz] = yRz;
			if(rank[xRz] == rank[yRz])
				++rank[yRz];
		}


	}

	//algoritmo de kruskall
	static double kruskall(){

		double cost = 0;
		makeSet(n);
		Collections.sort(nodelist);
		for(int i = 0; i < nodelist.size(); ++i){
			Node node = nodelist.get(i);
			if(!isSameSet(node.from, node.to)) {
				Union(node.from, node.to);
				cost += node.w;
			}
		}
		return cost;
	}


	public static void main(String [] args) throws IOException {
		Scanner in = new Scanner(System.in);

		n = in.nextInt();
		double [] xcord = new double[n]; 
		double [] ycord = new double[n]; 
		nodelist = new ArrayList<Node>();

		//splits the string and transforms into doubles
		for(int i = 0; i < n; ++i){
			xcord[i]=in.nextDouble();
			ycord[i]=in.nextDouble();
		}

		for (int i = 0; i < n-1; ++i){
			for(int j = i+1; j < n; ++j){
				double dx = xcord[i] - xcord[j];
				double dy = ycord[i] - ycord[j];
				double d = Math.sqrt(dx*dx + dy*dy);

				nodelist.add(new Node(d,i,j));
				nodelist.add(new Node(d,j,i));
			}
		}
		System.out.println(String.format(""%.2f"", kruskall()));
	}

	


}"
4,INCLUDEDECLARATION,"java.io",,""
5,INCLUDEDECLARATION,"java.util",,""
6,FIELDDECLARATION,"this",,""
7,FIELDDECLARATION,"w",prob21.java(9:2-9:11),"w"
8,FIELDDECLARATION,"from",prob21.java(10:2-10:11),"from"
9,FIELDDECLARATION,"to",prob21.java(11:2-11:9),"to"
10,METHODDECLARATION,"compareTo",prob21.java(19:2-22:3),"public int compareTo(Node o) {
		
		return Double.compare(this.w, o.w);
	}"
11,CONSTRUCTORDECLARATION,"Node",prob21.java(13:2-17:3),"Node(double w, int from, int to){
		this.w = w;
		this.from = from;
		this.to = to;
	}"
12,VARIABLEDECLARATION,"this",,""
13,COMPOUNDSTATEMENT,"",prob21.java(19:31-22:3),"{
		
		return Double.compare(this.w, o.w);
	}"
14,PARAMVARIABLEDECLARATION,"o",prob21.java(19:23-19:29),"Node o"
15,DECLAREDREFERENCEEXPRESSION,"this",prob21.java(21:25-21:29),"this"
16,RETURNSTATEMENT,"",prob21.java(21:3-21:38),"return Double.compare(this.w, o.w);"
17,STATICCALLEXPRESSION,"compare",prob21.java(21:10-21:37),"Double.compare(this.w, o.w)"
18,MEMBEREXPRESSION,"w",prob21.java(21:33-21:36),"o.w"
19,MEMBEREXPRESSION,"w",prob21.java(21:25-21:31),"this.w"
20,DECLAREDREFERENCEEXPRESSION,"o",prob21.java(21:33-21:34),"o"
21,COMPOUNDSTATEMENT,"",prob21.java(13:34-17:3),"{
		this.w = w;
		this.from = from;
		this.to = to;
	}"
22,PARAMVARIABLEDECLARATION,"w",prob21.java(13:7-13:15),"double w"
23,PARAMVARIABLEDECLARATION,"from",prob21.java(13:17-13:25),"int from"
24,PARAMVARIABLEDECLARATION,"to",prob21.java(13:27-13:33),"int to"
25,DECLAREDREFERENCEEXPRESSION,"this",prob21.java(14:3-14:7),"this"
26,RETURNSTATEMENT,"",,""
27,BINARYOPERATOR,"=",prob21.java(14:3-14:14),"this.w = w;"
28,BINARYOPERATOR,"=",prob21.java(15:3-15:20),"this.from = from;"
29,BINARYOPERATOR,"=",prob21.java(16:3-16:16),"this.to = to;"
30,MEMBEREXPRESSION,"to",prob21.java(16:3-16:10),"this.to"
31,DECLAREDREFERENCEEXPRESSION,"to",prob21.java(16:13-16:15),"to"
32,DECLAREDREFERENCEEXPRESSION,"this",prob21.java(16:3-16:7),"this"
33,MEMBEREXPRESSION,"from",prob21.java(15:3-15:12),"this.from"
34,DECLAREDREFERENCEEXPRESSION,"from",prob21.java(15:15-15:19),"from"
35,DECLAREDREFERENCEEXPRESSION,"this",prob21.java(15:3-15:7),"this"
36,MEMBEREXPRESSION,"w",prob21.java(14:3-14:9),"this.w"
37,DECLAREDREFERENCEEXPRESSION,"w",prob21.java(14:12-14:13),"w"
38,FIELDDECLARATION,"this",,""
39,FIELDDECLARATION,"nodelist",prob21.java(28:2-28:29),"nodelist"
40,FIELDDECLARATION,"n",prob21.java(29:2-29:15),"n"
41,FIELDDECLARATION,"pset",prob21.java(30:2-30:21),"pset"
42,FIELDDECLARATION,"rank",prob21.java(31:2-31:21),"rank"
43,METHODDECLARATION,"makeSet",prob21.java(34:2-41:3),"static void makeSet(int n1){
		pset = new int[n1];
		rank = new int[n1];
		for(int i = 0; i < n1; i++){
			pset[i] = i;
			rank[i] = 0;
		}
	}"
44,METHODDECLARATION,"findSet",prob21.java(44:2-49:3),"static int findSet(int i){
		if(i!=pset[i]) {
			pset[i] = findSet(pset[i]);
		}
		return pset[i];
	}"
45,METHODDECLARATION,"isSameSet",prob21.java(53:2-56:3),"static boolean isSameSet(int i, int j){
		return findSet(i) == findSet(j);

	}"
46,METHODDECLARATION,"Union",prob21.java(60:2-74:3),"static void Union(int i, int j){
		int xRz = findSet(i);
		int yRz = findSet(j);


		if(rank[xRz] > rank[yRz])
			pset[yRz] = xRz;
		else {
			pset[xRz] = yRz;
			if(rank[xRz] == rank[yRz])
				++rank[yRz];
		}


	}"
47,METHODDECLARATION,"kruskall",prob21.java(77:2-90:3),"static double kruskall(){

		double cost = 0;
		makeSet(n);
		Collections.sort(nodelist);
		for(int i = 0; i < nodelist.size(); ++i){
			Node node = nodelist.get(i);
			if(!isSameSet(node.from, node.to)) {
				Union(node.from, node.to);
				cost += node.w;
			}
		}
		return cost;
	}"
48,METHODDECLARATION,"main",prob21.java(93:2-118:3),"public static void main(String [] args) throws IOException {
		Scanner in = new Scanner(System.in);

		n = in.nextInt();
		double [] xcord = new double[n]; 
		double [] ycord = new double[n]; 
		nodelist = new ArrayList<Node>();

		//splits the string and transforms into doubles
		for(int i = 0; i < n; ++i){
			xcord[i]=in.nextDouble();
			ycord[i]=in.nextDouble();
		}

		for (int i = 0; i < n-1; ++i){
			for(int j = i+1; j < n; ++j){
				double dx = xcord[i] - xcord[j];
				double dy = ycord[i] - ycord[j];
				double d = Math.sqrt(dx*dx + dy*dy);

				nodelist.add(new Node(d,i,j));
				nodelist.add(new Node(d,j,i));
			}
		}
		System.out.println(String.format(""%.2f"", kruskall()));
	}"
49,CONSTRUCTORDECLARATION,"prob21",,""
50,VARIABLEDECLARATION,"this",,""
51,COMPOUNDSTATEMENT,"",prob21.java(60:33-74:3),"{
		int xRz = findSet(i);
		int yRz = findSet(j);


		if(rank[xRz] > rank[yRz])
			pset[yRz] = xRz;
		else {
			pset[xRz] = yRz;
			if(rank[xRz] == rank[yRz])
				++rank[yRz];
		}


	}"
52,PARAMVARIABLEDECLARATION,"i",prob21.java(60:20-60:25),"int i"
53,PARAMVARIABLEDECLARATION,"j",prob21.java(60:27-60:32),"int j"
54,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(61:21-61:22),"i"
55,RETURNSTATEMENT,"",,""
56,DECLARATIONSTATEMENT,"",prob21.java(61:3-61:24),"int xRz = findSet(i);"
57,DECLARATIONSTATEMENT,"",prob21.java(62:3-62:24),"int yRz = findSet(j);"
58,IFSTATEMENT,"",prob21.java(65:3-71:4),"if(rank[xRz] > rank[yRz])
			pset[yRz] = xRz;
		else {
			pset[xRz] = yRz;
			if(rank[xRz] == rank[yRz])
				++rank[yRz];
		}"
59,VARIABLEDECLARATION,"xRz",prob21.java(61:7-61:23),"xRz = findSet(i)"
60,VARIABLEDECLARATION,"yRz",prob21.java(62:7-62:23),"yRz = findSet(j)"
61,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(62:21-62:22),"j"
62,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(65:6-65:10),"prob21"
63,CALLEXPRESSION,"findSet",prob21.java(62:13-62:23),"findSet(j)"
64,METHODDECLARATION,"findSet",,""
65,PARAMVARIABLEDECLARATION,"int0",,""
66,BINARYOPERATOR,"=",prob21.java(66:4-66:20),"pset[yRz] = xRz;"
67,COMPOUNDSTATEMENT,"",prob21.java(67:8-71:4),"{
			pset[xRz] = yRz;
			if(rank[xRz] == rank[yRz])
				++rank[yRz];
		}"
68,CALLEXPRESSION,"findSet",prob21.java(61:13-61:23),"findSet(i)"
69,BINARYOPERATOR,">",prob21.java(65:6-65:27),"rank[xRz] > rank[yRz]"
70,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(66:4-66:8),"prob21"
71,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(68:4-68:8),"prob21"
72,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(65:6-65:15),"rank[xRz]"
73,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(65:18-65:27),"rank[yRz]"
74,MEMBEREXPRESSION,"rank",prob21.java(65:6-65:10),"rank"
75,DECLAREDREFERENCEEXPRESSION,"xRz",prob21.java(65:11-65:14),"xRz"
76,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(65:18-65:22),"prob21"
77,MEMBEREXPRESSION,"rank",prob21.java(65:18-65:22),"rank"
78,DECLAREDREFERENCEEXPRESSION,"yRz",prob21.java(65:23-65:26),"yRz"
79,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(66:4-66:13),"pset[yRz]"
80,DECLAREDREFERENCEEXPRESSION,"xRz",prob21.java(66:16-66:19),"xRz"
81,MEMBEREXPRESSION,"pset",prob21.java(66:4-66:8),"pset"
82,DECLAREDREFERENCEEXPRESSION,"yRz",prob21.java(66:9-66:12),"yRz"
83,BINARYOPERATOR,"=",prob21.java(68:4-68:20),"pset[xRz] = yRz;"
84,IFSTATEMENT,"",prob21.java(69:4-70:17),"if(rank[xRz] == rank[yRz])
				++rank[yRz];"
85,UNARYOPERATOR,"++",prob21.java(70:5-70:17),"++rank[yRz];"
86,BINARYOPERATOR,"==",prob21.java(69:7-69:29),"rank[xRz] == rank[yRz]"
87,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(70:7-70:11),"prob21"
88,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(69:7-69:16),"rank[xRz]"
89,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(69:20-69:29),"rank[yRz]"
90,MEMBEREXPRESSION,"rank",prob21.java(69:7-69:11),"rank"
91,DECLAREDREFERENCEEXPRESSION,"xRz",prob21.java(69:12-69:15),"xRz"
92,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(69:20-69:24),"prob21"
93,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(69:7-69:11),"prob21"
94,MEMBEREXPRESSION,"rank",prob21.java(69:20-69:24),"rank"
95,DECLAREDREFERENCEEXPRESSION,"yRz",prob21.java(69:25-69:28),"yRz"
96,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(70:7-70:16),"rank[yRz]"
97,MEMBEREXPRESSION,"rank",prob21.java(70:7-70:11),"rank"
98,DECLAREDREFERENCEEXPRESSION,"yRz",prob21.java(70:12-70:15),"yRz"
99,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(68:4-68:13),"pset[xRz]"
100,DECLAREDREFERENCEEXPRESSION,"yRz",prob21.java(68:16-68:19),"yRz"
101,MEMBEREXPRESSION,"pset",prob21.java(68:4-68:8),"pset"
102,DECLAREDREFERENCEEXPRESSION,"xRz",prob21.java(68:9-68:12),"xRz"
103,VARIABLEDECLARATION,"this",,""
104,COMPOUNDSTATEMENT,"",prob21.java(77:26-90:3),"{

		double cost = 0;
		makeSet(n);
		Collections.sort(nodelist);
		for(int i = 0; i < nodelist.size(); ++i){
			Node node = nodelist.get(i);
			if(!isSameSet(node.from, node.to)) {
				Union(node.from, node.to);
				cost += node.w;
			}
		}
		return cost;
	}"
105,LITERAL,"",prob21.java(79:17-79:18),"0"
106,RETURNSTATEMENT,"",prob21.java(89:3-89:15),"return cost;"
107,DECLARATIONSTATEMENT,"",prob21.java(79:3-79:19),"double cost = 0;"
108,CALLEXPRESSION,"makeSet",prob21.java(80:3-80:14),"makeSet(n);"
109,STATICCALLEXPRESSION,"sort",prob21.java(81:3-81:30),"Collections.sort(nodelist);"
110,FORSTATEMENT,"",prob21.java(82:3-88:4),"for(int i = 0; i < nodelist.size(); ++i){
			Node node = nodelist.get(i);
			if(!isSameSet(node.from, node.to)) {
				Union(node.from, node.to);
				cost += node.w;
			}
		}"
111,VARIABLEDECLARATION,"cost",prob21.java(79:10-79:18),"cost = 0"
112,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(80:11-80:12),"prob21"
113,LITERAL,"",prob21.java(82:15-82:16),"0"
114,MEMBEREXPRESSION,"nodelist",prob21.java(81:20-81:28),"nodelist"
115,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(81:20-81:28),"prob21"
116,METHODDECLARATION,"makeSet",,""
117,MEMBEREXPRESSION,"n",prob21.java(80:11-80:12),"n"
118,PARAMVARIABLEDECLARATION,"int0",,""
119,DECLAREDREFERENCEEXPRESSION,"cost",prob21.java(89:10-89:14),"cost"
120,COMPOUNDSTATEMENT,"",prob21.java(82:43-88:4),"{
			Node node = nodelist.get(i);
			if(!isSameSet(node.from, node.to)) {
				Union(node.from, node.to);
				cost += node.w;
			}
		}"
121,DECLARATIONSTATEMENT,"",prob21.java(82:7-82:16),"int i = 0"
122,BINARYOPERATOR,"<",prob21.java(82:18-82:37),"i < nodelist.size()"
123,UNARYOPERATOR,"++",prob21.java(82:39-82:42),"++i"
124,VARIABLEDECLARATION,"i",prob21.java(82:11-82:16),"i = 0"
125,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(83:16-83:24),"prob21"
126,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(82:18-82:19),"i"
127,MEMBERCALLEXPRESSION,"size",prob21.java(82:22-82:37),"nodelist.size()"
128,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(82:22-82:30),"prob21"
129,DECLAREDREFERENCEEXPRESSION,"size",prob21.java(82:31-82:35),"size"
130,MEMBEREXPRESSION,"nodelist",prob21.java(82:22-82:30),"nodelist"
131,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(82:41-82:42),"i"
132,DECLARATIONSTATEMENT,"",prob21.java(83:4-83:32),"Node node = nodelist.get(i);"
133,IFSTATEMENT,"",prob21.java(84:4-87:5),"if(!isSameSet(node.from, node.to)) {
				Union(node.from, node.to);
				cost += node.w;
			}"
134,VARIABLEDECLARATION,"node",prob21.java(83:9-83:31),"node = nodelist.get(i)"
135,COMPOUNDSTATEMENT,"",prob21.java(84:39-87:5),"{
				Union(node.from, node.to);
				cost += node.w;
			}"
136,MEMBERCALLEXPRESSION,"get",prob21.java(83:16-83:31),"nodelist.get(i)"
137,DECLAREDREFERENCEEXPRESSION,"get",prob21.java(83:25-83:28),"get"
138,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(83:29-83:30),"i"
139,MEMBEREXPRESSION,"nodelist",prob21.java(83:16-83:24),"nodelist"
140,UNARYOPERATOR,"!",prob21.java(84:7-84:37),"!isSameSet(node.from, node.to)"
141,DECLAREDREFERENCEEXPRESSION,"node",prob21.java(85:11-85:15),"node"
142,CALLEXPRESSION,"isSameSet",prob21.java(84:8-84:37),"isSameSet(node.from, node.to)"
143,METHODDECLARATION,"isSameSet",,""
144,MEMBEREXPRESSION,"from",prob21.java(84:18-84:27),"node.from"
145,MEMBEREXPRESSION,"to",prob21.java(84:29-84:36),"node.to"
146,DECLAREDREFERENCEEXPRESSION,"node",prob21.java(84:29-84:33),"node"
147,PARAMVARIABLEDECLARATION,"int1",,""
148,DECLAREDREFERENCEEXPRESSION,"node",prob21.java(84:18-84:22),"node"
149,PARAMVARIABLEDECLARATION,"int0",,""
150,CALLEXPRESSION,"Union",prob21.java(85:5-85:31),"Union(node.from, node.to);"
151,BINARYOPERATOR,"+=",prob21.java(86:5-86:20),"cost += node.w;"
152,DECLAREDREFERENCEEXPRESSION,"cost",prob21.java(86:5-86:9),"cost"
153,MEMBEREXPRESSION,"w",prob21.java(86:13-86:19),"node.w"
154,DECLAREDREFERENCEEXPRESSION,"node",prob21.java(86:13-86:17),"node"
155,METHODDECLARATION,"Union",,""
156,MEMBEREXPRESSION,"from",prob21.java(85:11-85:20),"node.from"
157,MEMBEREXPRESSION,"to",prob21.java(85:22-85:29),"node.to"
158,DECLAREDREFERENCEEXPRESSION,"node",prob21.java(85:22-85:26),"node"
159,PARAMVARIABLEDECLARATION,"int1",,""
160,PARAMVARIABLEDECLARATION,"int0",,""
161,VARIABLEDECLARATION,"this",,""
162,COMPOUNDSTATEMENT,"",prob21.java(53:40-56:3),"{
		return findSet(i) == findSet(j);

	}"
163,PARAMVARIABLEDECLARATION,"i",prob21.java(53:27-53:32),"int i"
164,PARAMVARIABLEDECLARATION,"j",prob21.java(53:34-53:39),"int j"
165,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(54:18-54:19),"i"
166,RETURNSTATEMENT,"",prob21.java(54:3-54:35),"return findSet(i) == findSet(j);"
167,BINARYOPERATOR,"==",prob21.java(54:10-54:34),"findSet(i) == findSet(j)"
168,CALLEXPRESSION,"findSet",prob21.java(54:10-54:20),"findSet(i)"
169,CALLEXPRESSION,"findSet",prob21.java(54:24-54:34),"findSet(j)"
170,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(54:32-54:33),"j"
171,VARIABLEDECLARATION,"this",,""
172,COMPOUNDSTATEMENT,"",prob21.java(93:61-118:3),"{
		Scanner in = new Scanner(System.in);

		n = in.nextInt();
		double [] xcord = new double[n]; 
		double [] ycord = new double[n]; 
		nodelist = new ArrayList<Node>();

		//splits the string and transforms into doubles
		for(int i = 0; i < n; ++i){
			xcord[i]=in.nextDouble();
			ycord[i]=in.nextDouble();
		}

		for (int i = 0; i < n-1; ++i){
			for(int j = i+1; j < n; ++j){
				double dx = xcord[i] - xcord[j];
				double dy = ycord[i] - ycord[j];
				double d = Math.sqrt(dx*dx + dy*dy);

				nodelist.add(new Node(d,i,j));
				nodelist.add(new Node(d,j,i));
			}
		}
		System.out.println(String.format(""%.2f"", kruskall()));
	}"
173,PARAMVARIABLEDECLARATION,"args",prob21.java(93:26-93:40),"String [] args"
174,OBJECTTYPE,"IOException",,""
175,DECLAREDREFERENCEEXPRESSION,"System",prob21.java(94:28-94:34),"System"
176,RETURNSTATEMENT,"",,""
177,DECLARATIONSTATEMENT,"",prob21.java(94:3-94:39),"Scanner in = new Scanner(System.in);"
178,BINARYOPERATOR,"=",prob21.java(96:3-96:20),"n = in.nextInt();"
179,DECLARATIONSTATEMENT,"",prob21.java(97:3-97:35),"double [] xcord = new double[n];"
180,DECLARATIONSTATEMENT,"",prob21.java(98:3-98:35),"double [] ycord = new double[n];"
181,BINARYOPERATOR,"=",prob21.java(99:3-99:36),"nodelist = new ArrayList<Node>();"
182,FORSTATEMENT,"",prob21.java(102:3-105:4),"for(int i = 0; i < n; ++i){
			xcord[i]=in.nextDouble();
			ycord[i]=in.nextDouble();
		}"
183,FORSTATEMENT,"",prob21.java(107:3-116:4),"for (int i = 0; i < n-1; ++i){
			for(int j = i+1; j < n; ++j){
				double dx = xcord[i] - xcord[j];
				double dy = ycord[i] - ycord[j];
				double d = Math.sqrt(dx*dx + dy*dy);

				nodelist.add(new Node(d,i,j));
				nodelist.add(new Node(d,j,i));
			}
		}"
184,MEMBERCALLEXPRESSION,"println",prob21.java(117:3-117:57),"System.out.println(String.format(""%.2f"", kruskall()));"
185,VARIABLEDECLARATION,"in",prob21.java(94:11-94:38),"in = new Scanner(System.in)"
186,VARIABLEDECLARATION,"xcord",prob21.java(97:13-97:34),"xcord = new double[n]"
187,VARIABLEDECLARATION,"ycord",prob21.java(98:13-98:34),"ycord = new double[n]"
188,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(99:3-99:11),"prob21"
189,DECLAREDREFERENCEEXPRESSION,"println",prob21.java(117:14-117:21),"println"
190,STATICCALLEXPRESSION,"format",prob21.java(117:22-117:55),"String.format(""%.2f"", kruskall())"
191,MEMBEREXPRESSION,"out",prob21.java(117:3-117:13),"System.out"
192,DECLAREDREFERENCEEXPRESSION,"System",prob21.java(117:3-117:9),"System"
193,LITERAL,"",prob21.java(117:36-117:42),"""%.2f"""
194,CALLEXPRESSION,"kruskall",prob21.java(117:44-117:54),"kruskall()"
195,METHODDECLARATION,"kruskall",,""
196,NEWEXPRESSION,"",prob21.java(94:16-94:38),"new Scanner(System.in)"
197,CONSTRUCTEXPRESSION,"",prob21.java(94:16-94:38),"new Scanner(System.in)"
198,MEMBEREXPRESSION,"in",prob21.java(94:28-94:37),"System.in"
199,MEMBEREXPRESSION,"nodelist",prob21.java(99:3-99:11),"nodelist"
200,NEWEXPRESSION,"",prob21.java(99:14-99:35),"new ArrayList<Node>()"
201,LITERAL,"",prob21.java(102:15-102:16),"0"
202,CONSTRUCTEXPRESSION,"",prob21.java(99:14-99:35),"new ArrayList<Node>()"
203,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(96:3-96:4),"prob21"
204,ARRAYCREATIONEXPRESSION,"",prob21.java(97:21-97:34),"new double[n]"
205,MEMBEREXPRESSION,"n",prob21.java(97:32-97:33),"n"
206,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(97:32-97:33),"prob21"
207,MEMBEREXPRESSION,"n",prob21.java(96:3-96:4),"n"
208,MEMBERCALLEXPRESSION,"nextInt",prob21.java(96:7-96:19),"in.nextInt()"
209,DECLAREDREFERENCEEXPRESSION,"nextInt",prob21.java(96:10-96:17),"nextInt"
210,DECLAREDREFERENCEEXPRESSION,"in",prob21.java(96:7-96:9),"in"
211,COMPOUNDSTATEMENT,"",prob21.java(107:32-116:4),"{
			for(int j = i+1; j < n; ++j){
				double dx = xcord[i] - xcord[j];
				double dy = ycord[i] - ycord[j];
				double d = Math.sqrt(dx*dx + dy*dy);

				nodelist.add(new Node(d,i,j));
				nodelist.add(new Node(d,j,i));
			}
		}"
212,DECLARATIONSTATEMENT,"",prob21.java(107:8-107:17),"int i = 0"
213,BINARYOPERATOR,"<",prob21.java(107:19-107:26),"i < n-1"
214,UNARYOPERATOR,"++",prob21.java(107:28-107:31),"++i"
215,VARIABLEDECLARATION,"i",prob21.java(107:12-107:17),"i = 0"
216,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(108:16-108:17),"i"
217,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(107:19-107:20),"i"
218,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(107:30-107:31),"i"
219,LITERAL,"",prob21.java(107:16-107:17),"0"
220,BINARYOPERATOR,"-",prob21.java(107:23-107:26),"n-1"
221,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(107:23-107:24),"prob21"
222,MEMBEREXPRESSION,"n",prob21.java(107:23-107:24),"n"
223,LITERAL,"",prob21.java(107:25-107:26),"1"
224,FORSTATEMENT,"",prob21.java(108:4-115:5),"for(int j = i+1; j < n; ++j){
				double dx = xcord[i] - xcord[j];
				double dy = ycord[i] - ycord[j];
				double d = Math.sqrt(dx*dx + dy*dy);

				nodelist.add(new Node(d,i,j));
				nodelist.add(new Node(d,j,i));
			}"
225,COMPOUNDSTATEMENT,"",prob21.java(108:32-115:5),"{
				double dx = xcord[i] - xcord[j];
				double dy = ycord[i] - ycord[j];
				double d = Math.sqrt(dx*dx + dy*dy);

				nodelist.add(new Node(d,i,j));
				nodelist.add(new Node(d,j,i));
			}"
226,DECLARATIONSTATEMENT,"",prob21.java(108:8-108:19),"int j = i+1"
227,BINARYOPERATOR,"<",prob21.java(108:21-108:26),"j < n"
228,UNARYOPERATOR,"++",prob21.java(108:28-108:31),"++j"
229,VARIABLEDECLARATION,"j",prob21.java(108:12-108:19),"j = i+1"
230,DECLAREDREFERENCEEXPRESSION,"xcord",prob21.java(109:17-109:22),"xcord"
231,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(108:21-108:22),"j"
232,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(108:30-108:31),"j"
233,BINARYOPERATOR,"+",prob21.java(108:16-108:19),"i+1"
234,LITERAL,"",prob21.java(108:18-108:19),"1"
235,DECLARATIONSTATEMENT,"",prob21.java(109:5-109:37),"double dx = xcord[i] - xcord[j];"
236,DECLARATIONSTATEMENT,"",prob21.java(110:5-110:37),"double dy = ycord[i] - ycord[j];"
237,DECLARATIONSTATEMENT,"",prob21.java(111:5-111:41),"double d = Math.sqrt(dx*dx + dy*dy);"
238,MEMBERCALLEXPRESSION,"add",prob21.java(113:5-113:35),"nodelist.add(new Node(d,i,j));"
239,MEMBERCALLEXPRESSION,"add",prob21.java(114:5-114:35),"nodelist.add(new Node(d,j,i));"
240,VARIABLEDECLARATION,"dx",prob21.java(109:12-109:36),"dx = xcord[i] - xcord[j]"
241,VARIABLEDECLARATION,"dy",prob21.java(110:12-110:36),"dy = ycord[i] - ycord[j]"
242,VARIABLEDECLARATION,"d",prob21.java(111:12-111:40),"d = Math.sqrt(dx*dx + dy*dy)"
243,BINARYOPERATOR,"-",prob21.java(110:17-110:36),"ycord[i] - ycord[j]"
244,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(110:17-110:25),"ycord[i]"
245,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(110:28-110:36),"ycord[j]"
246,DECLAREDREFERENCEEXPRESSION,"ycord",prob21.java(110:28-110:33),"ycord"
247,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(110:34-110:35),"j"
248,DECLAREDREFERENCEEXPRESSION,"ycord",prob21.java(110:17-110:22),"ycord"
249,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(110:23-110:24),"i"
250,BINARYOPERATOR,"-",prob21.java(109:17-109:36),"xcord[i] - xcord[j]"
251,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(109:17-109:25),"xcord[i]"
252,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(109:28-109:36),"xcord[j]"
253,DECLAREDREFERENCEEXPRESSION,"xcord",prob21.java(109:28-109:33),"xcord"
254,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(109:34-109:35),"j"
255,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(109:23-109:24),"i"
256,DECLAREDREFERENCEEXPRESSION,"add",prob21.java(114:14-114:17),"add"
257,NEWEXPRESSION,"",prob21.java(114:18-114:33),"new Node(d,j,i)"
258,MEMBEREXPRESSION,"nodelist",prob21.java(114:5-114:13),"nodelist"
259,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(114:5-114:13),"prob21"
260,DECLAREDREFERENCEEXPRESSION,"d",prob21.java(114:27-114:28),"d"
261,CONSTRUCTEXPRESSION,"",prob21.java(114:18-114:33),"new Node(d,j,i)"
262,CONSTRUCTORDECLARATION,"Node",,""
263,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(114:31-114:32),"i"
264,PARAMVARIABLEDECLARATION,"int2",,""
265,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(114:29-114:30),"j"
266,PARAMVARIABLEDECLARATION,"int1",,""
267,PARAMVARIABLEDECLARATION,"double0",,""
268,DECLAREDREFERENCEEXPRESSION,"add",prob21.java(113:14-113:17),"add"
269,NEWEXPRESSION,"",prob21.java(113:18-113:33),"new Node(d,i,j)"
270,CONSTRUCTEXPRESSION,"",prob21.java(113:18-113:33),"new Node(d,i,j)"
271,DECLAREDREFERENCEEXPRESSION,"j",prob21.java(113:31-113:32),"j"
272,DECLAREDREFERENCEEXPRESSION,"d",prob21.java(113:27-113:28),"d"
273,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(113:29-113:30),"i"
274,MEMBEREXPRESSION,"nodelist",prob21.java(113:5-113:13),"nodelist"
275,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(113:5-113:13),"prob21"
276,DECLAREDREFERENCEEXPRESSION,"dx",prob21.java(111:26-111:28),"dx"
277,STATICCALLEXPRESSION,"sqrt",prob21.java(111:16-111:40),"Math.sqrt(dx*dx + dy*dy)"
278,BINARYOPERATOR,"+",prob21.java(111:26-111:39),"dx*dx + dy*dy"
279,BINARYOPERATOR,"*",prob21.java(111:26-111:31),"dx*dx"
280,BINARYOPERATOR,"*",prob21.java(111:34-111:39),"dy*dy"
281,DECLAREDREFERENCEEXPRESSION,"dx",prob21.java(111:29-111:31),"dx"
282,DECLAREDREFERENCEEXPRESSION,"dy",prob21.java(111:34-111:36),"dy"
283,DECLAREDREFERENCEEXPRESSION,"dy",prob21.java(111:37-111:39),"dy"
284,MEMBEREXPRESSION,"n",prob21.java(108:25-108:26),"n"
285,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(108:25-108:26),"prob21"
286,ARRAYCREATIONEXPRESSION,"",prob21.java(98:21-98:34),"new double[n]"
287,MEMBEREXPRESSION,"n",prob21.java(98:32-98:33),"n"
288,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(98:32-98:33),"prob21"
289,COMPOUNDSTATEMENT,"",prob21.java(102:29-105:4),"{
			xcord[i]=in.nextDouble();
			ycord[i]=in.nextDouble();
		}"
290,DECLARATIONSTATEMENT,"",prob21.java(102:7-102:16),"int i = 0"
291,BINARYOPERATOR,"<",prob21.java(102:18-102:23),"i < n"
292,UNARYOPERATOR,"++",prob21.java(102:25-102:28),"++i"
293,VARIABLEDECLARATION,"i",prob21.java(102:11-102:16),"i = 0"
294,DECLAREDREFERENCEEXPRESSION,"xcord",prob21.java(103:4-103:9),"xcord"
295,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(102:18-102:19),"i"
296,MEMBEREXPRESSION,"n",prob21.java(102:22-102:23),"n"
297,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(102:22-102:23),"prob21"
298,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(102:27-102:28),"i"
299,BINARYOPERATOR,"=",prob21.java(103:4-103:29),"xcord[i]=in.nextDouble();"
300,BINARYOPERATOR,"=",prob21.java(104:4-104:29),"ycord[i]=in.nextDouble();"
301,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(103:4-103:12),"xcord[i]"
302,MEMBERCALLEXPRESSION,"nextDouble",prob21.java(103:13-103:28),"in.nextDouble()"
303,DECLAREDREFERENCEEXPRESSION,"ycord",prob21.java(104:4-104:9),"ycord"
304,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(103:10-103:11),"i"
305,DECLAREDREFERENCEEXPRESSION,"in",prob21.java(103:13-103:15),"in"
306,DECLAREDREFERENCEEXPRESSION,"nextDouble",prob21.java(103:16-103:26),"nextDouble"
307,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(104:4-104:12),"ycord[i]"
308,MEMBERCALLEXPRESSION,"nextDouble",prob21.java(104:13-104:28),"in.nextDouble()"
309,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(104:10-104:11),"i"
310,DECLAREDREFERENCEEXPRESSION,"in",prob21.java(104:13-104:15),"in"
311,DECLAREDREFERENCEEXPRESSION,"nextDouble",prob21.java(104:16-104:26),"nextDouble"
312,VARIABLEDECLARATION,"this",,""
313,COMPOUNDSTATEMENT,"",prob21.java(34:29-41:3),"{
		pset = new int[n1];
		rank = new int[n1];
		for(int i = 0; i < n1; i++){
			pset[i] = i;
			rank[i] = 0;
		}
	}"
314,PARAMVARIABLEDECLARATION,"n1",prob21.java(34:22-34:28),"int n1"
315,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(35:3-35:7),"prob21"
316,RETURNSTATEMENT,"",,""
317,BINARYOPERATOR,"=",prob21.java(35:3-35:22),"pset = new int[n1];"
318,BINARYOPERATOR,"=",prob21.java(36:3-36:22),"rank = new int[n1];"
319,FORSTATEMENT,"",prob21.java(37:3-40:4),"for(int i = 0; i < n1; i++){
			pset[i] = i;
			rank[i] = 0;
		}"
320,COMPOUNDSTATEMENT,"",prob21.java(37:30-40:4),"{
			pset[i] = i;
			rank[i] = 0;
		}"
321,DECLARATIONSTATEMENT,"",prob21.java(37:7-37:16),"int i = 0"
322,BINARYOPERATOR,"<",prob21.java(37:18-37:24),"i < n1"
323,UNARYOPERATOR,"++",prob21.java(37:26-37:29),"i++"
324,VARIABLEDECLARATION,"i",prob21.java(37:11-37:16),"i = 0"
325,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(38:4-38:8),"prob21"
326,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(37:18-37:19),"i"
327,BINARYOPERATOR,"=",prob21.java(38:4-38:16),"pset[i] = i;"
328,BINARYOPERATOR,"=",prob21.java(39:4-39:16),"rank[i] = 0;"
329,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(37:26-37:27),"i"
330,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(38:4-38:11),"pset[i]"
331,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(38:14-38:15),"i"
332,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(39:4-39:8),"prob21"
333,MEMBEREXPRESSION,"pset",prob21.java(38:4-38:8),"pset"
334,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(38:9-38:10),"i"
335,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(39:4-39:11),"rank[i]"
336,LITERAL,"",prob21.java(39:14-39:15),"0"
337,MEMBEREXPRESSION,"rank",prob21.java(39:4-39:8),"rank"
338,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(39:9-39:10),"i"
339,DECLAREDREFERENCEEXPRESSION,"n1",prob21.java(37:22-37:24),"n1"
340,LITERAL,"",prob21.java(37:15-37:16),"0"
341,MEMBEREXPRESSION,"rank",prob21.java(36:3-36:7),"rank"
342,ARRAYCREATIONEXPRESSION,"",prob21.java(36:10-36:21),"new int[n1]"
343,DECLAREDREFERENCEEXPRESSION,"n1",prob21.java(36:18-36:20),"n1"
344,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(36:3-36:7),"prob21"
345,MEMBEREXPRESSION,"pset",prob21.java(35:3-35:7),"pset"
346,ARRAYCREATIONEXPRESSION,"",prob21.java(35:10-35:21),"new int[n1]"
347,DECLAREDREFERENCEEXPRESSION,"n1",prob21.java(35:18-35:20),"n1"
348,VARIABLEDECLARATION,"this",,""
349,COMPOUNDSTATEMENT,"",prob21.java(44:27-49:3),"{
		if(i!=pset[i]) {
			pset[i] = findSet(pset[i]);
		}
		return pset[i];
	}"
350,PARAMVARIABLEDECLARATION,"i",prob21.java(44:21-44:26),"int i"
351,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(45:6-45:7),"i"
352,RETURNSTATEMENT,"",prob21.java(48:3-48:18),"return pset[i];"
353,IFSTATEMENT,"",prob21.java(45:3-47:4),"if(i!=pset[i]) {
			pset[i] = findSet(pset[i]);
		}"
354,BINARYOPERATOR,"!=",prob21.java(45:6-45:16),"i!=pset[i]"
355,COMPOUNDSTATEMENT,"",prob21.java(45:18-47:4),"{
			pset[i] = findSet(pset[i]);
		}"
356,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(46:4-46:8),"prob21"
357,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(48:10-48:14),"prob21"
358,BINARYOPERATOR,"=",prob21.java(46:4-46:31),"pset[i] = findSet(pset[i]);"
359,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(46:4-46:11),"pset[i]"
360,CALLEXPRESSION,"findSet",prob21.java(46:14-46:30),"findSet(pset[i])"
361,MEMBEREXPRESSION,"pset",prob21.java(46:4-46:8),"pset"
362,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(46:9-46:10),"i"
363,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(46:22-46:26),"prob21"
364,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(46:22-46:29),"pset[i]"
365,MEMBEREXPRESSION,"pset",prob21.java(46:22-46:26),"pset"
366,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(46:27-46:28),"i"
367,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(45:9-45:16),"pset[i]"
368,MEMBEREXPRESSION,"pset",prob21.java(45:9-45:13),"pset"
369,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(45:14-45:15),"i"
370,DECLAREDREFERENCEEXPRESSION,"prob21",prob21.java(45:9-45:13),"prob21"
371,ARRAYSUBSCRIPTIONEXPRESSION,"",prob21.java(48:10-48:17),"pset[i]"
372,MEMBEREXPRESSION,"pset",prob21.java(48:10-48:14),"pset"
373,DECLAREDREFERENCEEXPRESSION,"i",prob21.java(48:15-48:16),"i"

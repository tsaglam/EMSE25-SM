id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07516396_21_201406040/nopqueue.java",,""
2,RECORDDECLARATION,"nopqueue",nopqueue.java(3:1-33:2),"class nopqueue {
	public static void main (String args[]){
		Scanner input = new Scanner (System.in);
		int N = input.nextInt();
		LinkedList<sarda> Q = new LinkedList<sarda>();
		for (int i=0; i<N; i++)
			Q.add(new sarda(input.nextDouble(),input.nextDouble()));
		Q.peek().dist = 0;
		double contador = 0;
		double min;
		int imin;
		while (Q.size() > 0){
			min = Q.getFirst().dist;
			imin = 0;
			for (int i=1; i<Q.size(); i++)
				if (min>Q.get(i).dist){
					min = Q.get(i).dist;
					imin = i;
				}
							
			sarda u = Q.remove(imin);
			System.out.println(""add ""+u.dist);
			contador+=u.dist;
			for (sarda w : Q){
			    
			    w.dist = Math.sqrt(Math.pow((u.x-w.x),2)+Math.pow((u.y-w.y),2));
			    System.out.println(w.dist);}
		}
		System.out.printf(""%.2f%n"",contador);
	}
}"
3,RECORDDECLARATION,"sarda",nopqueue.java(35:1-42:2),"class sarda{
	double x,y,dist;
	sarda (double x,double y){
		this.x = x;
		this.y = y;
		dist = Double.MAX_VALUE;
	}
}"
4,INCLUDEDECLARATION,"java.util",,""
5,INCLUDEDECLARATION,"java.lang.Math",,""
6,FIELDDECLARATION,"this",,""
7,FIELDDECLARATION,"x",nopqueue.java(36:2-36:18),"x"
8,CONSTRUCTORDECLARATION,"sarda",nopqueue.java(37:2-41:3),"sarda (double x,double y){
		this.x = x;
		this.y = y;
		dist = Double.MAX_VALUE;
	}"
9,COMPOUNDSTATEMENT,"",nopqueue.java(37:27-41:3),"{
		this.x = x;
		this.y = y;
		dist = Double.MAX_VALUE;
	}"
10,PARAMVARIABLEDECLARATION,"x",nopqueue.java(37:9-37:17),"double x"
11,PARAMVARIABLEDECLARATION,"y",nopqueue.java(37:18-37:26),"double y"
12,DECLAREDREFERENCEEXPRESSION,"this",nopqueue.java(38:3-38:7),"this"
13,RETURNSTATEMENT,"",,""
14,BINARYOPERATOR,"=",nopqueue.java(38:3-38:14),"this.x = x;"
15,BINARYOPERATOR,"=",nopqueue.java(39:3-39:14),"this.y = y;"
16,BINARYOPERATOR,"=",nopqueue.java(40:3-40:27),"dist = Double.MAX_VALUE;"
17,MEMBEREXPRESSION,"dist",nopqueue.java(40:3-40:7),"dist"
18,MEMBEREXPRESSION,"MAX_VALUE",nopqueue.java(40:10-40:26),"Double.MAX_VALUE"
19,DECLAREDREFERENCEEXPRESSION,"this",nopqueue.java(40:3-40:7),"this"
20,DECLAREDREFERENCEEXPRESSION,"Double",nopqueue.java(40:10-40:16),"Double"
21,MEMBEREXPRESSION,"x",nopqueue.java(38:3-38:9),"this.x"
22,DECLAREDREFERENCEEXPRESSION,"x",nopqueue.java(38:12-38:13),"x"
23,DECLAREDREFERENCEEXPRESSION,"this",nopqueue.java(39:3-39:7),"this"
24,MEMBEREXPRESSION,"y",nopqueue.java(39:3-39:9),"this.y"
25,DECLAREDREFERENCEEXPRESSION,"y",nopqueue.java(39:12-39:13),"y"
26,FIELDDECLARATION,"this",,""
27,METHODDECLARATION,"main",nopqueue.java(4:2-32:3),"public static void main (String args[]){
		Scanner input = new Scanner (System.in);
		int N = input.nextInt();
		LinkedList<sarda> Q = new LinkedList<sarda>();
		for (int i=0; i<N; i++)
			Q.add(new sarda(input.nextDouble(),input.nextDouble()));
		Q.peek().dist = 0;
		double contador = 0;
		double min;
		int imin;
		while (Q.size() > 0){
			min = Q.getFirst().dist;
			imin = 0;
			for (int i=1; i<Q.size(); i++)
				if (min>Q.get(i).dist){
					min = Q.get(i).dist;
					imin = i;
				}
							
			sarda u = Q.remove(imin);
			System.out.println(""add ""+u.dist);
			contador+=u.dist;
			for (sarda w : Q){
			    
			    w.dist = Math.sqrt(Math.pow((u.x-w.x),2)+Math.pow((u.y-w.y),2));
			    System.out.println(w.dist);}
		}
		System.out.printf(""%.2f%n"",contador);
	}"
28,CONSTRUCTORDECLARATION,"nopqueue",,""
29,VARIABLEDECLARATION,"this",,""
30,COMPOUNDSTATEMENT,"",nopqueue.java(4:41-32:3),"{
		Scanner input = new Scanner (System.in);
		int N = input.nextInt();
		LinkedList<sarda> Q = new LinkedList<sarda>();
		for (int i=0; i<N; i++)
			Q.add(new sarda(input.nextDouble(),input.nextDouble()));
		Q.peek().dist = 0;
		double contador = 0;
		double min;
		int imin;
		while (Q.size() > 0){
			min = Q.getFirst().dist;
			imin = 0;
			for (int i=1; i<Q.size(); i++)
				if (min>Q.get(i).dist){
					min = Q.get(i).dist;
					imin = i;
				}
							
			sarda u = Q.remove(imin);
			System.out.println(""add ""+u.dist);
			contador+=u.dist;
			for (sarda w : Q){
			    
			    w.dist = Math.sqrt(Math.pow((u.x-w.x),2)+Math.pow((u.y-w.y),2));
			    System.out.println(w.dist);}
		}
		System.out.printf(""%.2f%n"",contador);
	}"
31,PARAMVARIABLEDECLARATION,"args",nopqueue.java(4:27-4:40),"String args[]"
32,DECLAREDREFERENCEEXPRESSION,"System",nopqueue.java(5:32-5:38),"System"
33,RETURNSTATEMENT,"",,""
34,DECLARATIONSTATEMENT,"",nopqueue.java(5:3-5:43),"Scanner input = new Scanner (System.in);"
35,DECLARATIONSTATEMENT,"",nopqueue.java(6:3-6:27),"int N = input.nextInt();"
36,DECLARATIONSTATEMENT,"",nopqueue.java(7:3-7:49),"LinkedList<sarda> Q = new LinkedList<sarda>();"
37,FORSTATEMENT,"",nopqueue.java(8:3-9:60),"for (int i=0; i<N; i++)
			Q.add(new sarda(input.nextDouble(),input.nextDouble()));"
38,BINARYOPERATOR,"=",nopqueue.java(10:3-10:21),"Q.peek().dist = 0;"
39,DECLARATIONSTATEMENT,"",nopqueue.java(11:3-11:23),"double contador = 0;"
40,DECLARATIONSTATEMENT,"",nopqueue.java(12:3-12:14),"double min;"
41,DECLARATIONSTATEMENT,"",nopqueue.java(13:3-13:12),"int imin;"
42,WHILESTATEMENT,"",nopqueue.java(14:3-30:4),"while (Q.size() > 0){
			min = Q.getFirst().dist;
			imin = 0;
			for (int i=1; i<Q.size(); i++)
				if (min>Q.get(i).dist){
					min = Q.get(i).dist;
					imin = i;
				}
							
			sarda u = Q.remove(imin);
			System.out.println(""add ""+u.dist);
			contador+=u.dist;
			for (sarda w : Q){
			    
			    w.dist = Math.sqrt(Math.pow((u.x-w.x),2)+Math.pow((u.y-w.y),2));
			    System.out.println(w.dist);}
		}"
43,MEMBERCALLEXPRESSION,"printf",nopqueue.java(31:3-31:40),"System.out.printf(""%.2f%n"",contador);"
44,VARIABLEDECLARATION,"input",nopqueue.java(5:11-5:42),"input = new Scanner (System.in)"
45,VARIABLEDECLARATION,"N",nopqueue.java(6:7-6:26),"N = input.nextInt()"
46,VARIABLEDECLARATION,"Q",nopqueue.java(7:21-7:48),"Q = new LinkedList<sarda>()"
47,VARIABLEDECLARATION,"contador",nopqueue.java(11:10-11:22),"contador = 0"
48,VARIABLEDECLARATION,"min",nopqueue.java(12:10-12:13),"min"
49,VARIABLEDECLARATION,"imin",nopqueue.java(13:7-13:11),"imin"
50,MEMBERCALLEXPRESSION,"add",nopqueue.java(9:4-9:60),"Q.add(new sarda(input.nextDouble(),input.nextDouble()));"
51,DECLARATIONSTATEMENT,"",nopqueue.java(8:8-8:15),"int i=0"
52,BINARYOPERATOR,"<",nopqueue.java(8:17-8:20),"i<N"
53,UNARYOPERATOR,"++",nopqueue.java(8:22-8:25),"i++"
54,VARIABLEDECLARATION,"i",nopqueue.java(8:12-8:15),"i=0"
55,DECLAREDREFERENCEEXPRESSION,"Q",nopqueue.java(9:4-9:5),"Q"
56,DECLAREDREFERENCEEXPRESSION,"Q",nopqueue.java(10:3-10:4),"Q"
57,DECLAREDREFERENCEEXPRESSION,"i",nopqueue.java(8:17-8:18),"i"
58,DECLAREDREFERENCEEXPRESSION,"N",nopqueue.java(8:19-8:20),"N"
59,DECLAREDREFERENCEEXPRESSION,"i",nopqueue.java(8:22-8:23),"i"
60,DECLAREDREFERENCEEXPRESSION,"add",nopqueue.java(9:6-9:9),"add"
61,NEWEXPRESSION,"",nopqueue.java(9:10-9:58),"new sarda(input.nextDouble(),input.nextDouble())"
62,DECLAREDREFERENCEEXPRESSION,"input",nopqueue.java(9:20-9:25),"input"
63,CONSTRUCTEXPRESSION,"",nopqueue.java(9:10-9:58),"new sarda(input.nextDouble(),input.nextDouble())"
64,CONSTRUCTORDECLARATION,"sarda",,""
65,MEMBERCALLEXPRESSION,"nextDouble",nopqueue.java(9:39-9:57),"input.nextDouble()"
66,DECLAREDREFERENCEEXPRESSION,"nextDouble",nopqueue.java(9:45-9:55),"nextDouble"
67,PARAMVARIABLEDECLARATION,"double1",,""
68,DECLAREDREFERENCEEXPRESSION,"input",nopqueue.java(9:39-9:44),"input"
69,MEMBERCALLEXPRESSION,"nextDouble",nopqueue.java(9:20-9:38),"input.nextDouble()"
70,DECLAREDREFERENCEEXPRESSION,"nextDouble",nopqueue.java(9:26-9:36),"nextDouble"
71,PARAMVARIABLEDECLARATION,"double0",,""
72,LITERAL,"",nopqueue.java(8:14-8:15),"0"
73,MEMBEREXPRESSION,"dist",nopqueue.java(10:3-10:16),"Q.peek().dist"
74,LITERAL,"",nopqueue.java(10:19-10:20),"0"
75,LITERAL,"",nopqueue.java(11:21-11:22),"0"
76,MEMBERCALLEXPRESSION,"peek",nopqueue.java(10:3-10:11),"Q.peek()"
77,DECLAREDREFERENCEEXPRESSION,"peek",nopqueue.java(10:5-10:9),"peek"
78,MEMBERCALLEXPRESSION,"nextInt",nopqueue.java(6:11-6:26),"input.nextInt()"
79,DECLAREDREFERENCEEXPRESSION,"nextInt",nopqueue.java(6:17-6:24),"nextInt"
80,DECLAREDREFERENCEEXPRESSION,"input",nopqueue.java(6:11-6:16),"input"
81,UNINITIALIZEDVALUE,"Uninitialized Value",,""
82,DECLAREDREFERENCEEXPRESSION,"Q",nopqueue.java(14:10-14:11),"Q"
83,NEWEXPRESSION,"",nopqueue.java(5:19-5:42),"new Scanner (System.in)"
84,CONSTRUCTEXPRESSION,"",nopqueue.java(5:19-5:42),"new Scanner (System.in)"
85,MEMBEREXPRESSION,"in",nopqueue.java(5:32-5:41),"System.in"
86,CONSTRUCTEXPRESSION,"",nopqueue.java(7:25-7:48),"new LinkedList<sarda>()"
87,BINARYOPERATOR,">",nopqueue.java(14:10-14:22),"Q.size() > 0"
88,COMPOUNDSTATEMENT,"",nopqueue.java(14:23-30:4),"{
			min = Q.getFirst().dist;
			imin = 0;
			for (int i=1; i<Q.size(); i++)
				if (min>Q.get(i).dist){
					min = Q.get(i).dist;
					imin = i;
				}
							
			sarda u = Q.remove(imin);
			System.out.println(""add ""+u.dist);
			contador+=u.dist;
			for (sarda w : Q){
			    
			    w.dist = Math.sqrt(Math.pow((u.x-w.x),2)+Math.pow((u.y-w.y),2));
			    System.out.println(w.dist);}
		}"
89,DECLAREDREFERENCEEXPRESSION,"min",nopqueue.java(15:4-15:7),"min"
90,DECLAREDREFERENCEEXPRESSION,"System",nopqueue.java(31:3-31:9),"System"
91,MEMBERCALLEXPRESSION,"size",nopqueue.java(14:10-14:18),"Q.size()"
92,LITERAL,"",nopqueue.java(14:21-14:22),"0"
93,DECLAREDREFERENCEEXPRESSION,"size",nopqueue.java(14:12-14:16),"size"
94,BINARYOPERATOR,"=",nopqueue.java(15:4-15:28),"min = Q.getFirst().dist;"
95,BINARYOPERATOR,"=",nopqueue.java(16:4-16:13),"imin = 0;"
96,FORSTATEMENT,"",nopqueue.java(17:4-21:6),"for (int i=1; i<Q.size(); i++)
				if (min>Q.get(i).dist){
					min = Q.get(i).dist;
					imin = i;
				}"
97,DECLARATIONSTATEMENT,"",nopqueue.java(23:4-23:29),"sarda u = Q.remove(imin);"
98,MEMBERCALLEXPRESSION,"println",nopqueue.java(24:4-24:38),"System.out.println(""add ""+u.dist);"
99,BINARYOPERATOR,"+=",nopqueue.java(25:4-25:21),"contador+=u.dist;"
100,FOREACHSTATEMENT,"",nopqueue.java(26:4-29:36),"for (sarda w : Q){
			    
			    w.dist = Math.sqrt(Math.pow((u.x-w.x),2)+Math.pow((u.y-w.y),2));
			    System.out.println(w.dist);}"
101,VARIABLEDECLARATION,"u",nopqueue.java(23:10-23:28),"u = Q.remove(imin)"
102,DECLAREDREFERENCEEXPRESSION,"imin",nopqueue.java(16:4-16:8),"imin"
103,LITERAL,"",nopqueue.java(16:11-16:12),"0"
104,LITERAL,"",nopqueue.java(17:15-17:16),"1"
105,DECLAREDREFERENCEEXPRESSION,"println",nopqueue.java(24:15-24:22),"println"
106,DECLAREDREFERENCEEXPRESSION,"contador",nopqueue.java(25:4-25:12),"contador"
107,BINARYOPERATOR,"+",nopqueue.java(24:23-24:36),"""add ""+u.dist"
108,LITERAL,"",nopqueue.java(24:23-24:29),"""add """
109,MEMBEREXPRESSION,"dist",nopqueue.java(24:30-24:36),"u.dist"
110,DECLAREDREFERENCEEXPRESSION,"u",nopqueue.java(24:30-24:31),"u"
111,MEMBEREXPRESSION,"out",nopqueue.java(24:4-24:14),"System.out"
112,DECLAREDREFERENCEEXPRESSION,"System",nopqueue.java(24:4-24:10),"System"
113,MEMBERCALLEXPRESSION,"remove",nopqueue.java(23:14-23:28),"Q.remove(imin)"
114,DECLAREDREFERENCEEXPRESSION,"remove",nopqueue.java(23:16-23:22),"remove"
115,DECLAREDREFERENCEEXPRESSION,"imin",nopqueue.java(23:23-23:27),"imin"
116,DECLAREDREFERENCEEXPRESSION,"Q",nopqueue.java(23:14-23:15),"Q"
117,DECLARATIONSTATEMENT,"",nopqueue.java(26:9-26:16),"sarda w"
118,DECLAREDREFERENCEEXPRESSION,"Q",nopqueue.java(26:19-26:20),"Q"
119,COMPOUNDSTATEMENT,"",nopqueue.java(26:21-29:36),"{
			    
			    w.dist = Math.sqrt(Math.pow((u.x-w.x),2)+Math.pow((u.y-w.y),2));
			    System.out.println(w.dist);}"
120,VARIABLEDECLARATION,"w",nopqueue.java(26:15-26:16),"w"
121,DECLAREDREFERENCEEXPRESSION,"w",nopqueue.java(28:8-28:9),"w"
122,UNINITIALIZEDVALUE,"Uninitialized Value",,""
123,BINARYOPERATOR,"=",nopqueue.java(28:8-28:72),"w.dist = Math.sqrt(Math.pow((u.x-w.x),2)+Math.pow((u.y-w.y),2));"
124,MEMBERCALLEXPRESSION,"println",nopqueue.java(29:8-29:35),"System.out.println(w.dist);"
125,DECLAREDREFERENCEEXPRESSION,"println",nopqueue.java(29:19-29:26),"println"
126,MEMBEREXPRESSION,"dist",nopqueue.java(29:27-29:33),"w.dist"
127,MEMBEREXPRESSION,"out",nopqueue.java(29:8-29:18),"System.out"
128,DECLAREDREFERENCEEXPRESSION,"System",nopqueue.java(29:8-29:14),"System"
129,DECLAREDREFERENCEEXPRESSION,"w",nopqueue.java(29:27-29:28),"w"
130,MEMBEREXPRESSION,"dist",nopqueue.java(28:8-28:14),"w.dist"
131,STATICCALLEXPRESSION,"sqrt",nopqueue.java(28:17-28:71),"Math.sqrt(Math.pow((u.x-w.x),2)+Math.pow((u.y-w.y),2))"
132,DECLAREDREFERENCEEXPRESSION,"u",nopqueue.java(28:37-28:38),"u"
133,BINARYOPERATOR,"+",nopqueue.java(28:27-28:70),"Math.pow((u.x-w.x),2)+Math.pow((u.y-w.y),2)"
134,STATICCALLEXPRESSION,"pow",nopqueue.java(28:27-28:48),"Math.pow((u.x-w.x),2)"
135,STATICCALLEXPRESSION,"pow",nopqueue.java(28:49-28:70),"Math.pow((u.y-w.y),2)"
136,DECLAREDREFERENCEEXPRESSION,"u",nopqueue.java(28:59-28:60),"u"
137,LITERAL,"",nopqueue.java(28:46-28:47),"2"
138,BINARYOPERATOR,"-",nopqueue.java(28:37-28:44),"u.x-w.x"
139,MEMBEREXPRESSION,"x",nopqueue.java(28:37-28:40),"u.x"
140,MEMBEREXPRESSION,"x",nopqueue.java(28:41-28:44),"w.x"
141,DECLAREDREFERENCEEXPRESSION,"w",nopqueue.java(28:41-28:42),"w"
142,LITERAL,"",nopqueue.java(28:68-28:69),"2"
143,BINARYOPERATOR,"-",nopqueue.java(28:59-28:66),"u.y-w.y"
144,MEMBEREXPRESSION,"y",nopqueue.java(28:59-28:62),"u.y"
145,MEMBEREXPRESSION,"y",nopqueue.java(28:63-28:66),"w.y"
146,DECLAREDREFERENCEEXPRESSION,"w",nopqueue.java(28:63-28:64),"w"
147,MEMBEREXPRESSION,"dist",nopqueue.java(25:14-25:20),"u.dist"
148,DECLAREDREFERENCEEXPRESSION,"u",nopqueue.java(25:14-25:15),"u"
149,MEMBEREXPRESSION,"dist",nopqueue.java(15:10-15:27),"Q.getFirst().dist"
150,MEMBERCALLEXPRESSION,"getFirst",nopqueue.java(15:10-15:22),"Q.getFirst()"
151,DECLAREDREFERENCEEXPRESSION,"getFirst",nopqueue.java(15:12-15:20),"getFirst"
152,DECLAREDREFERENCEEXPRESSION,"Q",nopqueue.java(15:10-15:11),"Q"
153,IFSTATEMENT,"",nopqueue.java(18:5-21:6),"if (min>Q.get(i).dist){
					min = Q.get(i).dist;
					imin = i;
				}"
154,DECLARATIONSTATEMENT,"",nopqueue.java(17:9-17:16),"int i=1"
155,BINARYOPERATOR,"<",nopqueue.java(17:18-17:28),"i<Q.size()"
156,UNARYOPERATOR,"++",nopqueue.java(17:30-17:33),"i++"
157,VARIABLEDECLARATION,"i",nopqueue.java(17:13-17:16),"i=1"
158,DECLAREDREFERENCEEXPRESSION,"min",nopqueue.java(18:9-18:12),"min"
159,DECLAREDREFERENCEEXPRESSION,"i",nopqueue.java(17:30-17:31),"i"
160,DECLAREDREFERENCEEXPRESSION,"i",nopqueue.java(17:18-17:19),"i"
161,COMPOUNDSTATEMENT,"",nopqueue.java(18:27-21:6),"{
					min = Q.get(i).dist;
					imin = i;
				}"
162,MEMBERCALLEXPRESSION,"size",nopqueue.java(17:20-17:28),"Q.size()"
163,DECLAREDREFERENCEEXPRESSION,"Q",nopqueue.java(17:20-17:21),"Q"
164,DECLAREDREFERENCEEXPRESSION,"size",nopqueue.java(17:22-17:26),"size"
165,BINARYOPERATOR,">",nopqueue.java(18:9-18:26),"min>Q.get(i).dist"
166,DECLAREDREFERENCEEXPRESSION,"min",nopqueue.java(19:6-19:9),"min"
167,MEMBEREXPRESSION,"dist",nopqueue.java(18:13-18:26),"Q.get(i).dist"
168,DECLAREDREFERENCEEXPRESSION,"Q",nopqueue.java(18:13-18:14),"Q"
169,MEMBERCALLEXPRESSION,"get",nopqueue.java(18:13-18:21),"Q.get(i)"
170,DECLAREDREFERENCEEXPRESSION,"get",nopqueue.java(18:15-18:18),"get"
171,DECLAREDREFERENCEEXPRESSION,"i",nopqueue.java(18:19-18:20),"i"
172,BINARYOPERATOR,"=",nopqueue.java(19:6-19:26),"min = Q.get(i).dist;"
173,BINARYOPERATOR,"=",nopqueue.java(20:6-20:15),"imin = i;"
174,MEMBEREXPRESSION,"dist",nopqueue.java(19:12-19:25),"Q.get(i).dist"
175,DECLAREDREFERENCEEXPRESSION,"imin",nopqueue.java(20:6-20:10),"imin"
176,DECLAREDREFERENCEEXPRESSION,"Q",nopqueue.java(19:12-19:13),"Q"
177,MEMBERCALLEXPRESSION,"get",nopqueue.java(19:12-19:20),"Q.get(i)"
178,DECLAREDREFERENCEEXPRESSION,"get",nopqueue.java(19:14-19:17),"get"
179,DECLAREDREFERENCEEXPRESSION,"i",nopqueue.java(19:18-19:19),"i"
180,DECLAREDREFERENCEEXPRESSION,"i",nopqueue.java(20:13-20:14),"i"
181,NEWEXPRESSION,"",nopqueue.java(7:25-7:48),"new LinkedList<sarda>()"
182,UNINITIALIZEDVALUE,"Uninitialized Value",,""
183,DECLAREDREFERENCEEXPRESSION,"printf",nopqueue.java(31:14-31:20),"printf"
184,DECLAREDREFERENCEEXPRESSION,"contador",nopqueue.java(31:30-31:38),"contador"
185,MEMBEREXPRESSION,"out",nopqueue.java(31:3-31:13),"System.out"
186,LITERAL,"",nopqueue.java(31:21-31:29),"""%.2f%n"""

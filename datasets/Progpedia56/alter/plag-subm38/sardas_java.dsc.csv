id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07339458_21_200908415/Sardas.java",,""
2,RECORDDECLARATION,"Node",Sardas.java(7:1-21:2),"class Node {
    public LinkedList<Integer> adj; // Lista de adjacencias
    public double distance;            // Distancia do no origem da pesquisa
    public double y;
    public double x;
    public int pai;

    Node(double x, double y) {
	adj = new LinkedList<Integer>();
	distance = 0.0;
	this.x = x;
	this.y = y;
	pai = 0;
    }
}"
3,RECORDDECLARATION,"Graph",Sardas.java(24:1-76:2),"class Graph {
    int n;           // Numero de nos do grafo
    Node nodes[];    // Array para conter os nos
	
    Graph(int n) {
	this.n = n;
	nodes  = new Node[n+1]; // +1 se os comecam em 1 ao inves de 0
	

    }

    public double peso(int x, int y){

    	double p = Math.sqrt(((nodes[x].x - nodes[y].x) * (nodes[x].x - nodes[y].x)) + ((nodes[x].y - nodes[y].y)*(nodes[x].y - nodes[y].y)));
	return p;

    }
    // Algoritmo de pesquisa em largura
    public void Prim(int v) {
	LinkedList<Integer> q = new LinkedList<Integer>();
	
	for(int i=1; i<=n; i++){
		nodes[i].distance = Double.MAX_VALUE;
		q.add(i);
	}
	nodes[v].distance = 0;
	double min = Double.MAX_VALUE;
	int u = 0;
	int menor = 0;
	while (q.size() > 0) {
		min = Double.MAX_VALUE;
	    for(int i=1; i<=n; i++)
		if(q.contains(i) && nodes[i].distance < min){
			min = nodes[i].distance;
			menor = i;
		}
	
	    q.removeFirstOccurrence(menor);
		u = menor;
		
	    for (int w : nodes[u].adj) {
		double p = peso(u, w);
		if (q.contains(w) && p < nodes[w].distance)  {
		    nodes[w].pai = u;
		    nodes[w].distance = p;
		}	
	
	    }
		    
	}
	
    }
}"
4,RECORDDECLARATION,"Sardas",Sardas.java(77:1-98:2),"public class Sardas {
    public static void main(String args[]) {
	Scanner in = new Scanner(System.in);
	int n = in.nextInt();
	Graph g = 	new Graph(n);
	for (int i=1; i<=n; i++) 
	    g.nodes[i]= new Node(in.nextDouble(), in.nextDouble());	

	for(int i=1; i<=n; i++)
		for(int j=1; j<=n; j++)
			g.nodes[i].adj.add(j);

	// Pesquisa em largura a partir do no 1
	g.Prim(1);
	double t=0.0;
	for(int i=1; i<=n; i++)
		t += g.nodes[i].distance;	
	
	System.out.printf(""%.2f\n"", t);
	
    }
}"
5,INCLUDEDECLARATION,"java.io",,""
6,INCLUDEDECLARATION,"java.util",,""
7,FIELDDECLARATION,"this",,""
8,FIELDDECLARATION,"adj",Sardas.java(8:5-8:36),"adj"
9,FIELDDECLARATION,"distance",Sardas.java(9:5-9:28),"distance"
10,FIELDDECLARATION,"y",Sardas.java(10:5-10:21),"y"
11,FIELDDECLARATION,"x",Sardas.java(11:5-11:21),"x"
12,FIELDDECLARATION,"pai",Sardas.java(12:5-12:20),"pai"
13,CONSTRUCTORDECLARATION,"Node",Sardas.java(14:5-20:6),"Node(double x, double y) {
	adj = new LinkedList<Integer>();
	distance = 0.0;
	this.x = x;
	this.y = y;
	pai = 0;
    }"
14,COMPOUNDSTATEMENT,"",Sardas.java(14:30-20:6),"{
	adj = new LinkedList<Integer>();
	distance = 0.0;
	this.x = x;
	this.y = y;
	pai = 0;
    }"
15,PARAMVARIABLEDECLARATION,"x",Sardas.java(14:10-14:18),"double x"
16,PARAMVARIABLEDECLARATION,"y",Sardas.java(14:20-14:28),"double y"
17,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(15:2-15:5),"this"
18,RETURNSTATEMENT,"",,""
19,BINARYOPERATOR,"=",Sardas.java(15:2-15:34),"adj = new LinkedList<Integer>();"
20,BINARYOPERATOR,"=",Sardas.java(16:2-16:17),"distance = 0.0;"
21,BINARYOPERATOR,"=",Sardas.java(17:2-17:13),"this.x = x;"
22,BINARYOPERATOR,"=",Sardas.java(18:2-18:13),"this.y = y;"
23,BINARYOPERATOR,"=",Sardas.java(19:2-19:10),"pai = 0;"
24,MEMBEREXPRESSION,"y",Sardas.java(18:2-18:8),"this.y"
25,DECLAREDREFERENCEEXPRESSION,"y",Sardas.java(18:11-18:12),"y"
26,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(19:2-19:5),"this"
27,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(18:2-18:6),"this"
28,MEMBEREXPRESSION,"adj",Sardas.java(15:2-15:5),"adj"
29,NEWEXPRESSION,"",Sardas.java(15:8-15:33),"new LinkedList<Integer>()"
30,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(16:2-16:10),"this"
31,CONSTRUCTEXPRESSION,"",Sardas.java(15:8-15:33),"new LinkedList<Integer>()"
32,MEMBEREXPRESSION,"x",Sardas.java(17:2-17:8),"this.x"
33,DECLAREDREFERENCEEXPRESSION,"x",Sardas.java(17:11-17:12),"x"
34,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(17:2-17:6),"this"
35,MEMBEREXPRESSION,"distance",Sardas.java(16:2-16:10),"distance"
36,LITERAL,"",Sardas.java(16:13-16:16),"0.0"
37,MEMBEREXPRESSION,"pai",Sardas.java(19:2-19:5),"pai"
38,LITERAL,"",Sardas.java(19:8-19:9),"0"
39,FIELDDECLARATION,"this",,""
40,FIELDDECLARATION,"n",Sardas.java(25:5-25:11),"n"
41,FIELDDECLARATION,"nodes",Sardas.java(26:5-26:18),"nodes"
42,METHODDECLARATION,"peso",Sardas.java(35:5-40:6),"public double peso(int x, int y){

    	double p = Math.sqrt(((nodes[x].x - nodes[y].x) * (nodes[x].x - nodes[y].x)) + ((nodes[x].y - nodes[y].y)*(nodes[x].y - nodes[y].y)));
	return p;

    }"
43,METHODDECLARATION,"Prim",Sardas.java(42:5-75:6),"public void Prim(int v) {
	LinkedList<Integer> q = new LinkedList<Integer>();
	
	for(int i=1; i<=n; i++){
		nodes[i].distance = Double.MAX_VALUE;
		q.add(i);
	}
	nodes[v].distance = 0;
	double min = Double.MAX_VALUE;
	int u = 0;
	int menor = 0;
	while (q.size() > 0) {
		min = Double.MAX_VALUE;
	    for(int i=1; i<=n; i++)
		if(q.contains(i) && nodes[i].distance < min){
			min = nodes[i].distance;
			menor = i;
		}
	
	    q.removeFirstOccurrence(menor);
		u = menor;
		
	    for (int w : nodes[u].adj) {
		double p = peso(u, w);
		if (q.contains(w) && p < nodes[w].distance)  {
		    nodes[w].pai = u;
		    nodes[w].distance = p;
		}	
	
	    }
		    
	}
	
    }"
44,CONSTRUCTORDECLARATION,"Graph",Sardas.java(28:5-33:6),"Graph(int n) {
	this.n = n;
	nodes  = new Node[n+1]; // +1 se os comecam em 1 ao inves de 0
	

    }"
45,VARIABLEDECLARATION,"this",,""
46,COMPOUNDSTATEMENT,"",Sardas.java(35:37-40:6),"{

    	double p = Math.sqrt(((nodes[x].x - nodes[y].x) * (nodes[x].x - nodes[y].x)) + ((nodes[x].y - nodes[y].y)*(nodes[x].y - nodes[y].y)));
	return p;

    }"
47,PARAMVARIABLEDECLARATION,"x",Sardas.java(35:24-35:29),"int x"
48,PARAMVARIABLEDECLARATION,"y",Sardas.java(35:31-35:36),"int y"
49,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(37:29-37:34),"this"
50,RETURNSTATEMENT,"",Sardas.java(38:2-38:11),"return p;"
51,DECLARATIONSTATEMENT,"",Sardas.java(37:6-37:140),"double p = Math.sqrt(((nodes[x].x - nodes[y].x) * (nodes[x].x - nodes[y].x)) + ((nodes[x].y - nodes[y].y)*(nodes[x].y - nodes[y].y)));"
52,VARIABLEDECLARATION,"p",Sardas.java(37:13-37:139),"p = Math.sqrt(((nodes[x].x - nodes[y].x) * (nodes[x].x - nodes[y].x)) + ((nodes[x].y - nodes[y].y)*(nodes[x].y - nodes[y].y)))"
53,STATICCALLEXPRESSION,"sqrt",Sardas.java(37:17-37:139),"Math.sqrt(((nodes[x].x - nodes[y].x) * (nodes[x].x - nodes[y].x)) + ((nodes[x].y - nodes[y].y)*(nodes[x].y - nodes[y].y)))"
54,BINARYOPERATOR,"+",Sardas.java(37:27-37:138),"((nodes[x].x - nodes[y].x) * (nodes[x].x - nodes[y].x)) + ((nodes[x].y - nodes[y].y)*(nodes[x].y - nodes[y].y))"
55,BINARYOPERATOR,"*",Sardas.java(37:28-37:81),"(nodes[x].x - nodes[y].x) * (nodes[x].x - nodes[y].x)"
56,BINARYOPERATOR,"*",Sardas.java(37:86-37:137),"(nodes[x].y - nodes[y].y)*(nodes[x].y - nodes[y].y)"
57,BINARYOPERATOR,"-",Sardas.java(37:87-37:110),"nodes[x].y - nodes[y].y"
58,BINARYOPERATOR,"-",Sardas.java(37:113-37:136),"nodes[x].y - nodes[y].y"
59,MEMBEREXPRESSION,"y",Sardas.java(37:113-37:123),"nodes[x].y"
60,MEMBEREXPRESSION,"y",Sardas.java(37:126-37:136),"nodes[y].y"
61,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(37:113-37:121),"nodes[x]"
62,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(37:126-37:131),"this"
63,MEMBEREXPRESSION,"nodes",Sardas.java(37:113-37:118),"nodes"
64,DECLAREDREFERENCEEXPRESSION,"x",Sardas.java(37:119-37:120),"x"
65,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(37:113-37:118),"this"
66,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(37:126-37:134),"nodes[y]"
67,MEMBEREXPRESSION,"nodes",Sardas.java(37:126-37:131),"nodes"
68,DECLAREDREFERENCEEXPRESSION,"y",Sardas.java(37:132-37:133),"y"
69,MEMBEREXPRESSION,"y",Sardas.java(37:87-37:97),"nodes[x].y"
70,MEMBEREXPRESSION,"y",Sardas.java(37:100-37:110),"nodes[y].y"
71,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(37:100-37:108),"nodes[y]"
72,MEMBEREXPRESSION,"nodes",Sardas.java(37:100-37:105),"nodes"
73,DECLAREDREFERENCEEXPRESSION,"y",Sardas.java(37:106-37:107),"y"
74,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(37:100-37:105),"this"
75,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(37:87-37:95),"nodes[x]"
76,MEMBEREXPRESSION,"nodes",Sardas.java(37:87-37:92),"nodes"
77,DECLAREDREFERENCEEXPRESSION,"x",Sardas.java(37:93-37:94),"x"
78,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(37:87-37:92),"this"
79,BINARYOPERATOR,"-",Sardas.java(37:29-37:52),"nodes[x].x - nodes[y].x"
80,BINARYOPERATOR,"-",Sardas.java(37:57-37:80),"nodes[x].x - nodes[y].x"
81,MEMBEREXPRESSION,"x",Sardas.java(37:57-37:67),"nodes[x].x"
82,MEMBEREXPRESSION,"x",Sardas.java(37:70-37:80),"nodes[y].x"
83,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(37:70-37:78),"nodes[y]"
84,MEMBEREXPRESSION,"nodes",Sardas.java(37:70-37:75),"nodes"
85,DECLAREDREFERENCEEXPRESSION,"y",Sardas.java(37:76-37:77),"y"
86,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(37:70-37:75),"this"
87,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(37:57-37:65),"nodes[x]"
88,MEMBEREXPRESSION,"nodes",Sardas.java(37:57-37:62),"nodes"
89,DECLAREDREFERENCEEXPRESSION,"x",Sardas.java(37:63-37:64),"x"
90,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(37:57-37:62),"this"
91,MEMBEREXPRESSION,"x",Sardas.java(37:29-37:39),"nodes[x].x"
92,MEMBEREXPRESSION,"x",Sardas.java(37:42-37:52),"nodes[y].x"
93,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(37:42-37:50),"nodes[y]"
94,MEMBEREXPRESSION,"nodes",Sardas.java(37:42-37:47),"nodes"
95,DECLAREDREFERENCEEXPRESSION,"y",Sardas.java(37:48-37:49),"y"
96,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(37:42-37:47),"this"
97,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(37:29-37:37),"nodes[x]"
98,MEMBEREXPRESSION,"nodes",Sardas.java(37:29-37:34),"nodes"
99,DECLAREDREFERENCEEXPRESSION,"x",Sardas.java(37:35-37:36),"x"
100,DECLAREDREFERENCEEXPRESSION,"p",Sardas.java(38:9-38:10),"p"
101,COMPOUNDSTATEMENT,"",Sardas.java(28:18-33:6),"{
	this.n = n;
	nodes  = new Node[n+1]; // +1 se os comecam em 1 ao inves de 0
	

    }"
102,PARAMVARIABLEDECLARATION,"n",Sardas.java(28:11-28:16),"int n"
103,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(29:2-29:6),"this"
104,RETURNSTATEMENT,"",,""
105,BINARYOPERATOR,"=",Sardas.java(29:2-29:13),"this.n = n;"
106,BINARYOPERATOR,"=",Sardas.java(30:2-30:25),"nodes  = new Node[n+1];"
107,MEMBEREXPRESSION,"nodes",Sardas.java(30:2-30:7),"nodes"
108,ARRAYCREATIONEXPRESSION,"",Sardas.java(30:11-30:24),"new Node[n+1]"
109,BINARYOPERATOR,"+",Sardas.java(30:20-30:23),"n+1"
110,DECLAREDREFERENCEEXPRESSION,"n",Sardas.java(30:20-30:21),"n"
111,LITERAL,"",Sardas.java(30:22-30:23),"1"
112,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(30:2-30:7),"this"
113,MEMBEREXPRESSION,"n",Sardas.java(29:2-29:8),"this.n"
114,DECLAREDREFERENCEEXPRESSION,"n",Sardas.java(29:11-29:12),"n"
115,VARIABLEDECLARATION,"this",,""
116,COMPOUNDSTATEMENT,"",Sardas.java(42:29-75:6),"{
	LinkedList<Integer> q = new LinkedList<Integer>();
	
	for(int i=1; i<=n; i++){
		nodes[i].distance = Double.MAX_VALUE;
		q.add(i);
	}
	nodes[v].distance = 0;
	double min = Double.MAX_VALUE;
	int u = 0;
	int menor = 0;
	while (q.size() > 0) {
		min = Double.MAX_VALUE;
	    for(int i=1; i<=n; i++)
		if(q.contains(i) && nodes[i].distance < min){
			min = nodes[i].distance;
			menor = i;
		}
	
	    q.removeFirstOccurrence(menor);
		u = menor;
		
	    for (int w : nodes[u].adj) {
		double p = peso(u, w);
		if (q.contains(w) && p < nodes[w].distance)  {
		    nodes[w].pai = u;
		    nodes[w].distance = p;
		}	
	
	    }
		    
	}
	
    }"
117,PARAMVARIABLEDECLARATION,"v",Sardas.java(42:22-42:27),"int v"
118,CONSTRUCTEXPRESSION,"",Sardas.java(43:26-43:51),"new LinkedList<Integer>()"
119,RETURNSTATEMENT,"",,""
120,DECLARATIONSTATEMENT,"",Sardas.java(43:2-43:52),"LinkedList<Integer> q = new LinkedList<Integer>();"
121,FORSTATEMENT,"",Sardas.java(45:2-48:3),"for(int i=1; i<=n; i++){
		nodes[i].distance = Double.MAX_VALUE;
		q.add(i);
	}"
122,BINARYOPERATOR,"=",Sardas.java(49:2-49:24),"nodes[v].distance = 0;"
123,DECLARATIONSTATEMENT,"",Sardas.java(50:2-50:32),"double min = Double.MAX_VALUE;"
124,DECLARATIONSTATEMENT,"",Sardas.java(51:2-51:12),"int u = 0;"
125,DECLARATIONSTATEMENT,"",Sardas.java(52:2-52:16),"int menor = 0;"
126,WHILESTATEMENT,"",Sardas.java(53:2-73:3),"while (q.size() > 0) {
		min = Double.MAX_VALUE;
	    for(int i=1; i<=n; i++)
		if(q.contains(i) && nodes[i].distance < min){
			min = nodes[i].distance;
			menor = i;
		}
	
	    q.removeFirstOccurrence(menor);
		u = menor;
		
	    for (int w : nodes[u].adj) {
		double p = peso(u, w);
		if (q.contains(w) && p < nodes[w].distance)  {
		    nodes[w].pai = u;
		    nodes[w].distance = p;
		}	
	
	    }
		    
	}"
127,VARIABLEDECLARATION,"q",Sardas.java(43:22-43:51),"q = new LinkedList<Integer>()"
128,VARIABLEDECLARATION,"min",Sardas.java(50:9-50:31),"min = Double.MAX_VALUE"
129,VARIABLEDECLARATION,"u",Sardas.java(51:6-51:11),"u = 0"
130,VARIABLEDECLARATION,"menor",Sardas.java(52:6-52:15),"menor = 0"
131,LITERAL,"",Sardas.java(52:14-52:15),"0"
132,MEMBEREXPRESSION,"distance",Sardas.java(49:2-49:19),"nodes[v].distance"
133,LITERAL,"",Sardas.java(49:22-49:23),"0"
134,DECLAREDREFERENCEEXPRESSION,"Double",Sardas.java(50:15-50:21),"Double"
135,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(49:2-49:10),"nodes[v]"
136,MEMBEREXPRESSION,"nodes",Sardas.java(49:2-49:7),"nodes"
137,DECLAREDREFERENCEEXPRESSION,"v",Sardas.java(49:8-49:9),"v"
138,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(49:2-49:7),"this"
139,DECLAREDREFERENCEEXPRESSION,"q",Sardas.java(53:9-53:10),"q"
140,NEWEXPRESSION,"",Sardas.java(43:26-43:51),"new LinkedList<Integer>()"
141,LITERAL,"",Sardas.java(51:10-51:11),"0"
142,LITERAL,"",Sardas.java(45:12-45:13),"1"
143,MEMBEREXPRESSION,"MAX_VALUE",Sardas.java(50:15-50:31),"Double.MAX_VALUE"
144,BINARYOPERATOR,">",Sardas.java(53:9-53:21),"q.size() > 0"
145,COMPOUNDSTATEMENT,"",Sardas.java(53:23-73:3),"{
		min = Double.MAX_VALUE;
	    for(int i=1; i<=n; i++)
		if(q.contains(i) && nodes[i].distance < min){
			min = nodes[i].distance;
			menor = i;
		}
	
	    q.removeFirstOccurrence(menor);
		u = menor;
		
	    for (int w : nodes[u].adj) {
		double p = peso(u, w);
		if (q.contains(w) && p < nodes[w].distance)  {
		    nodes[w].pai = u;
		    nodes[w].distance = p;
		}	
	
	    }
		    
	}"
146,DECLAREDREFERENCEEXPRESSION,"min",Sardas.java(54:3-54:6),"min"
147,BINARYOPERATOR,"=",Sardas.java(54:3-54:26),"min = Double.MAX_VALUE;"
148,FORSTATEMENT,"",Sardas.java(55:6-59:4),"for(int i=1; i<=n; i++)
		if(q.contains(i) && nodes[i].distance < min){
			min = nodes[i].distance;
			menor = i;
		}"
149,MEMBERCALLEXPRESSION,"removeFirstOccurrence",Sardas.java(61:6-61:37),"q.removeFirstOccurrence(menor);"
150,BINARYOPERATOR,"=",Sardas.java(62:3-62:13),"u = menor;"
151,FOREACHSTATEMENT,"",Sardas.java(64:6-71:7),"for (int w : nodes[u].adj) {
		double p = peso(u, w);
		if (q.contains(w) && p < nodes[w].distance)  {
		    nodes[w].pai = u;
		    nodes[w].distance = p;
		}	
	
	    }"
152,MEMBEREXPRESSION,"MAX_VALUE",Sardas.java(54:9-54:25),"Double.MAX_VALUE"
153,LITERAL,"",Sardas.java(55:16-55:17),"1"
154,DECLAREDREFERENCEEXPRESSION,"Double",Sardas.java(54:9-54:15),"Double"
155,IFSTATEMENT,"",Sardas.java(56:3-59:4),"if(q.contains(i) && nodes[i].distance < min){
			min = nodes[i].distance;
			menor = i;
		}"
156,DECLARATIONSTATEMENT,"",Sardas.java(55:10-55:17),"int i=1"
157,BINARYOPERATOR,"<=",Sardas.java(55:19-55:23),"i<=n"
158,UNARYOPERATOR,"++",Sardas.java(55:25-55:28),"i++"
159,VARIABLEDECLARATION,"i",Sardas.java(55:14-55:17),"i=1"
160,DECLAREDREFERENCEEXPRESSION,"q",Sardas.java(56:6-56:7),"q"
161,DECLAREDREFERENCEEXPRESSION,"q",Sardas.java(61:6-61:7),"q"
162,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(55:19-55:20),"i"
163,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(55:25-55:26),"i"
164,COMPOUNDSTATEMENT,"",Sardas.java(56:47-59:4),"{
			min = nodes[i].distance;
			menor = i;
		}"
165,MEMBEREXPRESSION,"n",Sardas.java(55:22-55:23),"n"
166,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(55:22-55:23),"this"
167,BINARYOPERATOR,"&&",Sardas.java(56:6-56:46),"q.contains(i) && nodes[i].distance < min"
168,DECLAREDREFERENCEEXPRESSION,"min",Sardas.java(57:4-57:7),"min"
169,BINARYOPERATOR,"=",Sardas.java(57:4-57:28),"min = nodes[i].distance;"
170,BINARYOPERATOR,"=",Sardas.java(58:4-58:14),"menor = i;"
171,MEMBEREXPRESSION,"distance",Sardas.java(57:10-57:27),"nodes[i].distance"
172,DECLAREDREFERENCEEXPRESSION,"menor",Sardas.java(58:4-58:9),"menor"
173,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(57:10-57:18),"nodes[i]"
174,MEMBEREXPRESSION,"nodes",Sardas.java(57:10-57:15),"nodes"
175,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(57:16-57:17),"i"
176,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(57:10-57:15),"this"
177,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(58:12-58:13),"i"
178,MEMBERCALLEXPRESSION,"contains",Sardas.java(56:6-56:19),"q.contains(i)"
179,BINARYOPERATOR,"<",Sardas.java(56:23-56:46),"nodes[i].distance < min"
180,MEMBEREXPRESSION,"distance",Sardas.java(56:23-56:40),"nodes[i].distance"
181,DECLAREDREFERENCEEXPRESSION,"min",Sardas.java(56:43-56:46),"min"
182,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(56:23-56:31),"nodes[i]"
183,MEMBEREXPRESSION,"nodes",Sardas.java(56:23-56:28),"nodes"
184,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(56:29-56:30),"i"
185,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(56:23-56:28),"this"
186,DECLAREDREFERENCEEXPRESSION,"contains",Sardas.java(56:8-56:16),"contains"
187,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(56:17-56:18),"i"
188,DECLAREDREFERENCEEXPRESSION,"u",Sardas.java(62:3-62:4),"u"
189,DECLAREDREFERENCEEXPRESSION,"menor",Sardas.java(62:7-62:12),"menor"
190,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(64:19-64:24),"this"
191,DECLARATIONSTATEMENT,"",Sardas.java(64:11-64:16),"int w"
192,MEMBEREXPRESSION,"adj",Sardas.java(64:19-64:31),"nodes[u].adj"
193,COMPOUNDSTATEMENT,"",Sardas.java(64:33-71:7),"{
		double p = peso(u, w);
		if (q.contains(w) && p < nodes[w].distance)  {
		    nodes[w].pai = u;
		    nodes[w].distance = p;
		}	
	
	    }"
194,VARIABLEDECLARATION,"w",Sardas.java(64:15-64:16),"w"
195,DECLAREDREFERENCEEXPRESSION,"u",Sardas.java(65:19-65:20),"u"
196,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(64:19-64:27),"nodes[u]"
197,UNINITIALIZEDVALUE,"Uninitialized Value",,""
198,MEMBEREXPRESSION,"nodes",Sardas.java(64:19-64:24),"nodes"
199,DECLAREDREFERENCEEXPRESSION,"u",Sardas.java(64:25-64:26),"u"
200,DECLARATIONSTATEMENT,"",Sardas.java(65:3-65:25),"double p = peso(u, w);"
201,IFSTATEMENT,"",Sardas.java(66:3-69:4),"if (q.contains(w) && p < nodes[w].distance)  {
		    nodes[w].pai = u;
		    nodes[w].distance = p;
		}"
202,VARIABLEDECLARATION,"p",Sardas.java(65:10-65:24),"p = peso(u, w)"
203,COMPOUNDSTATEMENT,"",Sardas.java(66:48-69:4),"{
		    nodes[w].pai = u;
		    nodes[w].distance = p;
		}"
204,DECLAREDREFERENCEEXPRESSION,"q",Sardas.java(66:7-66:8),"q"
205,CALLEXPRESSION,"peso",Sardas.java(65:14-65:24),"peso(u, w)"
206,METHODDECLARATION,"peso",,""
207,METHODDECLARATION,"peso",,""
208,DECLAREDREFERENCEEXPRESSION,"w",Sardas.java(65:22-65:23),"w"
209,PARAMVARIABLEDECLARATION,"int1",,""
210,PARAMVARIABLEDECLARATION,"int1",,""
211,PARAMVARIABLEDECLARATION,"int0",,""
212,PARAMVARIABLEDECLARATION,"node0",,""
213,BINARYOPERATOR,"&&",Sardas.java(66:7-66:45),"q.contains(w) && p < nodes[w].distance"
214,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(67:7-67:12),"this"
215,MEMBERCALLEXPRESSION,"contains",Sardas.java(66:7-66:20),"q.contains(w)"
216,BINARYOPERATOR,"<",Sardas.java(66:24-66:45),"p < nodes[w].distance"
217,DECLAREDREFERENCEEXPRESSION,"contains",Sardas.java(66:9-66:17),"contains"
218,DECLAREDREFERENCEEXPRESSION,"p",Sardas.java(66:24-66:25),"p"
219,DECLAREDREFERENCEEXPRESSION,"w",Sardas.java(66:18-66:19),"w"
220,MEMBEREXPRESSION,"distance",Sardas.java(66:28-66:45),"nodes[w].distance"
221,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(66:28-66:36),"nodes[w]"
222,MEMBEREXPRESSION,"nodes",Sardas.java(66:28-66:33),"nodes"
223,DECLAREDREFERENCEEXPRESSION,"w",Sardas.java(66:34-66:35),"w"
224,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(66:28-66:33),"this"
225,BINARYOPERATOR,"=",Sardas.java(67:7-67:24),"nodes[w].pai = u;"
226,BINARYOPERATOR,"=",Sardas.java(68:7-68:29),"nodes[w].distance = p;"
227,MEMBEREXPRESSION,"pai",Sardas.java(67:7-67:19),"nodes[w].pai"
228,DECLAREDREFERENCEEXPRESSION,"u",Sardas.java(67:22-67:23),"u"
229,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(68:7-68:12),"this"
230,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(67:7-67:15),"nodes[w]"
231,MEMBEREXPRESSION,"nodes",Sardas.java(67:7-67:12),"nodes"
232,DECLAREDREFERENCEEXPRESSION,"w",Sardas.java(67:13-67:14),"w"
233,MEMBEREXPRESSION,"distance",Sardas.java(68:7-68:24),"nodes[w].distance"
234,DECLAREDREFERENCEEXPRESSION,"p",Sardas.java(68:27-68:28),"p"
235,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(68:7-68:15),"nodes[w]"
236,MEMBEREXPRESSION,"nodes",Sardas.java(68:7-68:12),"nodes"
237,DECLAREDREFERENCEEXPRESSION,"w",Sardas.java(68:13-68:14),"w"
238,DECLAREDREFERENCEEXPRESSION,"removeFirstOccurrence",Sardas.java(61:8-61:29),"removeFirstOccurrence"
239,DECLAREDREFERENCEEXPRESSION,"menor",Sardas.java(61:30-61:35),"menor"
240,MEMBERCALLEXPRESSION,"size",Sardas.java(53:9-53:17),"q.size()"
241,LITERAL,"",Sardas.java(53:20-53:21),"0"
242,DECLAREDREFERENCEEXPRESSION,"size",Sardas.java(53:11-53:15),"size"
243,COMPOUNDSTATEMENT,"",Sardas.java(45:25-48:3),"{
		nodes[i].distance = Double.MAX_VALUE;
		q.add(i);
	}"
244,DECLARATIONSTATEMENT,"",Sardas.java(45:6-45:13),"int i=1"
245,BINARYOPERATOR,"<=",Sardas.java(45:15-45:19),"i<=n"
246,UNARYOPERATOR,"++",Sardas.java(45:21-45:24),"i++"
247,VARIABLEDECLARATION,"i",Sardas.java(45:10-45:13),"i=1"
248,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(46:3-46:8),"this"
249,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(45:21-45:22),"i"
250,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(45:15-45:16),"i"
251,MEMBEREXPRESSION,"n",Sardas.java(45:18-45:19),"n"
252,DECLAREDREFERENCEEXPRESSION,"this",Sardas.java(45:18-45:19),"this"
253,BINARYOPERATOR,"=",Sardas.java(46:3-46:40),"nodes[i].distance = Double.MAX_VALUE;"
254,MEMBERCALLEXPRESSION,"add",Sardas.java(47:3-47:12),"q.add(i);"
255,DECLAREDREFERENCEEXPRESSION,"add",Sardas.java(47:5-47:8),"add"
256,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(47:9-47:10),"i"
257,DECLAREDREFERENCEEXPRESSION,"q",Sardas.java(47:3-47:4),"q"
258,MEMBEREXPRESSION,"distance",Sardas.java(46:3-46:20),"nodes[i].distance"
259,MEMBEREXPRESSION,"MAX_VALUE",Sardas.java(46:23-46:39),"Double.MAX_VALUE"
260,DECLAREDREFERENCEEXPRESSION,"Double",Sardas.java(46:23-46:29),"Double"
261,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(46:3-46:11),"nodes[i]"
262,MEMBEREXPRESSION,"nodes",Sardas.java(46:3-46:8),"nodes"
263,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(46:9-46:10),"i"
264,FIELDDECLARATION,"this",,""
265,METHODDECLARATION,"main",Sardas.java(78:5-97:6),"public static void main(String args[]) {
	Scanner in = new Scanner(System.in);
	int n = in.nextInt();
	Graph g = 	new Graph(n);
	for (int i=1; i<=n; i++) 
	    g.nodes[i]= new Node(in.nextDouble(), in.nextDouble());	

	for(int i=1; i<=n; i++)
		for(int j=1; j<=n; j++)
			g.nodes[i].adj.add(j);

	// Pesquisa em largura a partir do no 1
	g.Prim(1);
	double t=0.0;
	for(int i=1; i<=n; i++)
		t += g.nodes[i].distance;	
	
	System.out.printf(""%.2f\n"", t);
	
    }"
266,CONSTRUCTORDECLARATION,"Sardas",,""
267,VARIABLEDECLARATION,"this",,""
268,COMPOUNDSTATEMENT,"",Sardas.java(78:44-97:6),"{
	Scanner in = new Scanner(System.in);
	int n = in.nextInt();
	Graph g = 	new Graph(n);
	for (int i=1; i<=n; i++) 
	    g.nodes[i]= new Node(in.nextDouble(), in.nextDouble());	

	for(int i=1; i<=n; i++)
		for(int j=1; j<=n; j++)
			g.nodes[i].adj.add(j);

	// Pesquisa em largura a partir do no 1
	g.Prim(1);
	double t=0.0;
	for(int i=1; i<=n; i++)
		t += g.nodes[i].distance;	
	
	System.out.printf(""%.2f\n"", t);
	
    }"
269,PARAMVARIABLEDECLARATION,"args",Sardas.java(78:29-78:42),"String args[]"
270,DECLAREDREFERENCEEXPRESSION,"System",Sardas.java(79:27-79:33),"System"
271,RETURNSTATEMENT,"",,""
272,DECLARATIONSTATEMENT,"",Sardas.java(79:2-79:38),"Scanner in = new Scanner(System.in);"
273,DECLARATIONSTATEMENT,"",Sardas.java(80:2-80:23),"int n = in.nextInt();"
274,DECLARATIONSTATEMENT,"",Sardas.java(81:2-81:26),"Graph g = 	new Graph(n);"
275,FORSTATEMENT,"",Sardas.java(82:2-83:61),"for (int i=1; i<=n; i++) 
	    g.nodes[i]= new Node(in.nextDouble(), in.nextDouble());"
276,FORSTATEMENT,"",Sardas.java(85:2-87:26),"for(int i=1; i<=n; i++)
		for(int j=1; j<=n; j++)
			g.nodes[i].adj.add(j);"
277,MEMBERCALLEXPRESSION,"Prim",Sardas.java(90:2-90:12),"g.Prim(1);"
278,DECLARATIONSTATEMENT,"",Sardas.java(91:2-91:15),"double t=0.0;"
279,FORSTATEMENT,"",Sardas.java(92:2-93:28),"for(int i=1; i<=n; i++)
		t += g.nodes[i].distance;"
280,MEMBERCALLEXPRESSION,"printf",Sardas.java(95:2-95:33),"System.out.printf(""%.2f\n"", t);"
281,VARIABLEDECLARATION,"in",Sardas.java(79:10-79:37),"in = new Scanner(System.in)"
282,VARIABLEDECLARATION,"n",Sardas.java(80:6-80:22),"n = in.nextInt()"
283,VARIABLEDECLARATION,"g",Sardas.java(81:8-81:25),"g = 	new Graph(n)"
284,VARIABLEDECLARATION,"t",Sardas.java(91:9-91:14),"t=0.0"
285,NEWEXPRESSION,"",Sardas.java(79:15-79:37),"new Scanner(System.in)"
286,CONSTRUCTEXPRESSION,"",Sardas.java(79:15-79:37),"new Scanner(System.in)"
287,MEMBEREXPRESSION,"in",Sardas.java(79:27-79:36),"System.in"
288,FORSTATEMENT,"",Sardas.java(86:3-87:26),"for(int j=1; j<=n; j++)
			g.nodes[i].adj.add(j);"
289,DECLARATIONSTATEMENT,"",Sardas.java(85:6-85:13),"int i=1"
290,BINARYOPERATOR,"<=",Sardas.java(85:15-85:19),"i<=n"
291,UNARYOPERATOR,"++",Sardas.java(85:21-85:24),"i++"
292,VARIABLEDECLARATION,"i",Sardas.java(85:10-85:13),"i=1"
293,LITERAL,"",Sardas.java(86:13-86:14),"1"
294,DECLAREDREFERENCEEXPRESSION,"g",Sardas.java(90:2-90:3),"g"
295,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(85:15-85:16),"i"
296,DECLAREDREFERENCEEXPRESSION,"n",Sardas.java(85:18-85:19),"n"
297,MEMBERCALLEXPRESSION,"add",Sardas.java(87:4-87:26),"g.nodes[i].adj.add(j);"
298,DECLARATIONSTATEMENT,"",Sardas.java(86:7-86:14),"int j=1"
299,BINARYOPERATOR,"<=",Sardas.java(86:16-86:20),"j<=n"
300,UNARYOPERATOR,"++",Sardas.java(86:22-86:25),"j++"
301,VARIABLEDECLARATION,"j",Sardas.java(86:11-86:14),"j=1"
302,DECLAREDREFERENCEEXPRESSION,"g",Sardas.java(87:4-87:5),"g"
303,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(85:21-85:22),"i"
304,DECLAREDREFERENCEEXPRESSION,"add",Sardas.java(87:19-87:22),"add"
305,DECLAREDREFERENCEEXPRESSION,"j",Sardas.java(86:22-86:23),"j"
306,DECLAREDREFERENCEEXPRESSION,"j",Sardas.java(87:23-87:24),"j"
307,MEMBEREXPRESSION,"adj",Sardas.java(87:4-87:18),"g.nodes[i].adj"
308,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(87:4-87:14),"g.nodes[i]"
309,MEMBEREXPRESSION,"nodes",Sardas.java(87:4-87:11),"g.nodes"
310,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(87:12-87:13),"i"
311,DECLAREDREFERENCEEXPRESSION,"j",Sardas.java(86:16-86:17),"j"
312,DECLAREDREFERENCEEXPRESSION,"n",Sardas.java(86:19-86:20),"n"
313,LITERAL,"",Sardas.java(85:12-85:13),"1"
314,DECLAREDREFERENCEEXPRESSION,"Prim",Sardas.java(90:4-90:8),"Prim"
315,METHODDECLARATION,"Prim",,""
316,LITERAL,"",Sardas.java(91:11-91:14),"0.0"
317,LITERAL,"",Sardas.java(90:9-90:10),"1"
318,PARAMVARIABLEDECLARATION,"node0",,""
319,DECLAREDREFERENCEEXPRESSION,"n",Sardas.java(81:23-81:24),"n"
320,LITERAL,"",Sardas.java(82:13-82:14),"1"
321,BINARYOPERATOR,"=",Sardas.java(83:6-83:61),"g.nodes[i]= new Node(in.nextDouble(), in.nextDouble());"
322,DECLARATIONSTATEMENT,"",Sardas.java(82:7-82:14),"int i=1"
323,BINARYOPERATOR,"<=",Sardas.java(82:16-82:20),"i<=n"
324,UNARYOPERATOR,"++",Sardas.java(82:22-82:25),"i++"
325,VARIABLEDECLARATION,"i",Sardas.java(82:11-82:14),"i=1"
326,DECLAREDREFERENCEEXPRESSION,"g",Sardas.java(83:6-83:7),"g"
327,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(83:6-83:16),"g.nodes[i]"
328,NEWEXPRESSION,"",Sardas.java(83:18-83:60),"new Node(in.nextDouble(), in.nextDouble())"
329,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(82:22-82:23),"i"
330,MEMBEREXPRESSION,"nodes",Sardas.java(83:6-83:13),"g.nodes"
331,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(83:14-83:15),"i"
332,DECLAREDREFERENCEEXPRESSION,"in",Sardas.java(83:27-83:29),"in"
333,CONSTRUCTEXPRESSION,"",Sardas.java(83:18-83:60),"new Node(in.nextDouble(), in.nextDouble())"
334,CONSTRUCTORDECLARATION,"Node",,""
335,MEMBERCALLEXPRESSION,"nextDouble",Sardas.java(83:44-83:59),"in.nextDouble()"
336,MEMBERCALLEXPRESSION,"nextDouble",Sardas.java(83:27-83:42),"in.nextDouble()"
337,DECLAREDREFERENCEEXPRESSION,"nextDouble",Sardas.java(83:30-83:40),"nextDouble"
338,PARAMVARIABLEDECLARATION,"double0",,""
339,DECLAREDREFERENCEEXPRESSION,"in",Sardas.java(83:44-83:46),"in"
340,DECLAREDREFERENCEEXPRESSION,"nextDouble",Sardas.java(83:47-83:57),"nextDouble"
341,PARAMVARIABLEDECLARATION,"double1",,""
342,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(82:16-82:17),"i"
343,DECLAREDREFERENCEEXPRESSION,"n",Sardas.java(82:19-82:20),"n"
344,DECLAREDREFERENCEEXPRESSION,"printf",Sardas.java(95:13-95:19),"printf"
345,DECLAREDREFERENCEEXPRESSION,"t",Sardas.java(95:30-95:31),"t"
346,LITERAL,"",Sardas.java(95:20-95:28),"""%.2f\n"""
347,MEMBEREXPRESSION,"out",Sardas.java(95:2-95:12),"System.out"
348,DECLAREDREFERENCEEXPRESSION,"System",Sardas.java(95:2-95:8),"System"
349,LITERAL,"",Sardas.java(92:12-92:13),"1"
350,NEWEXPRESSION,"",Sardas.java(81:13-81:25),"new Graph(n)"
351,CONSTRUCTEXPRESSION,"",Sardas.java(81:13-81:25),"new Graph(n)"
352,CONSTRUCTORDECLARATION,"Graph",Prob19.java(28:5-33:6),"Graph(int n) {
	this.n = n;
	nodes  = new Node[n+1]; // +1 se os comecam em 1 ao inves de 0
	for (int i=1; i<=n; i++)
	    nodes[i] = new Node();
    }"
353,PARAMVARIABLEDECLARATION,"n",Prob19.java(28:11-28:16),"int n"
354,BINARYOPERATOR,"+=",Sardas.java(93:3-93:28),"t += g.nodes[i].distance;"
355,DECLARATIONSTATEMENT,"",Sardas.java(92:6-92:13),"int i=1"
356,BINARYOPERATOR,"<=",Sardas.java(92:15-92:19),"i<=n"
357,UNARYOPERATOR,"++",Sardas.java(92:21-92:24),"i++"
358,VARIABLEDECLARATION,"i",Sardas.java(92:10-92:13),"i=1"
359,DECLAREDREFERENCEEXPRESSION,"t",Sardas.java(93:3-93:4),"t"
360,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(92:15-92:16),"i"
361,DECLAREDREFERENCEEXPRESSION,"n",Sardas.java(92:18-92:19),"n"
362,MEMBEREXPRESSION,"distance",Sardas.java(93:8-93:27),"g.nodes[i].distance"
363,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(92:21-92:22),"i"
364,DECLAREDREFERENCEEXPRESSION,"g",Sardas.java(93:8-93:9),"g"
365,ARRAYSUBSCRIPTIONEXPRESSION,"",Sardas.java(93:8-93:18),"g.nodes[i]"
366,MEMBEREXPRESSION,"nodes",Sardas.java(93:8-93:15),"g.nodes"
367,DECLAREDREFERENCEEXPRESSION,"i",Sardas.java(93:16-93:17),"i"
368,DECLAREDREFERENCEEXPRESSION,"in",Sardas.java(80:10-80:12),"in"
369,MEMBERCALLEXPRESSION,"nextInt",Sardas.java(80:10-80:22),"in.nextInt()"
370,DECLAREDREFERENCEEXPRESSION,"nextInt",Sardas.java(80:13-80:20),"nextInt"

id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07577313_21_201005025/Main.java",,""
2,RECORDDECLARATION,"Main",Main.java(5:1-78:2),"public class Main {
	static BufferedReader stdin = new BufferedReader(new InputStreamReader(
			System.in));
	static StringTokenizer st = new StringTokenizer("""");

	// Read next input-token as string.
	static String readString() throws Exception {
		while (!st.hasMoreTokens()) {
			st = new StringTokenizer(stdin.readLine());
		}
		return st.nextToken();
	}

	// Read next input-token as integer.
	static int readInt() throws Exception {
		return Integer.parseInt(readString());
	}

	// Read next input-token as double.
	static double readDouble() throws Exception {
		return Double.parseDouble(readString());
	}

	public static void main(String[] args) throws Exception {


			Double total = Double.valueOf(0);
			int numberOfFreckles = readInt();

			Double[][] freckles = new Double[numberOfFreckles][2];
			int[] sets = new int[numberOfFreckles];

			for (int i = 0; i < numberOfFreckles; i++) {
				freckles[i][0] = readDouble();
				freckles[i][1] = readDouble();
				sets[i] = i; //legger alle fregner i et set
			}

			for (int i = 1; i < numberOfFreckles; i++) {

				// curretn set sets[i];
				Double shortest = Double.MAX_VALUE;
				int s = -1;

				// finn naermeste fregne fra f[i] som ikke er i samme sett
				for (int j=0; j < numberOfFreckles; j++) {
					s = -1;

//					System.out.println(""set i: "" + sets[i] + "" set j: "" + sets[j]);

					if ( sets[i] != sets[j]) {

						Double n = findDistance(freckles[i], freckles[j]);
						if (n < shortest) {
							shortest = n;
							s = sets[j];
						}
					}
				}

				total += shortest;
				sets[i] = s;
			}

			System.out.printf(""%.2f\n"", total);

	}

	private static double findDistance(Double[] f1, Double[] f2) {
		return Math.sqrt( ((f1[0] - f2[0])*(f1[0] - f2[0])) + ((f1[1] - f2[1])*(f1[1] - f2[1])) );
	}


}"
3,INCLUDEDECLARATION,"java.io.BufferedReader",,""
4,INCLUDEDECLARATION,"java.io.InputStreamReader",,""
5,INCLUDEDECLARATION,"java.util.StringTokenizer",,""
6,FIELDDECLARATION,"this",,""
7,FIELDDECLARATION,"stdin",Main.java(6:2-7:16),"stdin = new BufferedReader(new InputStreamReader(System.in))"
8,FIELDDECLARATION,"st",Main.java(8:2-8:54),"st = new StringTokenizer("""")"
9,METHODDECLARATION,"readString",Main.java(11:2-16:3),"static String readString() throws Exception {
		while (!st.hasMoreTokens()) {
			st = new StringTokenizer(stdin.readLine());
		}
		return st.nextToken();
	}"
10,METHODDECLARATION,"readInt",Main.java(19:2-21:3),"static int readInt() throws Exception {
		return Integer.parseInt(readString());
	}"
11,METHODDECLARATION,"readDouble",Main.java(24:2-26:3),"static double readDouble() throws Exception {
		return Double.parseDouble(readString());
	}"
12,METHODDECLARATION,"main",Main.java(28:2-71:3),"public static void main(String[] args) throws Exception {


			Double total = Double.valueOf(0);
			int numberOfFreckles = readInt();

			Double[][] freckles = new Double[numberOfFreckles][2];
			int[] sets = new int[numberOfFreckles];

			for (int i = 0; i < numberOfFreckles; i++) {
				freckles[i][0] = readDouble();
				freckles[i][1] = readDouble();
				sets[i] = i; //legger alle fregner i et set
			}

			for (int i = 1; i < numberOfFreckles; i++) {

				// curretn set sets[i];
				Double shortest = Double.MAX_VALUE;
				int s = -1;

				// finn naermeste fregne fra f[i] som ikke er i samme sett
				for (int j=0; j < numberOfFreckles; j++) {
					s = -1;

//					System.out.println(""set i: "" + sets[i] + "" set j: "" + sets[j]);

					if ( sets[i] != sets[j]) {

						Double n = findDistance(freckles[i], freckles[j]);
						if (n < shortest) {
							shortest = n;
							s = sets[j];
						}
					}
				}

				total += shortest;
				sets[i] = s;
			}

			System.out.printf(""%.2f\n"", total);

	}"
13,METHODDECLARATION,"findDistance",Main.java(73:2-75:3),"private static double findDistance(Double[] f1, Double[] f2) {
		return Math.sqrt( ((f1[0] - f2[0])*(f1[0] - f2[0])) + ((f1[1] - f2[1])*(f1[1] - f2[1])) );
	}"
14,CONSTRUCTORDECLARATION,"Main",,""
15,NEWEXPRESSION,"",Main.java(8:30-8:53),"new StringTokenizer("""")"
16,CONSTRUCTEXPRESSION,"",Main.java(8:30-8:53),"new StringTokenizer("""")"
17,VARIABLEDECLARATION,"this",,""
18,COMPOUNDSTATEMENT,"",Main.java(11:46-16:3),"{
		while (!st.hasMoreTokens()) {
			st = new StringTokenizer(stdin.readLine());
		}
		return st.nextToken();
	}"
19,OBJECTTYPE,"Exception",,""
20,DECLAREDREFERENCEEXPRESSION,"Main",Main.java(12:11-12:13),"Main"
21,RETURNSTATEMENT,"",Main.java(15:3-15:25),"return st.nextToken();"
22,WHILESTATEMENT,"",Main.java(12:3-14:4),"while (!st.hasMoreTokens()) {
			st = new StringTokenizer(stdin.readLine());
		}"
23,MEMBERCALLEXPRESSION,"nextToken",Main.java(15:10-15:24),"st.nextToken()"
24,DECLAREDREFERENCEEXPRESSION,"nextToken",Main.java(15:13-15:22),"nextToken"
25,MEMBEREXPRESSION,"st",Main.java(15:10-15:12),"st"
26,DECLAREDREFERENCEEXPRESSION,"Main",Main.java(15:10-15:12),"Main"
27,UNARYOPERATOR,"!",Main.java(12:10-12:29),"!st.hasMoreTokens()"
28,COMPOUNDSTATEMENT,"",Main.java(12:31-14:4),"{
			st = new StringTokenizer(stdin.readLine());
		}"
29,DECLAREDREFERENCEEXPRESSION,"Main",Main.java(13:4-13:6),"Main"
30,MEMBERCALLEXPRESSION,"hasMoreTokens",Main.java(12:11-12:29),"st.hasMoreTokens()"
31,DECLAREDREFERENCEEXPRESSION,"hasMoreTokens",Main.java(12:14-12:27),"hasMoreTokens"
32,MEMBEREXPRESSION,"st",Main.java(12:11-12:13),"st"
33,BINARYOPERATOR,"=",Main.java(13:4-13:47),"st = new StringTokenizer(stdin.readLine());"
34,MEMBEREXPRESSION,"st",Main.java(13:4-13:6),"st"
35,NEWEXPRESSION,"",Main.java(13:9-13:46),"new StringTokenizer(stdin.readLine())"
36,DECLAREDREFERENCEEXPRESSION,"Main",Main.java(13:29-13:34),"Main"
37,CONSTRUCTEXPRESSION,"",Main.java(13:9-13:46),"new StringTokenizer(stdin.readLine())"
38,MEMBERCALLEXPRESSION,"readLine",Main.java(13:29-13:45),"stdin.readLine()"
39,DECLAREDREFERENCEEXPRESSION,"readLine",Main.java(13:35-13:43),"readLine"
40,MEMBEREXPRESSION,"stdin",Main.java(13:29-13:34),"stdin"
41,VARIABLEDECLARATION,"this",,""
42,COMPOUNDSTATEMENT,"",Main.java(19:40-21:3),"{
		return Integer.parseInt(readString());
	}"
43,CALLEXPRESSION,"readString",Main.java(20:27-20:39),"readString()"
44,RETURNSTATEMENT,"",Main.java(20:3-20:41),"return Integer.parseInt(readString());"
45,STATICCALLEXPRESSION,"parseInt",Main.java(20:10-20:40),"Integer.parseInt(readString())"
46,METHODDECLARATION,"readString",,""
47,VARIABLEDECLARATION,"this",,""
48,COMPOUNDSTATEMENT,"",Main.java(73:63-75:3),"{
		return Math.sqrt( ((f1[0] - f2[0])*(f1[0] - f2[0])) + ((f1[1] - f2[1])*(f1[1] - f2[1])) );
	}"
49,PARAMVARIABLEDECLARATION,"f1",Main.java(73:37-73:48),"Double[] f1"
50,PARAMVARIABLEDECLARATION,"f2",Main.java(73:50-73:61),"Double[] f2"
51,DECLAREDREFERENCEEXPRESSION,"f1",Main.java(74:23-74:25),"f1"
52,RETURNSTATEMENT,"",Main.java(74:3-74:93),"return Math.sqrt( ((f1[0] - f2[0])*(f1[0] - f2[0])) + ((f1[1] - f2[1])*(f1[1] - f2[1])) );"
53,STATICCALLEXPRESSION,"sqrt",Main.java(74:10-74:92),"Math.sqrt( ((f1[0] - f2[0])*(f1[0] - f2[0])) + ((f1[1] - f2[1])*(f1[1] - f2[1])) )"
54,BINARYOPERATOR,"+",Main.java(74:21-74:90),"((f1[0] - f2[0])*(f1[0] - f2[0])) + ((f1[1] - f2[1])*(f1[1] - f2[1]))"
55,BINARYOPERATOR,"*",Main.java(74:22-74:53),"(f1[0] - f2[0])*(f1[0] - f2[0])"
56,BINARYOPERATOR,"*",Main.java(74:58-74:89),"(f1[1] - f2[1])*(f1[1] - f2[1])"
57,BINARYOPERATOR,"-",Main.java(74:23-74:36),"f1[0] - f2[0]"
58,BINARYOPERATOR,"-",Main.java(74:39-74:52),"f1[0] - f2[0]"
59,DECLAREDREFERENCEEXPRESSION,"f1",Main.java(74:59-74:61),"f1"
60,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(74:23-74:28),"f1[0]"
61,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(74:31-74:36),"f2[0]"
62,DECLAREDREFERENCEEXPRESSION,"f1",Main.java(74:39-74:41),"f1"
63,DECLAREDREFERENCEEXPRESSION,"f2",Main.java(74:31-74:33),"f2"
64,LITERAL,"",Main.java(74:34-74:35),"0"
65,LITERAL,"",Main.java(74:26-74:27),"0"
66,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(74:39-74:44),"f1[0]"
67,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(74:47-74:52),"f2[0]"
68,DECLAREDREFERENCEEXPRESSION,"f2",Main.java(74:47-74:49),"f2"
69,LITERAL,"",Main.java(74:50-74:51),"0"
70,LITERAL,"",Main.java(74:42-74:43),"0"
71,BINARYOPERATOR,"-",Main.java(74:59-74:72),"f1[1] - f2[1]"
72,BINARYOPERATOR,"-",Main.java(74:75-74:88),"f1[1] - f2[1]"
73,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(74:59-74:64),"f1[1]"
74,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(74:67-74:72),"f2[1]"
75,DECLAREDREFERENCEEXPRESSION,"f1",Main.java(74:75-74:77),"f1"
76,DECLAREDREFERENCEEXPRESSION,"f2",Main.java(74:67-74:69),"f2"
77,LITERAL,"",Main.java(74:70-74:71),"1"
78,LITERAL,"",Main.java(74:62-74:63),"1"
79,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(74:75-74:80),"f1[1]"
80,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(74:83-74:88),"f2[1]"
81,DECLAREDREFERENCEEXPRESSION,"f2",Main.java(74:83-74:85),"f2"
82,LITERAL,"",Main.java(74:86-74:87),"1"
83,LITERAL,"",Main.java(74:78-74:79),"1"
84,NEWEXPRESSION,"",Main.java(6:32-7:15),"new BufferedReader(new InputStreamReader(
			System.in))"
85,CONSTRUCTEXPRESSION,"",Main.java(6:32-7:15),"new BufferedReader(new InputStreamReader(
			System.in))"
86,NEWEXPRESSION,"",Main.java(6:51-7:14),"new InputStreamReader(
			System.in)"
87,CONSTRUCTEXPRESSION,"",Main.java(6:51-7:14),"new InputStreamReader(
			System.in)"
88,MEMBEREXPRESSION,"in",Main.java(7:4-7:13),"System.in"
89,DECLAREDREFERENCEEXPRESSION,"System",Main.java(7:4-7:10),"System"
90,VARIABLEDECLARATION,"this",,""
91,COMPOUNDSTATEMENT,"",Main.java(24:46-26:3),"{
		return Double.parseDouble(readString());
	}"
92,CALLEXPRESSION,"readString",Main.java(25:29-25:41),"readString()"
93,RETURNSTATEMENT,"",Main.java(25:3-25:43),"return Double.parseDouble(readString());"
94,STATICCALLEXPRESSION,"parseDouble",Main.java(25:10-25:42),"Double.parseDouble(readString())"
95,VARIABLEDECLARATION,"this",,""
96,COMPOUNDSTATEMENT,"",Main.java(28:58-71:3),"{


			Double total = Double.valueOf(0);
			int numberOfFreckles = readInt();

			Double[][] freckles = new Double[numberOfFreckles][2];
			int[] sets = new int[numberOfFreckles];

			for (int i = 0; i < numberOfFreckles; i++) {
				freckles[i][0] = readDouble();
				freckles[i][1] = readDouble();
				sets[i] = i; //legger alle fregner i et set
			}

			for (int i = 1; i < numberOfFreckles; i++) {

				// curretn set sets[i];
				Double shortest = Double.MAX_VALUE;
				int s = -1;

				// finn naermeste fregne fra f[i] som ikke er i samme sett
				for (int j=0; j < numberOfFreckles; j++) {
					s = -1;

//					System.out.println(""set i: "" + sets[i] + "" set j: "" + sets[j]);

					if ( sets[i] != sets[j]) {

						Double n = findDistance(freckles[i], freckles[j]);
						if (n < shortest) {
							shortest = n;
							s = sets[j];
						}
					}
				}

				total += shortest;
				sets[i] = s;
			}

			System.out.printf(""%.2f\n"", total);

	}"
97,PARAMVARIABLEDECLARATION,"args",Main.java(28:26-28:39),"String[] args"
98,LITERAL,"",Main.java(31:34-31:35),"0"
99,RETURNSTATEMENT,"",,""
100,DECLARATIONSTATEMENT,"",Main.java(31:4-31:37),"Double total = Double.valueOf(0);"
101,DECLARATIONSTATEMENT,"",Main.java(32:4-32:37),"int numberOfFreckles = readInt();"
102,DECLARATIONSTATEMENT,"",Main.java(34:4-34:58),"Double[][] freckles = new Double[numberOfFreckles][2];"
103,DECLARATIONSTATEMENT,"",Main.java(35:4-35:43),"int[] sets = new int[numberOfFreckles];"
104,FORSTATEMENT,"",Main.java(37:4-41:5),"for (int i = 0; i < numberOfFreckles; i++) {
				freckles[i][0] = readDouble();
				freckles[i][1] = readDouble();
				sets[i] = i; //legger alle fregner i et set
			}"
105,FORSTATEMENT,"",Main.java(43:4-67:5),"for (int i = 1; i < numberOfFreckles; i++) {

				// curretn set sets[i];
				Double shortest = Double.MAX_VALUE;
				int s = -1;

				// finn naermeste fregne fra f[i] som ikke er i samme sett
				for (int j=0; j < numberOfFreckles; j++) {
					s = -1;

//					System.out.println(""set i: "" + sets[i] + "" set j: "" + sets[j]);

					if ( sets[i] != sets[j]) {

						Double n = findDistance(freckles[i], freckles[j]);
						if (n < shortest) {
							shortest = n;
							s = sets[j];
						}
					}
				}

				total += shortest;
				sets[i] = s;
			}"
106,MEMBERCALLEXPRESSION,"printf",Main.java(69:4-69:39),"System.out.printf(""%.2f\n"", total);"
107,VARIABLEDECLARATION,"total",Main.java(31:11-31:36),"total = Double.valueOf(0)"
108,VARIABLEDECLARATION,"numberOfFreckles",Main.java(32:8-32:36),"numberOfFreckles = readInt()"
109,VARIABLEDECLARATION,"freckles",Main.java(34:15-34:57),"freckles = new Double[numberOfFreckles][2]"
110,VARIABLEDECLARATION,"sets",Main.java(35:10-35:42),"sets = new int[numberOfFreckles]"
111,STATICCALLEXPRESSION,"valueOf",Main.java(31:19-31:36),"Double.valueOf(0)"
112,ARRAYCREATIONEXPRESSION,"",Main.java(35:17-35:42),"new int[numberOfFreckles]"
113,DECLAREDREFERENCEEXPRESSION,"numberOfFreckles",Main.java(35:25-35:41),"numberOfFreckles"
114,ARRAYCREATIONEXPRESSION,"",Main.java(34:26-34:57),"new Double[numberOfFreckles][2]"
115,DECLAREDREFERENCEEXPRESSION,"numberOfFreckles",Main.java(34:37-34:53),"numberOfFreckles"
116,LITERAL,"",Main.java(34:55-34:56),"2"
117,DECLAREDREFERENCEEXPRESSION,"printf",Main.java(69:15-69:21),"printf"
118,DECLAREDREFERENCEEXPRESSION,"total",Main.java(69:32-69:37),"total"
119,LITERAL,"",Main.java(69:22-69:30),"""%.2f\n"""
120,MEMBEREXPRESSION,"out",Main.java(69:4-69:14),"System.out"
121,DECLAREDREFERENCEEXPRESSION,"System",Main.java(69:4-69:10),"System"
122,COMPOUNDSTATEMENT,"",Main.java(37:47-41:5),"{
				freckles[i][0] = readDouble();
				freckles[i][1] = readDouble();
				sets[i] = i; //legger alle fregner i et set
			}"
123,DECLARATIONSTATEMENT,"",Main.java(37:9-37:18),"int i = 0"
124,BINARYOPERATOR,"<",Main.java(37:20-37:40),"i < numberOfFreckles"
125,UNARYOPERATOR,"++",Main.java(37:42-37:45),"i++"
126,VARIABLEDECLARATION,"i",Main.java(37:13-37:18),"i = 0"
127,DECLAREDREFERENCEEXPRESSION,"freckles",Main.java(38:5-38:13),"freckles"
128,LITERAL,"",Main.java(43:17-43:18),"1"
129,LITERAL,"",Main.java(37:17-37:18),"0"
130,DECLAREDREFERENCEEXPRESSION,"i",Main.java(37:20-37:21),"i"
131,DECLAREDREFERENCEEXPRESSION,"numberOfFreckles",Main.java(37:24-37:40),"numberOfFreckles"
132,DECLAREDREFERENCEEXPRESSION,"i",Main.java(37:42-37:43),"i"
133,BINARYOPERATOR,"=",Main.java(38:5-38:35),"freckles[i][0] = readDouble();"
134,BINARYOPERATOR,"=",Main.java(39:5-39:35),"freckles[i][1] = readDouble();"
135,BINARYOPERATOR,"=",Main.java(40:5-40:17),"sets[i] = i;"
136,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(39:5-39:19),"freckles[i][1]"
137,CALLEXPRESSION,"readDouble",Main.java(39:22-39:34),"readDouble()"
138,DECLAREDREFERENCEEXPRESSION,"sets",Main.java(40:5-40:9),"sets"
139,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(39:5-39:16),"freckles[i]"
140,LITERAL,"",Main.java(39:17-39:18),"1"
141,DECLAREDREFERENCEEXPRESSION,"freckles",Main.java(39:5-39:13),"freckles"
142,DECLAREDREFERENCEEXPRESSION,"i",Main.java(39:14-39:15),"i"
143,METHODDECLARATION,"readDouble",,""
144,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(40:5-40:12),"sets[i]"
145,DECLAREDREFERENCEEXPRESSION,"i",Main.java(40:15-40:16),"i"
146,DECLAREDREFERENCEEXPRESSION,"i",Main.java(40:10-40:11),"i"
147,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(38:5-38:19),"freckles[i][0]"
148,CALLEXPRESSION,"readDouble",Main.java(38:22-38:34),"readDouble()"
149,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(38:5-38:16),"freckles[i]"
150,LITERAL,"",Main.java(38:17-38:18),"0"
151,DECLAREDREFERENCEEXPRESSION,"i",Main.java(38:14-38:15),"i"
152,CALLEXPRESSION,"readInt",Main.java(32:27-32:36),"readInt()"
153,METHODDECLARATION,"readInt",,""
154,COMPOUNDSTATEMENT,"",Main.java(43:47-67:5),"{

				// curretn set sets[i];
				Double shortest = Double.MAX_VALUE;
				int s = -1;

				// finn naermeste fregne fra f[i] som ikke er i samme sett
				for (int j=0; j < numberOfFreckles; j++) {
					s = -1;

//					System.out.println(""set i: "" + sets[i] + "" set j: "" + sets[j]);

					if ( sets[i] != sets[j]) {

						Double n = findDistance(freckles[i], freckles[j]);
						if (n < shortest) {
							shortest = n;
							s = sets[j];
						}
					}
				}

				total += shortest;
				sets[i] = s;
			}"
155,DECLARATIONSTATEMENT,"",Main.java(43:9-43:18),"int i = 1"
156,BINARYOPERATOR,"<",Main.java(43:20-43:40),"i < numberOfFreckles"
157,UNARYOPERATOR,"++",Main.java(43:42-43:45),"i++"
158,VARIABLEDECLARATION,"i",Main.java(43:13-43:18),"i = 1"
159,DECLAREDREFERENCEEXPRESSION,"Double",Main.java(46:23-46:29),"Double"
160,DECLAREDREFERENCEEXPRESSION,"i",Main.java(43:20-43:21),"i"
161,DECLAREDREFERENCEEXPRESSION,"numberOfFreckles",Main.java(43:24-43:40),"numberOfFreckles"
162,DECLAREDREFERENCEEXPRESSION,"i",Main.java(43:42-43:43),"i"
163,DECLARATIONSTATEMENT,"",Main.java(46:5-46:40),"Double shortest = Double.MAX_VALUE;"
164,DECLARATIONSTATEMENT,"",Main.java(47:5-47:16),"int s = -1;"
165,FORSTATEMENT,"",Main.java(50:5-63:6),"for (int j=0; j < numberOfFreckles; j++) {
					s = -1;

//					System.out.println(""set i: "" + sets[i] + "" set j: "" + sets[j]);

					if ( sets[i] != sets[j]) {

						Double n = findDistance(freckles[i], freckles[j]);
						if (n < shortest) {
							shortest = n;
							s = sets[j];
						}
					}
				}"
166,BINARYOPERATOR,"+=",Main.java(65:5-65:23),"total += shortest;"
167,BINARYOPERATOR,"=",Main.java(66:5-66:17),"sets[i] = s;"
168,VARIABLEDECLARATION,"shortest",Main.java(46:12-46:39),"shortest = Double.MAX_VALUE"
169,VARIABLEDECLARATION,"s",Main.java(47:9-47:15),"s = -1"
170,MEMBEREXPRESSION,"MAX_VALUE",Main.java(46:23-46:39),"Double.MAX_VALUE"
171,UNARYOPERATOR,"-",Main.java(47:13-47:15),"-1"
172,LITERAL,"",Main.java(47:14-47:15),"1"
173,DECLAREDREFERENCEEXPRESSION,"total",Main.java(65:5-65:10),"total"
174,DECLAREDREFERENCEEXPRESSION,"shortest",Main.java(65:14-65:22),"shortest"
175,DECLAREDREFERENCEEXPRESSION,"sets",Main.java(66:5-66:9),"sets"
176,LITERAL,"",Main.java(50:16-50:17),"0"
177,COMPOUNDSTATEMENT,"",Main.java(50:46-63:6),"{
					s = -1;

//					System.out.println(""set i: "" + sets[i] + "" set j: "" + sets[j]);

					if ( sets[i] != sets[j]) {

						Double n = findDistance(freckles[i], freckles[j]);
						if (n < shortest) {
							shortest = n;
							s = sets[j];
						}
					}
				}"
178,DECLARATIONSTATEMENT,"",Main.java(50:10-50:17),"int j=0"
179,BINARYOPERATOR,"<",Main.java(50:19-50:39),"j < numberOfFreckles"
180,UNARYOPERATOR,"++",Main.java(50:41-50:44),"j++"
181,VARIABLEDECLARATION,"j",Main.java(50:14-50:17),"j=0"
182,DECLAREDREFERENCEEXPRESSION,"s",Main.java(51:6-51:7),"s"
183,DECLAREDREFERENCEEXPRESSION,"j",Main.java(50:19-50:20),"j"
184,DECLAREDREFERENCEEXPRESSION,"j",Main.java(50:41-50:42),"j"
185,BINARYOPERATOR,"=",Main.java(51:6-51:13),"s = -1;"
186,IFSTATEMENT,"",Main.java(55:6-62:7),"if ( sets[i] != sets[j]) {

						Double n = findDistance(freckles[i], freckles[j]);
						if (n < shortest) {
							shortest = n;
							s = sets[j];
						}
					}"
187,COMPOUNDSTATEMENT,"",Main.java(55:31-62:7),"{

						Double n = findDistance(freckles[i], freckles[j]);
						if (n < shortest) {
							shortest = n;
							s = sets[j];
						}
					}"
188,UNARYOPERATOR,"-",Main.java(51:10-51:12),"-1"
189,DECLAREDREFERENCEEXPRESSION,"sets",Main.java(55:11-55:15),"sets"
190,LITERAL,"",Main.java(51:11-51:12),"1"
191,BINARYOPERATOR,"!=",Main.java(55:11-55:29),"sets[i] != sets[j]"
192,DECLAREDREFERENCEEXPRESSION,"freckles",Main.java(57:31-57:39),"freckles"
193,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(55:11-55:18),"sets[i]"
194,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(55:22-55:29),"sets[j]"
195,DECLAREDREFERENCEEXPRESSION,"i",Main.java(55:16-55:17),"i"
196,DECLAREDREFERENCEEXPRESSION,"sets",Main.java(55:22-55:26),"sets"
197,DECLAREDREFERENCEEXPRESSION,"j",Main.java(55:27-55:28),"j"
198,DECLARATIONSTATEMENT,"",Main.java(57:7-57:57),"Double n = findDistance(freckles[i], freckles[j]);"
199,IFSTATEMENT,"",Main.java(58:7-61:8),"if (n < shortest) {
							shortest = n;
							s = sets[j];
						}"
200,VARIABLEDECLARATION,"n",Main.java(57:14-57:56),"n = findDistance(freckles[i], freckles[j])"
201,COMPOUNDSTATEMENT,"",Main.java(58:25-61:8),"{
							shortest = n;
							s = sets[j];
						}"
202,CALLEXPRESSION,"findDistance",Main.java(57:18-57:56),"findDistance(freckles[i], freckles[j])"
203,METHODDECLARATION,"findDistance",,""
204,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(57:31-57:42),"freckles[i]"
205,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(57:44-57:55),"freckles[j]"
206,DECLAREDREFERENCEEXPRESSION,"i",Main.java(57:40-57:41),"i"
207,PARAMVARIABLEDECLARATION,"java.lang.doublePtr0",,""
208,DECLAREDREFERENCEEXPRESSION,"freckles",Main.java(57:44-57:52),"freckles"
209,DECLAREDREFERENCEEXPRESSION,"j",Main.java(57:53-57:54),"j"
210,PARAMVARIABLEDECLARATION,"java.lang.doublePtr1",,""
211,DECLAREDREFERENCEEXPRESSION,"n",Main.java(58:11-58:12),"n"
212,BINARYOPERATOR,"<",Main.java(58:11-58:23),"n < shortest"
213,DECLAREDREFERENCEEXPRESSION,"shortest",Main.java(59:8-59:16),"shortest"
214,BINARYOPERATOR,"=",Main.java(59:8-59:21),"shortest = n;"
215,BINARYOPERATOR,"=",Main.java(60:8-60:20),"s = sets[j];"
216,DECLAREDREFERENCEEXPRESSION,"s",Main.java(60:8-60:9),"s"
217,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(60:12-60:19),"sets[j]"
218,DECLAREDREFERENCEEXPRESSION,"sets",Main.java(60:12-60:16),"sets"
219,DECLAREDREFERENCEEXPRESSION,"j",Main.java(60:17-60:18),"j"
220,DECLAREDREFERENCEEXPRESSION,"n",Main.java(59:19-59:20),"n"
221,DECLAREDREFERENCEEXPRESSION,"shortest",Main.java(58:15-58:23),"shortest"
222,DECLAREDREFERENCEEXPRESSION,"numberOfFreckles",Main.java(50:23-50:39),"numberOfFreckles"
223,ARRAYSUBSCRIPTIONEXPRESSION,"",Main.java(66:5-66:12),"sets[i]"
224,DECLAREDREFERENCEEXPRESSION,"s",Main.java(66:15-66:16),"s"
225,DECLAREDREFERENCEEXPRESSION,"i",Main.java(66:10-66:11),"i"

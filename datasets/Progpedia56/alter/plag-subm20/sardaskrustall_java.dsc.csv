id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/05973421_21_201403008/SardasKrustall.java",,""
2,RECORDDECLARATION,"Node",SardasKrustall.java(5:1-22:2),"class Node{

    public double x;
    public double y;
    public Node pai;
    public int index;
    
    Node(){
    }
    
    Node(double x, double y, int index){
        this.index = index;
	this.x=x;
	this.y=y;
	this.pai = null;
    }
    
}"
3,RECORDDECLARATION,"Graph",SardasKrustall.java(24:1-44:2),"class Graph{

    public int n;
    public int c;
    public Node nodes[];
    
    Graph(int n){
	this.n = n;
	nodes = new Node[n];
	this.c=0;
	for(int i=0; i<n; i++){
	    nodes[i] = new Node();
	}
    }

    public void addNode(Node n){
	nodes[c] = n;
	this.c++;
    }

}"
4,RECORDDECLARATION,"Set",SardasKrustall.java(46:1-57:2),"class Set{

    public LinkedList<Node> nodes;
    public int id;
    
    Set(Node a, int id){
	nodes = new LinkedList<Node>();	
	nodes.addLast(a);
	this.id = id;
    }
    
}"
5,RECORDDECLARATION,"Edge",SardasKrustall.java(59:1-82:2),"class Edge implements Comparable<Edge>{

    public Node a;
    public Node b;
    public double dist;
    
    
    Edge(Node a, Node b){
	this.a=a;
	this.b=b;
	this.dist=Math.sqrt(Math.pow(b.x-a.x,2)+Math.pow(b.y-a.y,2));
    }

    @Override
    public int compareTo(Edge e){
	if(Double.compare(this.dist, e.dist) < 0){
	    return -1;
	}else if(Double.compare(this.dist, e.dist) > 0){
	    return 1;
	}
	return 0;
    }
       
}"
6,RECORDDECLARATION,"SardasKrustall",SardasKrustall.java(84:1-159:2),"public class SardasKrustall{

    public static LinkedList<Set> sets;
    public static LinkedList<Edge> A;
    public static LinkedList<Edge> edges;
    
    public static int find(Node node){
	for(int i=0; i<sets.size(); i++){
	    for(int j=0; j<sets.get(i).nodes.size(); j++){
		if(sets.get(i).nodes.get(j).x == node.x && sets.get(i).nodes.get(j).y == node.y){
		    return i;
		}
	    }
	}
	return -1;
    }

    
    public static void merge(int a, int b){
	
       	for(int i=0; i<sets.get(b).nodes.size(); i++){
	    sets.get(a).nodes.add(sets.get(b).nodes.get(i));
	}
	sets.remove(b);
	
    }

    public static void resetId(){
	for(int i=0; i<sets.size(); i++){
	    sets.get(i).id = i;
	}
    }
    
    public static void main(String args[]){

	Scanner input = new Scanner(System.in);
	Graph g = new Graph(input.nextInt());
	for(int i=0; i<g.n; i++){
	    Node n = new Node(input.nextFloat(), input.nextFloat(), i);
	    g.addNode(n);
	}

        A = new LinkedList<Edge>();
	edges = new LinkedList<Edge>();
        sets = new LinkedList<Set>();

	for(int i=0; i<g.n; i++){
	    sets.add(new Set(g.nodes[i],i));
	}

	for(int i=0; i<g.n; i++){
	    for(int j=i+1; j<g.n; j++){
		edges.add(new Edge(g.nodes[i], g.nodes[j]));
	    }
	}
	
	Collections.sort(edges);
	
	for(Edge e : edges){			
	    int a = find(e.a);
	    int b = find(e.b); // -1
	    if(a != b){
		A.addLast(e);			        
	        merge(a, b);     
	    }	    
	}

	double result = 0.0f;
	
	for(Edge E:A){
	    result += E.dist;
	}
	System.out.printf(""%.2f\n"",result);
    }

}"
7,INCLUDEDECLARATION,"java.util",,""
8,INCLUDEDECLARATION,"java.io",,""
9,INCLUDEDECLARATION,"java.lang.Math",,""
10,FIELDDECLARATION,"this",,""
11,FIELDDECLARATION,"n",SardasKrustall.java(26:5-26:18),"n"
12,FIELDDECLARATION,"c",SardasKrustall.java(27:5-27:18),"c"
13,FIELDDECLARATION,"nodes",SardasKrustall.java(28:5-28:25),"nodes"
14,METHODDECLARATION,"addNode",SardasKrustall.java(39:5-42:6),"public void addNode(Node n){
	nodes[c] = n;
	this.c++;
    }"
15,CONSTRUCTORDECLARATION,"Graph",SardasKrustall.java(30:5-37:6),"Graph(int n){
	this.n = n;
	nodes = new Node[n];
	this.c=0;
	for(int i=0; i<n; i++){
	    nodes[i] = new Node();
	}
    }"
16,VARIABLEDECLARATION,"this",,""
17,COMPOUNDSTATEMENT,"",SardasKrustall.java(39:32-42:6),"{
	nodes[c] = n;
	this.c++;
    }"
18,PARAMVARIABLEDECLARATION,"n",SardasKrustall.java(39:25-39:31),"Node n"
19,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(40:2-40:7),"this"
20,RETURNSTATEMENT,"",,""
21,BINARYOPERATOR,"=",SardasKrustall.java(40:2-40:15),"nodes[c] = n;"
22,UNARYOPERATOR,"++",SardasKrustall.java(41:2-41:11),"this.c++;"
23,MEMBEREXPRESSION,"c",SardasKrustall.java(41:2-41:8),"this.c"
24,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(41:2-41:6),"this"
25,ARRAYSUBSCRIPTIONEXPRESSION,"",SardasKrustall.java(40:2-40:10),"nodes[c]"
26,DECLAREDREFERENCEEXPRESSION,"n",SardasKrustall.java(40:13-40:14),"n"
27,MEMBEREXPRESSION,"nodes",SardasKrustall.java(40:2-40:7),"nodes"
28,MEMBEREXPRESSION,"c",SardasKrustall.java(40:8-40:9),"c"
29,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(40:8-40:9),"this"
30,COMPOUNDSTATEMENT,"",SardasKrustall.java(30:17-37:6),"{
	this.n = n;
	nodes = new Node[n];
	this.c=0;
	for(int i=0; i<n; i++){
	    nodes[i] = new Node();
	}
    }"
31,PARAMVARIABLEDECLARATION,"n",SardasKrustall.java(30:11-30:16),"int n"
32,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(31:2-31:6),"this"
33,RETURNSTATEMENT,"",,""
34,BINARYOPERATOR,"=",SardasKrustall.java(31:2-31:13),"this.n = n;"
35,BINARYOPERATOR,"=",SardasKrustall.java(32:2-32:22),"nodes = new Node[n];"
36,BINARYOPERATOR,"=",SardasKrustall.java(33:2-33:11),"this.c=0;"
37,FORSTATEMENT,"",SardasKrustall.java(34:2-36:3),"for(int i=0; i<n; i++){
	    nodes[i] = new Node();
	}"
38,MEMBEREXPRESSION,"n",SardasKrustall.java(31:2-31:8),"this.n"
39,DECLAREDREFERENCEEXPRESSION,"n",SardasKrustall.java(31:11-31:12),"n"
40,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(32:2-32:7),"this"
41,COMPOUNDSTATEMENT,"",SardasKrustall.java(34:24-36:3),"{
	    nodes[i] = new Node();
	}"
42,DECLARATIONSTATEMENT,"",SardasKrustall.java(34:6-34:13),"int i=0"
43,BINARYOPERATOR,"<",SardasKrustall.java(34:15-34:18),"i<n"
44,UNARYOPERATOR,"++",SardasKrustall.java(34:20-34:23),"i++"
45,VARIABLEDECLARATION,"i",SardasKrustall.java(34:10-34:13),"i=0"
46,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(35:6-35:11),"this"
47,BINARYOPERATOR,"=",SardasKrustall.java(35:6-35:28),"nodes[i] = new Node();"
48,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(34:20-34:21),"i"
49,ARRAYSUBSCRIPTIONEXPRESSION,"",SardasKrustall.java(35:6-35:14),"nodes[i]"
50,NEWEXPRESSION,"",SardasKrustall.java(35:17-35:27),"new Node()"
51,CONSTRUCTEXPRESSION,"",SardasKrustall.java(35:17-35:27),"new Node()"
52,CONSTRUCTORDECLARATION,"Node",Prob19.java(10:5-16:6),"Node() {
	adj = new LinkedList<Integer>();
	visited = false;
	distance = -1;
	excentricidade = -1;
	
    }"
53,MEMBEREXPRESSION,"nodes",SardasKrustall.java(35:6-35:11),"nodes"
54,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(35:12-35:13),"i"
55,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(34:15-34:16),"i"
56,DECLAREDREFERENCEEXPRESSION,"n",SardasKrustall.java(34:17-34:18),"n"
57,LITERAL,"",SardasKrustall.java(34:12-34:13),"0"
58,MEMBEREXPRESSION,"c",SardasKrustall.java(33:2-33:8),"this.c"
59,LITERAL,"",SardasKrustall.java(33:9-33:10),"0"
60,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(33:2-33:6),"this"
61,MEMBEREXPRESSION,"nodes",SardasKrustall.java(32:2-32:7),"nodes"
62,ARRAYCREATIONEXPRESSION,"",SardasKrustall.java(32:10-32:21),"new Node[n]"
63,DECLAREDREFERENCEEXPRESSION,"n",SardasKrustall.java(32:19-32:20),"n"
64,FIELDDECLARATION,"this",,""
65,FIELDDECLARATION,"sets",SardasKrustall.java(86:5-86:40),"sets"
66,FIELDDECLARATION,"A",SardasKrustall.java(87:5-87:38),"A"
67,FIELDDECLARATION,"edges",SardasKrustall.java(88:5-88:42),"edges"
68,METHODDECLARATION,"find",SardasKrustall.java(90:5-99:6),"public static int find(Node node){
	for(int i=0; i<sets.size(); i++){
	    for(int j=0; j<sets.get(i).nodes.size(); j++){
		if(sets.get(i).nodes.get(j).x == node.x && sets.get(i).nodes.get(j).y == node.y){
		    return i;
		}
	    }
	}
	return -1;
    }"
69,METHODDECLARATION,"merge",SardasKrustall.java(102:5-109:6),"public static void merge(int a, int b){
	
       	for(int i=0; i<sets.get(b).nodes.size(); i++){
	    sets.get(a).nodes.add(sets.get(b).nodes.get(i));
	}
	sets.remove(b);
	
    }"
70,METHODDECLARATION,"resetId",SardasKrustall.java(111:5-115:6),"public static void resetId(){
	for(int i=0; i<sets.size(); i++){
	    sets.get(i).id = i;
	}
    }"
71,METHODDECLARATION,"main",SardasKrustall.java(117:5-157:6),"public static void main(String args[]){

	Scanner input = new Scanner(System.in);
	Graph g = new Graph(input.nextInt());
	for(int i=0; i<g.n; i++){
	    Node n = new Node(input.nextFloat(), input.nextFloat(), i);
	    g.addNode(n);
	}

        A = new LinkedList<Edge>();
	edges = new LinkedList<Edge>();
        sets = new LinkedList<Set>();

	for(int i=0; i<g.n; i++){
	    sets.add(new Set(g.nodes[i],i));
	}

	for(int i=0; i<g.n; i++){
	    for(int j=i+1; j<g.n; j++){
		edges.add(new Edge(g.nodes[i], g.nodes[j]));
	    }
	}
	
	Collections.sort(edges);
	
	for(Edge e : edges){			
	    int a = find(e.a);
	    int b = find(e.b); // -1
	    if(a != b){
		A.addLast(e);			        
	        merge(a, b);     
	    }	    
	}

	double result = 0.0f;
	
	for(Edge E:A){
	    result += E.dist;
	}
	System.out.printf(""%.2f\n"",result);
    }"
72,CONSTRUCTORDECLARATION,"SardasKrustall",,""
73,VARIABLEDECLARATION,"this",,""
74,COMPOUNDSTATEMENT,"",SardasKrustall.java(90:38-99:6),"{
	for(int i=0; i<sets.size(); i++){
	    for(int j=0; j<sets.get(i).nodes.size(); j++){
		if(sets.get(i).nodes.get(j).x == node.x && sets.get(i).nodes.get(j).y == node.y){
		    return i;
		}
	    }
	}
	return -1;
    }"
75,PARAMVARIABLEDECLARATION,"node",SardasKrustall.java(90:28-90:37),"Node node"
76,CALLEXPRESSION,"find",SardasKrustall.java(143:14-143:23),"find(e.a)"
77,CALLEXPRESSION,"find",SardasKrustall.java(144:14-144:23),"find(e.b)"
78,LITERAL,"",SardasKrustall.java(91:12-91:13),"0"
79,RETURNSTATEMENT,"",SardasKrustall.java(98:2-98:12),"return -1;"
80,MEMBEREXPRESSION,"a",SardasKrustall.java(143:19-143:22),"e.a"
81,MEMBEREXPRESSION,"b",SardasKrustall.java(144:19-144:22),"e.b"
82,FORSTATEMENT,"",SardasKrustall.java(91:2-97:3),"for(int i=0; i<sets.size(); i++){
	    for(int j=0; j<sets.get(i).nodes.size(); j++){
		if(sets.get(i).nodes.get(j).x == node.x && sets.get(i).nodes.get(j).y == node.y){
		    return i;
		}
	    }
	}"
83,COMPOUNDSTATEMENT,"",SardasKrustall.java(91:34-97:3),"{
	    for(int j=0; j<sets.get(i).nodes.size(); j++){
		if(sets.get(i).nodes.get(j).x == node.x && sets.get(i).nodes.get(j).y == node.y){
		    return i;
		}
	    }
	}"
84,DECLARATIONSTATEMENT,"",SardasKrustall.java(91:6-91:13),"int i=0"
85,BINARYOPERATOR,"<",SardasKrustall.java(91:15-91:28),"i<sets.size()"
86,UNARYOPERATOR,"++",SardasKrustall.java(91:30-91:33),"i++"
87,VARIABLEDECLARATION,"i",SardasKrustall.java(91:10-91:13),"i=0"
88,LITERAL,"",SardasKrustall.java(92:16-92:17),"0"
89,LITERAL,"",SardasKrustall.java(98:10-98:11),"1"
90,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(91:15-91:16),"i"
91,MEMBERCALLEXPRESSION,"size",SardasKrustall.java(91:17-91:28),"sets.size()"
92,DECLAREDREFERENCEEXPRESSION,"size",SardasKrustall.java(91:22-91:26),"size"
93,MEMBEREXPRESSION,"sets",SardasKrustall.java(91:17-91:21),"sets"
94,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(91:17-91:21),"SardasKrustall"
95,FORSTATEMENT,"",SardasKrustall.java(92:6-96:7),"for(int j=0; j<sets.get(i).nodes.size(); j++){
		if(sets.get(i).nodes.get(j).x == node.x && sets.get(i).nodes.get(j).y == node.y){
		    return i;
		}
	    }"
96,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(91:30-91:31),"i"
97,COMPOUNDSTATEMENT,"",SardasKrustall.java(92:51-96:7),"{
		if(sets.get(i).nodes.get(j).x == node.x && sets.get(i).nodes.get(j).y == node.y){
		    return i;
		}
	    }"
98,DECLARATIONSTATEMENT,"",SardasKrustall.java(92:10-92:17),"int j=0"
99,BINARYOPERATOR,"<",SardasKrustall.java(92:19-92:45),"j<sets.get(i).nodes.size()"
100,UNARYOPERATOR,"++",SardasKrustall.java(92:47-92:50),"j++"
101,VARIABLEDECLARATION,"j",SardasKrustall.java(92:14-92:17),"j=0"
102,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(93:6-93:10),"SardasKrustall"
103,IFSTATEMENT,"",SardasKrustall.java(93:3-95:4),"if(sets.get(i).nodes.get(j).x == node.x && sets.get(i).nodes.get(j).y == node.y){
		    return i;
		}"
104,DECLAREDREFERENCEEXPRESSION,"j",SardasKrustall.java(92:47-92:48),"j"
105,BINARYOPERATOR,"&&",SardasKrustall.java(93:6-93:82),"sets.get(i).nodes.get(j).x == node.x && sets.get(i).nodes.get(j).y == node.y"
106,COMPOUNDSTATEMENT,"",SardasKrustall.java(93:83-95:4),"{
		    return i;
		}"
107,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(94:14-94:15),"i"
108,RETURNSTATEMENT,"",SardasKrustall.java(94:7-94:16),"return i;"
109,BINARYOPERATOR,"==",SardasKrustall.java(93:6-93:42),"sets.get(i).nodes.get(j).x == node.x"
110,BINARYOPERATOR,"==",SardasKrustall.java(93:46-93:82),"sets.get(i).nodes.get(j).y == node.y"
111,MEMBEREXPRESSION,"y",SardasKrustall.java(93:46-93:72),"sets.get(i).nodes.get(j).y"
112,MEMBEREXPRESSION,"y",SardasKrustall.java(93:76-93:82),"node.y"
113,MEMBERCALLEXPRESSION,"get",SardasKrustall.java(93:46-93:70),"sets.get(i).nodes.get(j)"
114,DECLAREDREFERENCEEXPRESSION,"node",SardasKrustall.java(93:76-93:80),"node"
115,DECLAREDREFERENCEEXPRESSION,"get",SardasKrustall.java(93:64-93:67),"get"
116,DECLAREDREFERENCEEXPRESSION,"j",SardasKrustall.java(93:68-93:69),"j"
117,MEMBEREXPRESSION,"nodes",SardasKrustall.java(93:46-93:63),"sets.get(i).nodes"
118,MEMBERCALLEXPRESSION,"get",SardasKrustall.java(93:46-93:57),"sets.get(i)"
119,DECLAREDREFERENCEEXPRESSION,"get",SardasKrustall.java(93:51-93:54),"get"
120,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(93:55-93:56),"i"
121,MEMBEREXPRESSION,"sets",SardasKrustall.java(93:46-93:50),"sets"
122,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(93:46-93:50),"SardasKrustall"
123,MEMBEREXPRESSION,"x",SardasKrustall.java(93:6-93:32),"sets.get(i).nodes.get(j).x"
124,MEMBEREXPRESSION,"x",SardasKrustall.java(93:36-93:42),"node.x"
125,MEMBERCALLEXPRESSION,"get",SardasKrustall.java(93:6-93:30),"sets.get(i).nodes.get(j)"
126,DECLAREDREFERENCEEXPRESSION,"node",SardasKrustall.java(93:36-93:40),"node"
127,DECLAREDREFERENCEEXPRESSION,"get",SardasKrustall.java(93:24-93:27),"get"
128,DECLAREDREFERENCEEXPRESSION,"j",SardasKrustall.java(93:28-93:29),"j"
129,MEMBEREXPRESSION,"nodes",SardasKrustall.java(93:6-93:23),"sets.get(i).nodes"
130,MEMBERCALLEXPRESSION,"get",SardasKrustall.java(93:6-93:17),"sets.get(i)"
131,DECLAREDREFERENCEEXPRESSION,"get",SardasKrustall.java(93:11-93:14),"get"
132,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(93:15-93:16),"i"
133,MEMBEREXPRESSION,"sets",SardasKrustall.java(93:6-93:10),"sets"
134,DECLAREDREFERENCEEXPRESSION,"j",SardasKrustall.java(92:19-92:20),"j"
135,MEMBERCALLEXPRESSION,"size",SardasKrustall.java(92:21-92:45),"sets.get(i).nodes.size()"
136,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(92:21-92:25),"SardasKrustall"
137,DECLAREDREFERENCEEXPRESSION,"size",SardasKrustall.java(92:39-92:43),"size"
138,MEMBEREXPRESSION,"nodes",SardasKrustall.java(92:21-92:38),"sets.get(i).nodes"
139,MEMBERCALLEXPRESSION,"get",SardasKrustall.java(92:21-92:32),"sets.get(i)"
140,DECLAREDREFERENCEEXPRESSION,"get",SardasKrustall.java(92:26-92:29),"get"
141,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(92:30-92:31),"i"
142,MEMBEREXPRESSION,"sets",SardasKrustall.java(92:21-92:25),"sets"
143,UNARYOPERATOR,"-",SardasKrustall.java(98:9-98:11),"-1"
144,VARIABLEDECLARATION,"this",,""
145,COMPOUNDSTATEMENT,"",SardasKrustall.java(111:33-115:6),"{
	for(int i=0; i<sets.size(); i++){
	    sets.get(i).id = i;
	}
    }"
146,LITERAL,"",SardasKrustall.java(112:12-112:13),"0"
147,RETURNSTATEMENT,"",,""
148,FORSTATEMENT,"",SardasKrustall.java(112:2-114:3),"for(int i=0; i<sets.size(); i++){
	    sets.get(i).id = i;
	}"
149,COMPOUNDSTATEMENT,"",SardasKrustall.java(112:34-114:3),"{
	    sets.get(i).id = i;
	}"
150,DECLARATIONSTATEMENT,"",SardasKrustall.java(112:6-112:13),"int i=0"
151,BINARYOPERATOR,"<",SardasKrustall.java(112:15-112:28),"i<sets.size()"
152,UNARYOPERATOR,"++",SardasKrustall.java(112:30-112:33),"i++"
153,VARIABLEDECLARATION,"i",SardasKrustall.java(112:10-112:13),"i=0"
154,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(113:6-113:10),"SardasKrustall"
155,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(112:15-112:16),"i"
156,BINARYOPERATOR,"=",SardasKrustall.java(113:6-113:25),"sets.get(i).id = i;"
157,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(112:30-112:31),"i"
158,MEMBEREXPRESSION,"id",SardasKrustall.java(113:6-113:20),"sets.get(i).id"
159,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(113:23-113:24),"i"
160,MEMBERCALLEXPRESSION,"get",SardasKrustall.java(113:6-113:17),"sets.get(i)"
161,DECLAREDREFERENCEEXPRESSION,"get",SardasKrustall.java(113:11-113:14),"get"
162,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(113:15-113:16),"i"
163,MEMBEREXPRESSION,"sets",SardasKrustall.java(113:6-113:10),"sets"
164,MEMBERCALLEXPRESSION,"size",SardasKrustall.java(112:17-112:28),"sets.size()"
165,DECLAREDREFERENCEEXPRESSION,"size",SardasKrustall.java(112:22-112:26),"size"
166,MEMBEREXPRESSION,"sets",SardasKrustall.java(112:17-112:21),"sets"
167,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(112:17-112:21),"SardasKrustall"
168,VARIABLEDECLARATION,"this",,""
169,COMPOUNDSTATEMENT,"",SardasKrustall.java(117:43-157:6),"{

	Scanner input = new Scanner(System.in);
	Graph g = new Graph(input.nextInt());
	for(int i=0; i<g.n; i++){
	    Node n = new Node(input.nextFloat(), input.nextFloat(), i);
	    g.addNode(n);
	}

        A = new LinkedList<Edge>();
	edges = new LinkedList<Edge>();
        sets = new LinkedList<Set>();

	for(int i=0; i<g.n; i++){
	    sets.add(new Set(g.nodes[i],i));
	}

	for(int i=0; i<g.n; i++){
	    for(int j=i+1; j<g.n; j++){
		edges.add(new Edge(g.nodes[i], g.nodes[j]));
	    }
	}
	
	Collections.sort(edges);
	
	for(Edge e : edges){			
	    int a = find(e.a);
	    int b = find(e.b); // -1
	    if(a != b){
		A.addLast(e);			        
	        merge(a, b);     
	    }	    
	}

	double result = 0.0f;
	
	for(Edge E:A){
	    result += E.dist;
	}
	System.out.printf(""%.2f\n"",result);
    }"
170,PARAMVARIABLEDECLARATION,"args",SardasKrustall.java(117:29-117:42),"String args[]"
171,DECLAREDREFERENCEEXPRESSION,"System",SardasKrustall.java(119:30-119:36),"System"
172,RETURNSTATEMENT,"",,""
173,DECLARATIONSTATEMENT,"",SardasKrustall.java(119:2-119:41),"Scanner input = new Scanner(System.in);"
174,DECLARATIONSTATEMENT,"",SardasKrustall.java(120:2-120:39),"Graph g = new Graph(input.nextInt());"
175,FORSTATEMENT,"",SardasKrustall.java(121:2-124:3),"for(int i=0; i<g.n; i++){
	    Node n = new Node(input.nextFloat(), input.nextFloat(), i);
	    g.addNode(n);
	}"
176,BINARYOPERATOR,"=",SardasKrustall.java(126:9-126:36),"A = new LinkedList<Edge>();"
177,BINARYOPERATOR,"=",SardasKrustall.java(127:2-127:33),"edges = new LinkedList<Edge>();"
178,BINARYOPERATOR,"=",SardasKrustall.java(128:9-128:38),"sets = new LinkedList<Set>();"
179,FORSTATEMENT,"",SardasKrustall.java(130:2-132:3),"for(int i=0; i<g.n; i++){
	    sets.add(new Set(g.nodes[i],i));
	}"
180,FORSTATEMENT,"",SardasKrustall.java(134:2-138:3),"for(int i=0; i<g.n; i++){
	    for(int j=i+1; j<g.n; j++){
		edges.add(new Edge(g.nodes[i], g.nodes[j]));
	    }
	}"
181,STATICCALLEXPRESSION,"sort",SardasKrustall.java(140:2-140:26),"Collections.sort(edges);"
182,FOREACHSTATEMENT,"",SardasKrustall.java(142:2-149:3),"for(Edge e : edges){			
	    int a = find(e.a);
	    int b = find(e.b); // -1
	    if(a != b){
		A.addLast(e);			        
	        merge(a, b);     
	    }	    
	}"
183,DECLARATIONSTATEMENT,"",SardasKrustall.java(151:2-151:23),"double result = 0.0f;"
184,FOREACHSTATEMENT,"",SardasKrustall.java(153:2-155:3),"for(Edge E:A){
	    result += E.dist;
	}"
185,MEMBERCALLEXPRESSION,"printf",SardasKrustall.java(156:2-156:37),"System.out.printf(""%.2f\n"",result);"
186,VARIABLEDECLARATION,"input",SardasKrustall.java(119:10-119:40),"input = new Scanner(System.in)"
187,VARIABLEDECLARATION,"g",SardasKrustall.java(120:8-120:38),"g = new Graph(input.nextInt())"
188,VARIABLEDECLARATION,"result",SardasKrustall.java(151:9-151:22),"result = 0.0f"
189,NEWEXPRESSION,"",SardasKrustall.java(120:12-120:38),"new Graph(input.nextInt())"
190,CONSTRUCTEXPRESSION,"",SardasKrustall.java(120:12-120:38),"new Graph(input.nextInt())"
191,CONSTRUCTORDECLARATION,"Graph",Prob19.java(28:5-33:6),"Graph(int n) {
	this.n = n;
	nodes  = new Node[n+1]; // +1 se os comecam em 1 ao inves de 0
	for (int i=1; i<=n; i++)
	    nodes[i] = new Node();
    }"
192,MEMBERCALLEXPRESSION,"nextInt",SardasKrustall.java(120:22-120:37),"input.nextInt()"
193,DECLAREDREFERENCEEXPRESSION,"nextInt",SardasKrustall.java(120:28-120:35),"nextInt"
194,PARAMVARIABLEDECLARATION,"n",Prob19.java(28:11-28:16),"int n"
195,DECLAREDREFERENCEEXPRESSION,"input",SardasKrustall.java(120:22-120:27),"input"
196,LITERAL,"",SardasKrustall.java(121:12-121:13),"0"
197,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(153:13-153:14),"SardasKrustall"
198,MEMBEREXPRESSION,"edges",SardasKrustall.java(127:2-127:7),"edges"
199,NEWEXPRESSION,"",SardasKrustall.java(127:10-127:32),"new LinkedList<Edge>()"
200,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(128:9-128:13),"SardasKrustall"
201,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(127:2-127:7),"SardasKrustall"
202,CONSTRUCTEXPRESSION,"",SardasKrustall.java(127:10-127:32),"new LinkedList<Edge>()"
203,DECLARATIONSTATEMENT,"",SardasKrustall.java(153:6-153:12),"Edge E"
204,MEMBEREXPRESSION,"A",SardasKrustall.java(153:13-153:14),"A"
205,COMPOUNDSTATEMENT,"",SardasKrustall.java(153:15-155:3),"{
	    result += E.dist;
	}"
206,VARIABLEDECLARATION,"E",SardasKrustall.java(153:11-153:12),"E"
207,DECLAREDREFERENCEEXPRESSION,"result",SardasKrustall.java(154:6-154:12),"result"
208,DECLAREDREFERENCEEXPRESSION,"System",SardasKrustall.java(156:2-156:8),"System"
209,BINARYOPERATOR,"+=",SardasKrustall.java(154:6-154:23),"result += E.dist;"
210,MEMBEREXPRESSION,"dist",SardasKrustall.java(154:16-154:22),"E.dist"
211,DECLAREDREFERENCEEXPRESSION,"E",SardasKrustall.java(154:16-154:17),"E"
212,UNINITIALIZEDVALUE,"Uninitialized Value",,""
213,COMPOUNDSTATEMENT,"",SardasKrustall.java(121:26-124:3),"{
	    Node n = new Node(input.nextFloat(), input.nextFloat(), i);
	    g.addNode(n);
	}"
214,DECLARATIONSTATEMENT,"",SardasKrustall.java(121:6-121:13),"int i=0"
215,BINARYOPERATOR,"<",SardasKrustall.java(121:15-121:20),"i<g.n"
216,UNARYOPERATOR,"++",SardasKrustall.java(121:22-121:25),"i++"
217,VARIABLEDECLARATION,"i",SardasKrustall.java(121:10-121:13),"i=0"
218,DECLAREDREFERENCEEXPRESSION,"input",SardasKrustall.java(122:24-122:29),"input"
219,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(126:9-126:10),"SardasKrustall"
220,DECLARATIONSTATEMENT,"",SardasKrustall.java(122:6-122:65),"Node n = new Node(input.nextFloat(), input.nextFloat(), i);"
221,MEMBERCALLEXPRESSION,"addNode",SardasKrustall.java(123:6-123:19),"g.addNode(n);"
222,VARIABLEDECLARATION,"n",SardasKrustall.java(122:11-122:64),"n = new Node(input.nextFloat(), input.nextFloat(), i)"
223,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(121:22-121:23),"i"
224,DECLAREDREFERENCEEXPRESSION,"addNode",SardasKrustall.java(123:8-123:15),"addNode"
225,METHODDECLARATION,"addNode",,""
226,DECLAREDREFERENCEEXPRESSION,"n",SardasKrustall.java(123:16-123:17),"n"
227,PARAMVARIABLEDECLARATION,"node0",,""
228,DECLAREDREFERENCEEXPRESSION,"g",SardasKrustall.java(123:6-123:7),"g"
229,NEWEXPRESSION,"",SardasKrustall.java(122:15-122:64),"new Node(input.nextFloat(), input.nextFloat(), i)"
230,CONSTRUCTEXPRESSION,"",SardasKrustall.java(122:15-122:64),"new Node(input.nextFloat(), input.nextFloat(), i)"
231,CONSTRUCTORDECLARATION,"Node",,""
232,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(122:62-122:63),"i"
233,PARAMVARIABLEDECLARATION,"int2",,""
234,MEMBERCALLEXPRESSION,"nextFloat",SardasKrustall.java(122:43-122:60),"input.nextFloat()"
235,DECLAREDREFERENCEEXPRESSION,"nextFloat",SardasKrustall.java(122:49-122:58),"nextFloat"
236,PARAMVARIABLEDECLARATION,"float1",,""
237,DECLAREDREFERENCEEXPRESSION,"input",SardasKrustall.java(122:43-122:48),"input"
238,MEMBERCALLEXPRESSION,"nextFloat",SardasKrustall.java(122:24-122:41),"input.nextFloat()"
239,DECLAREDREFERENCEEXPRESSION,"nextFloat",SardasKrustall.java(122:30-122:39),"nextFloat"
240,PARAMVARIABLEDECLARATION,"float0",,""
241,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(121:15-121:16),"i"
242,MEMBEREXPRESSION,"n",SardasKrustall.java(121:17-121:20),"g.n"
243,DECLAREDREFERENCEEXPRESSION,"g",SardasKrustall.java(121:17-121:18),"g"
244,DECLAREDREFERENCEEXPRESSION,"printf",SardasKrustall.java(156:13-156:19),"printf"
245,DECLAREDREFERENCEEXPRESSION,"result",SardasKrustall.java(156:29-156:35),"result"
246,MEMBEREXPRESSION,"out",SardasKrustall.java(156:2-156:12),"System.out"
247,LITERAL,"",SardasKrustall.java(156:20-156:28),"""%.2f\n"""
248,MEMBEREXPRESSION,"A",SardasKrustall.java(126:9-126:10),"A"
249,NEWEXPRESSION,"",SardasKrustall.java(126:13-126:35),"new LinkedList<Edge>()"
250,CONSTRUCTEXPRESSION,"",SardasKrustall.java(126:13-126:35),"new LinkedList<Edge>()"
251,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(142:15-142:20),"SardasKrustall"
252,MEMBEREXPRESSION,"edges",SardasKrustall.java(140:19-140:24),"edges"
253,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(140:19-140:24),"SardasKrustall"
254,COMPOUNDSTATEMENT,"",SardasKrustall.java(130:26-132:3),"{
	    sets.add(new Set(g.nodes[i],i));
	}"
255,DECLARATIONSTATEMENT,"",SardasKrustall.java(130:6-130:13),"int i=0"
256,BINARYOPERATOR,"<",SardasKrustall.java(130:15-130:20),"i<g.n"
257,UNARYOPERATOR,"++",SardasKrustall.java(130:22-130:25),"i++"
258,VARIABLEDECLARATION,"i",SardasKrustall.java(130:10-130:13),"i=0"
259,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(131:6-131:10),"SardasKrustall"
260,LITERAL,"",SardasKrustall.java(134:12-134:13),"0"
261,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(130:22-130:23),"i"
262,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(130:15-130:16),"i"
263,MEMBEREXPRESSION,"n",SardasKrustall.java(130:17-130:20),"g.n"
264,DECLAREDREFERENCEEXPRESSION,"g",SardasKrustall.java(130:17-130:18),"g"
265,LITERAL,"",SardasKrustall.java(130:12-130:13),"0"
266,MEMBERCALLEXPRESSION,"add",SardasKrustall.java(131:6-131:38),"sets.add(new Set(g.nodes[i],i));"
267,DECLAREDREFERENCEEXPRESSION,"add",SardasKrustall.java(131:11-131:14),"add"
268,NEWEXPRESSION,"",SardasKrustall.java(131:15-131:36),"new Set(g.nodes[i],i)"
269,CONSTRUCTEXPRESSION,"",SardasKrustall.java(131:15-131:36),"new Set(g.nodes[i],i)"
270,CONSTRUCTORDECLARATION,"Set",SardasKrustall.java(51:5-55:6),"Set(Node a, int id){
	nodes = new LinkedList<Node>();	
	nodes.addLast(a);
	this.id = id;
    }"
271,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(131:34-131:35),"i"
272,PARAMVARIABLEDECLARATION,"id",SardasKrustall.java(51:17-51:23),"int id"
273,ARRAYSUBSCRIPTIONEXPRESSION,"",SardasKrustall.java(131:23-131:33),"g.nodes[i]"
274,MEMBEREXPRESSION,"nodes",SardasKrustall.java(131:23-131:30),"g.nodes"
275,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(131:31-131:32),"i"
276,PARAMVARIABLEDECLARATION,"a",SardasKrustall.java(51:9-51:15),"Node a"
277,DECLAREDREFERENCEEXPRESSION,"g",SardasKrustall.java(131:23-131:24),"g"
278,MEMBEREXPRESSION,"sets",SardasKrustall.java(131:6-131:10),"sets"
279,DECLARATIONSTATEMENT,"",SardasKrustall.java(142:6-142:12),"Edge e"
280,MEMBEREXPRESSION,"edges",SardasKrustall.java(142:15-142:20),"edges"
281,COMPOUNDSTATEMENT,"",SardasKrustall.java(142:21-149:3),"{			
	    int a = find(e.a);
	    int b = find(e.b); // -1
	    if(a != b){
		A.addLast(e);			        
	        merge(a, b);     
	    }	    
	}"
282,VARIABLEDECLARATION,"e",SardasKrustall.java(142:11-142:12),"e"
283,DECLAREDREFERENCEEXPRESSION,"e",SardasKrustall.java(143:19-143:20),"e"
284,LITERAL,"",SardasKrustall.java(151:18-151:22),"0.0f"
285,UNINITIALIZEDVALUE,"Uninitialized Value",,""
286,DECLARATIONSTATEMENT,"",SardasKrustall.java(143:6-143:24),"int a = find(e.a);"
287,DECLARATIONSTATEMENT,"",SardasKrustall.java(144:6-144:24),"int b = find(e.b);"
288,IFSTATEMENT,"",SardasKrustall.java(145:6-148:7),"if(a != b){
		A.addLast(e);			        
	        merge(a, b);     
	    }"
289,VARIABLEDECLARATION,"a",SardasKrustall.java(143:10-143:23),"a = find(e.a)"
290,VARIABLEDECLARATION,"b",SardasKrustall.java(144:10-144:23),"b = find(e.b)"
291,COMPOUNDSTATEMENT,"",SardasKrustall.java(145:16-148:7),"{
		A.addLast(e);			        
	        merge(a, b);     
	    }"
292,BINARYOPERATOR,"!=",SardasKrustall.java(145:9-145:15),"a != b"
293,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(146:3-146:4),"SardasKrustall"
294,MEMBERCALLEXPRESSION,"addLast",SardasKrustall.java(146:3-146:16),"A.addLast(e);"
295,CALLEXPRESSION,"merge",SardasKrustall.java(147:10-147:22),"merge(a, b);"
296,DECLAREDREFERENCEEXPRESSION,"addLast",SardasKrustall.java(146:5-146:12),"addLast"
297,DECLAREDREFERENCEEXPRESSION,"a",SardasKrustall.java(147:16-147:17),"a"
298,DECLAREDREFERENCEEXPRESSION,"e",SardasKrustall.java(146:13-146:14),"e"
299,MEMBEREXPRESSION,"A",SardasKrustall.java(146:3-146:4),"A"
300,DECLAREDREFERENCEEXPRESSION,"b",SardasKrustall.java(147:19-147:20),"b"
301,PARAMVARIABLEDECLARATION,"b",SardasKrustall.java(102:37-102:42),"int b"
302,PARAMVARIABLEDECLARATION,"a",SardasKrustall.java(102:30-102:35),"int a"
303,DECLAREDREFERENCEEXPRESSION,"a",SardasKrustall.java(145:9-145:10),"a"
304,DECLAREDREFERENCEEXPRESSION,"b",SardasKrustall.java(145:14-145:15),"b"
305,DECLAREDREFERENCEEXPRESSION,"e",SardasKrustall.java(144:19-144:20),"e"
306,NEWEXPRESSION,"",SardasKrustall.java(119:18-119:40),"new Scanner(System.in)"
307,CONSTRUCTEXPRESSION,"",SardasKrustall.java(119:18-119:40),"new Scanner(System.in)"
308,MEMBEREXPRESSION,"in",SardasKrustall.java(119:30-119:39),"System.in"
309,MEMBEREXPRESSION,"sets",SardasKrustall.java(128:9-128:13),"sets"
310,NEWEXPRESSION,"",SardasKrustall.java(128:16-128:37),"new LinkedList<Set>()"
311,CONSTRUCTEXPRESSION,"",SardasKrustall.java(128:16-128:37),"new LinkedList<Set>()"
312,COMPOUNDSTATEMENT,"",SardasKrustall.java(134:26-138:3),"{
	    for(int j=i+1; j<g.n; j++){
		edges.add(new Edge(g.nodes[i], g.nodes[j]));
	    }
	}"
313,DECLARATIONSTATEMENT,"",SardasKrustall.java(134:6-134:13),"int i=0"
314,BINARYOPERATOR,"<",SardasKrustall.java(134:15-134:20),"i<g.n"
315,UNARYOPERATOR,"++",SardasKrustall.java(134:22-134:25),"i++"
316,VARIABLEDECLARATION,"i",SardasKrustall.java(134:10-134:13),"i=0"
317,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(135:16-135:17),"i"
318,FORSTATEMENT,"",SardasKrustall.java(135:6-137:7),"for(int j=i+1; j<g.n; j++){
		edges.add(new Edge(g.nodes[i], g.nodes[j]));
	    }"
319,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(134:22-134:23),"i"
320,COMPOUNDSTATEMENT,"",SardasKrustall.java(135:32-137:7),"{
		edges.add(new Edge(g.nodes[i], g.nodes[j]));
	    }"
321,DECLARATIONSTATEMENT,"",SardasKrustall.java(135:10-135:19),"int j=i+1"
322,BINARYOPERATOR,"<",SardasKrustall.java(135:21-135:26),"j<g.n"
323,UNARYOPERATOR,"++",SardasKrustall.java(135:28-135:31),"j++"
324,VARIABLEDECLARATION,"j",SardasKrustall.java(135:14-135:19),"j=i+1"
325,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(136:3-136:8),"SardasKrustall"
326,BINARYOPERATOR,"+",SardasKrustall.java(135:16-135:19),"i+1"
327,LITERAL,"",SardasKrustall.java(135:18-135:19),"1"
328,DECLAREDREFERENCEEXPRESSION,"j",SardasKrustall.java(135:21-135:22),"j"
329,MEMBEREXPRESSION,"n",SardasKrustall.java(135:23-135:26),"g.n"
330,DECLAREDREFERENCEEXPRESSION,"g",SardasKrustall.java(135:23-135:24),"g"
331,MEMBERCALLEXPRESSION,"add",SardasKrustall.java(136:3-136:47),"edges.add(new Edge(g.nodes[i], g.nodes[j]));"
332,DECLAREDREFERENCEEXPRESSION,"j",SardasKrustall.java(135:28-135:29),"j"
333,DECLAREDREFERENCEEXPRESSION,"add",SardasKrustall.java(136:9-136:12),"add"
334,NEWEXPRESSION,"",SardasKrustall.java(136:13-136:45),"new Edge(g.nodes[i], g.nodes[j])"
335,CONSTRUCTEXPRESSION,"",SardasKrustall.java(136:13-136:45),"new Edge(g.nodes[i], g.nodes[j])"
336,CONSTRUCTORDECLARATION,"Edge",,""
337,ARRAYSUBSCRIPTIONEXPRESSION,"",SardasKrustall.java(136:34-136:44),"g.nodes[j]"
338,MEMBEREXPRESSION,"nodes",SardasKrustall.java(136:34-136:41),"g.nodes"
339,DECLAREDREFERENCEEXPRESSION,"j",SardasKrustall.java(136:42-136:43),"j"
340,PARAMVARIABLEDECLARATION,"node1",,""
341,DECLAREDREFERENCEEXPRESSION,"g",SardasKrustall.java(136:34-136:35),"g"
342,ARRAYSUBSCRIPTIONEXPRESSION,"",SardasKrustall.java(136:22-136:32),"g.nodes[i]"
343,MEMBEREXPRESSION,"nodes",SardasKrustall.java(136:22-136:29),"g.nodes"
344,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(136:30-136:31),"i"
345,PARAMVARIABLEDECLARATION,"node0",,""
346,DECLAREDREFERENCEEXPRESSION,"g",SardasKrustall.java(136:22-136:23),"g"
347,MEMBEREXPRESSION,"edges",SardasKrustall.java(136:3-136:8),"edges"
348,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(134:15-134:16),"i"
349,MEMBEREXPRESSION,"n",SardasKrustall.java(134:17-134:20),"g.n"
350,DECLAREDREFERENCEEXPRESSION,"g",SardasKrustall.java(134:17-134:18),"g"
351,VARIABLEDECLARATION,"this",,""
352,COMPOUNDSTATEMENT,"",SardasKrustall.java(102:43-109:6),"{
	
       	for(int i=0; i<sets.get(b).nodes.size(); i++){
	    sets.get(a).nodes.add(sets.get(b).nodes.get(i));
	}
	sets.remove(b);
	
    }"
353,LITERAL,"",SardasKrustall.java(104:19-104:20),"0"
354,RETURNSTATEMENT,"",,""
355,FORSTATEMENT,"",SardasKrustall.java(104:9-106:3),"for(int i=0; i<sets.get(b).nodes.size(); i++){
	    sets.get(a).nodes.add(sets.get(b).nodes.get(i));
	}"
356,MEMBERCALLEXPRESSION,"remove",SardasKrustall.java(107:2-107:17),"sets.remove(b);"
357,DECLAREDREFERENCEEXPRESSION,"remove",SardasKrustall.java(107:7-107:13),"remove"
358,DECLAREDREFERENCEEXPRESSION,"b",SardasKrustall.java(107:14-107:15),"b"
359,MEMBEREXPRESSION,"sets",SardasKrustall.java(107:2-107:6),"sets"
360,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(107:2-107:6),"SardasKrustall"
361,COMPOUNDSTATEMENT,"",SardasKrustall.java(104:54-106:3),"{
	    sets.get(a).nodes.add(sets.get(b).nodes.get(i));
	}"
362,DECLARATIONSTATEMENT,"",SardasKrustall.java(104:13-104:20),"int i=0"
363,BINARYOPERATOR,"<",SardasKrustall.java(104:22-104:48),"i<sets.get(b).nodes.size()"
364,UNARYOPERATOR,"++",SardasKrustall.java(104:50-104:53),"i++"
365,VARIABLEDECLARATION,"i",SardasKrustall.java(104:17-104:20),"i=0"
366,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(105:6-105:10),"SardasKrustall"
367,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(104:50-104:51),"i"
368,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(104:22-104:23),"i"
369,MEMBERCALLEXPRESSION,"size",SardasKrustall.java(104:24-104:48),"sets.get(b).nodes.size()"
370,DECLAREDREFERENCEEXPRESSION,"size",SardasKrustall.java(104:42-104:46),"size"
371,MEMBEREXPRESSION,"nodes",SardasKrustall.java(104:24-104:41),"sets.get(b).nodes"
372,MEMBERCALLEXPRESSION,"get",SardasKrustall.java(104:24-104:35),"sets.get(b)"
373,DECLAREDREFERENCEEXPRESSION,"get",SardasKrustall.java(104:29-104:32),"get"
374,DECLAREDREFERENCEEXPRESSION,"b",SardasKrustall.java(104:33-104:34),"b"
375,MEMBEREXPRESSION,"sets",SardasKrustall.java(104:24-104:28),"sets"
376,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(104:24-104:28),"SardasKrustall"
377,MEMBERCALLEXPRESSION,"add",SardasKrustall.java(105:6-105:54),"sets.get(a).nodes.add(sets.get(b).nodes.get(i));"
378,DECLAREDREFERENCEEXPRESSION,"add",SardasKrustall.java(105:24-105:27),"add"
379,MEMBERCALLEXPRESSION,"get",SardasKrustall.java(105:28-105:52),"sets.get(b).nodes.get(i)"
380,DECLAREDREFERENCEEXPRESSION,"get",SardasKrustall.java(105:46-105:49),"get"
381,DECLAREDREFERENCEEXPRESSION,"i",SardasKrustall.java(105:50-105:51),"i"
382,MEMBEREXPRESSION,"nodes",SardasKrustall.java(105:28-105:45),"sets.get(b).nodes"
383,MEMBERCALLEXPRESSION,"get",SardasKrustall.java(105:28-105:39),"sets.get(b)"
384,DECLAREDREFERENCEEXPRESSION,"get",SardasKrustall.java(105:33-105:36),"get"
385,DECLAREDREFERENCEEXPRESSION,"b",SardasKrustall.java(105:37-105:38),"b"
386,MEMBEREXPRESSION,"sets",SardasKrustall.java(105:28-105:32),"sets"
387,DECLAREDREFERENCEEXPRESSION,"SardasKrustall",SardasKrustall.java(105:28-105:32),"SardasKrustall"
388,MEMBEREXPRESSION,"nodes",SardasKrustall.java(105:6-105:23),"sets.get(a).nodes"
389,MEMBERCALLEXPRESSION,"get",SardasKrustall.java(105:6-105:17),"sets.get(a)"
390,DECLAREDREFERENCEEXPRESSION,"get",SardasKrustall.java(105:11-105:14),"get"
391,DECLAREDREFERENCEEXPRESSION,"a",SardasKrustall.java(105:15-105:16),"a"
392,MEMBEREXPRESSION,"sets",SardasKrustall.java(105:6-105:10),"sets"
393,FIELDDECLARATION,"this",,""
394,FIELDDECLARATION,"a",SardasKrustall.java(61:5-61:19),"a"
395,FIELDDECLARATION,"b",SardasKrustall.java(62:5-62:19),"b"
396,FIELDDECLARATION,"dist",SardasKrustall.java(63:5-63:24),"dist"
397,METHODDECLARATION,"compareTo",SardasKrustall.java(72:5-80:6),"@Override
    public int compareTo(Edge e){
	if(Double.compare(this.dist, e.dist) < 0){
	    return -1;
	}else if(Double.compare(this.dist, e.dist) > 0){
	    return 1;
	}
	return 0;
    }"
398,CONSTRUCTORDECLARATION,"Edge",SardasKrustall.java(66:5-70:6),"Edge(Node a, Node b){
	this.a=a;
	this.b=b;
	this.dist=Math.sqrt(Math.pow(b.x-a.x,2)+Math.pow(b.y-a.y,2));
    }"
399,VARIABLEDECLARATION,"this",,""
400,COMPOUNDSTATEMENT,"",SardasKrustall.java(73:33-80:6),"{
	if(Double.compare(this.dist, e.dist) < 0){
	    return -1;
	}else if(Double.compare(this.dist, e.dist) > 0){
	    return 1;
	}
	return 0;
    }"
401,PARAMVARIABLEDECLARATION,"e",SardasKrustall.java(73:26-73:32),"Edge e"
402,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(74:20-74:24),"this"
403,RETURNSTATEMENT,"",SardasKrustall.java(79:2-79:11),"return 0;"
404,IFSTATEMENT,"",SardasKrustall.java(74:2-78:3),"if(Double.compare(this.dist, e.dist) < 0){
	    return -1;
	}else if(Double.compare(this.dist, e.dist) > 0){
	    return 1;
	}"
405,LITERAL,"",SardasKrustall.java(79:9-79:10),"0"
406,IFSTATEMENT,"",SardasKrustall.java(76:8-78:3),"if(Double.compare(this.dist, e.dist) > 0){
	    return 1;
	}"
407,BINARYOPERATOR,"<",SardasKrustall.java(74:5-74:42),"Double.compare(this.dist, e.dist) < 0"
408,COMPOUNDSTATEMENT,"",SardasKrustall.java(74:43-76:3),"{
	    return -1;
	}"
409,LITERAL,"",SardasKrustall.java(75:14-75:15),"1"
410,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(76:26-76:30),"this"
411,BINARYOPERATOR,">",SardasKrustall.java(76:11-76:48),"Double.compare(this.dist, e.dist) > 0"
412,COMPOUNDSTATEMENT,"",SardasKrustall.java(76:49-78:3),"{
	    return 1;
	}"
413,LITERAL,"",SardasKrustall.java(77:13-77:14),"1"
414,RETURNSTATEMENT,"",SardasKrustall.java(77:6-77:15),"return 1;"
415,STATICCALLEXPRESSION,"compare",SardasKrustall.java(76:11-76:44),"Double.compare(this.dist, e.dist)"
416,LITERAL,"",SardasKrustall.java(76:47-76:48),"0"
417,MEMBEREXPRESSION,"dist",SardasKrustall.java(76:37-76:43),"e.dist"
418,DECLAREDREFERENCEEXPRESSION,"e",SardasKrustall.java(76:37-76:38),"e"
419,MEMBEREXPRESSION,"dist",SardasKrustall.java(76:26-76:35),"this.dist"
420,STATICCALLEXPRESSION,"compare",SardasKrustall.java(74:5-74:38),"Double.compare(this.dist, e.dist)"
421,LITERAL,"",SardasKrustall.java(74:41-74:42),"0"
422,MEMBEREXPRESSION,"dist",SardasKrustall.java(74:31-74:37),"e.dist"
423,MEMBEREXPRESSION,"dist",SardasKrustall.java(74:20-74:29),"this.dist"
424,DECLAREDREFERENCEEXPRESSION,"e",SardasKrustall.java(74:31-74:32),"e"
425,RETURNSTATEMENT,"",SardasKrustall.java(75:6-75:16),"return -1;"
426,UNARYOPERATOR,"-",SardasKrustall.java(75:13-75:15),"-1"
427,COMPOUNDSTATEMENT,"",SardasKrustall.java(66:25-70:6),"{
	this.a=a;
	this.b=b;
	this.dist=Math.sqrt(Math.pow(b.x-a.x,2)+Math.pow(b.y-a.y,2));
    }"
428,PARAMVARIABLEDECLARATION,"a",SardasKrustall.java(66:10-66:16),"Node a"
429,PARAMVARIABLEDECLARATION,"b",SardasKrustall.java(66:18-66:24),"Node b"
430,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(67:2-67:6),"this"
431,RETURNSTATEMENT,"",,""
432,BINARYOPERATOR,"=",SardasKrustall.java(67:2-67:11),"this.a=a;"
433,BINARYOPERATOR,"=",SardasKrustall.java(68:2-68:11),"this.b=b;"
434,BINARYOPERATOR,"=",SardasKrustall.java(69:2-69:63),"this.dist=Math.sqrt(Math.pow(b.x-a.x,2)+Math.pow(b.y-a.y,2));"
435,MEMBEREXPRESSION,"b",SardasKrustall.java(68:2-68:8),"this.b"
436,DECLAREDREFERENCEEXPRESSION,"b",SardasKrustall.java(68:9-68:10),"b"
437,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(69:2-69:6),"this"
438,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(68:2-68:6),"this"
439,MEMBEREXPRESSION,"a",SardasKrustall.java(67:2-67:8),"this.a"
440,DECLAREDREFERENCEEXPRESSION,"a",SardasKrustall.java(67:9-67:10),"a"
441,MEMBEREXPRESSION,"dist",SardasKrustall.java(69:2-69:11),"this.dist"
442,STATICCALLEXPRESSION,"sqrt",SardasKrustall.java(69:12-69:62),"Math.sqrt(Math.pow(b.x-a.x,2)+Math.pow(b.y-a.y,2))"
443,DECLAREDREFERENCEEXPRESSION,"b",SardasKrustall.java(69:31-69:32),"b"
444,BINARYOPERATOR,"+",SardasKrustall.java(69:22-69:61),"Math.pow(b.x-a.x,2)+Math.pow(b.y-a.y,2)"
445,STATICCALLEXPRESSION,"pow",SardasKrustall.java(69:22-69:41),"Math.pow(b.x-a.x,2)"
446,STATICCALLEXPRESSION,"pow",SardasKrustall.java(69:42-69:61),"Math.pow(b.y-a.y,2)"
447,DECLAREDREFERENCEEXPRESSION,"b",SardasKrustall.java(69:51-69:52),"b"
448,LITERAL,"",SardasKrustall.java(69:39-69:40),"2"
449,BINARYOPERATOR,"-",SardasKrustall.java(69:31-69:38),"b.x-a.x"
450,MEMBEREXPRESSION,"x",SardasKrustall.java(69:31-69:34),"b.x"
451,MEMBEREXPRESSION,"x",SardasKrustall.java(69:35-69:38),"a.x"
452,DECLAREDREFERENCEEXPRESSION,"a",SardasKrustall.java(69:35-69:36),"a"
453,LITERAL,"",SardasKrustall.java(69:59-69:60),"2"
454,BINARYOPERATOR,"-",SardasKrustall.java(69:51-69:58),"b.y-a.y"
455,MEMBEREXPRESSION,"y",SardasKrustall.java(69:51-69:54),"b.y"
456,MEMBEREXPRESSION,"y",SardasKrustall.java(69:55-69:58),"a.y"
457,DECLAREDREFERENCEEXPRESSION,"a",SardasKrustall.java(69:55-69:56),"a"
458,FIELDDECLARATION,"this",,""
459,FIELDDECLARATION,"nodes",SardasKrustall.java(48:5-48:35),"nodes"
460,FIELDDECLARATION,"id",SardasKrustall.java(49:5-49:19),"id"
461,METHODDECLARATION,"insert",,""
462,METHODDECLARATION,"intersect",,""
463,METHODDECLARATION,"isEqual",,""
464,CONSTRUCTORDECLARATION,"Set",,""
465,CONSTRUCTORDECLARATION,"Set",,""
466,COMPOUNDSTATEMENT,"",SardasKrustall.java(51:24-55:6),"{
	nodes = new LinkedList<Node>();	
	nodes.addLast(a);
	this.id = id;
    }"
467,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(52:2-52:7),"this"
468,RETURNSTATEMENT,"",,""
469,BINARYOPERATOR,"=",SardasKrustall.java(52:2-52:33),"nodes = new LinkedList<Node>();"
470,MEMBERCALLEXPRESSION,"addLast",SardasKrustall.java(53:2-53:19),"nodes.addLast(a);"
471,BINARYOPERATOR,"=",SardasKrustall.java(54:2-54:15),"this.id = id;"
472,DECLAREDREFERENCEEXPRESSION,"addLast",SardasKrustall.java(53:8-53:15),"addLast"
473,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(54:2-54:6),"this"
474,DECLAREDREFERENCEEXPRESSION,"a",SardasKrustall.java(53:16-53:17),"a"
475,MEMBEREXPRESSION,"nodes",SardasKrustall.java(53:2-53:7),"nodes"
476,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(53:2-53:7),"this"
477,MEMBEREXPRESSION,"nodes",SardasKrustall.java(52:2-52:7),"nodes"
478,NEWEXPRESSION,"",SardasKrustall.java(52:10-52:32),"new LinkedList<Node>()"
479,CONSTRUCTEXPRESSION,"",SardasKrustall.java(52:10-52:32),"new LinkedList<Node>()"
480,MEMBEREXPRESSION,"id",SardasKrustall.java(54:2-54:9),"this.id"
481,DECLAREDREFERENCEEXPRESSION,"id",SardasKrustall.java(54:12-54:14),"id"
482,PARAMVARIABLEDECLARATION,"int0",,""
483,MEMBERCALLEXPRESSION,"insert",sociologia.java(157:34-157:48),"aux.insert(i);"
484,MEMBERCALLEXPRESSION,"insert",sociologia.java(230:7-230:30),"s.insert(aux.proxVert);"
485,MEMBERCALLEXPRESSION,"insert",sociologia.java(220:3-220:15),"s.insert(v);"
486,MEMBEREXPRESSION,"proxVert",sociologia.java(230:16-230:28),"aux.proxVert"
487,DECLAREDREFERENCEEXPRESSION,"i",sociologia.java(157:45-157:46),"i"
488,DECLAREDREFERENCEEXPRESSION,"v",sociologia.java(220:12-220:13),"v"
489,PARAMVARIABLEDECLARATION,"set0",,""
490,MEMBERCALLEXPRESSION,"intersect",sociologia.java(277:9-277:25),"s1.intersect(s2)"
491,DECLAREDREFERENCEEXPRESSION,"s2",sociologia.java(277:22-277:24),"s2"
492,PARAMVARIABLEDECLARATION,"int0",,""
493,CONSTRUCTEXPRESSION,"",sociologia.java(154:13-154:26),"new Set(size)"
494,MEMBEREXPRESSION,"size",sociologia.java(154:21-154:25),"size"
495,PARAMVARIABLEDECLARATION,"unknown0",,""
496,CONSTRUCTEXPRESSION,"",sociologia.java(215:11-215:23),"new Set(n+1)"
497,BINARYOPERATOR,"+",sociologia.java(215:19-215:22),"n+1"
498,PARAMVARIABLEDECLARATION,"set0",,""
499,MEMBERCALLEXPRESSION,"isEqual",sociologia.java(182:9-182:25),"aux.s.isEqual(n)"
500,DECLAREDREFERENCEEXPRESSION,"n",sociologia.java(182:23-182:24),"n"
501,FIELDDECLARATION,"this",,""
502,FIELDDECLARATION,"x",SardasKrustall.java(7:5-7:21),"x"
503,FIELDDECLARATION,"y",SardasKrustall.java(8:5-8:21),"y"
504,FIELDDECLARATION,"pai",SardasKrustall.java(9:5-9:21),"pai"
505,FIELDDECLARATION,"index",SardasKrustall.java(10:5-10:22),"index"
506,CONSTRUCTORDECLARATION,"Node",SardasKrustall.java(12:5-13:6),"Node(){
    }"
507,CONSTRUCTORDECLARATION,"Node",SardasKrustall.java(15:5-20:6),"Node(double x, double y, int index){
        this.index = index;
	this.x=x;
	this.y=y;
	this.pai = null;
    }"
508,COMPOUNDSTATEMENT,"",SardasKrustall.java(12:11-13:6),"{
    }"
509,RETURNSTATEMENT,"",,""
510,COMPOUNDSTATEMENT,"",SardasKrustall.java(15:40-20:6),"{
        this.index = index;
	this.x=x;
	this.y=y;
	this.pai = null;
    }"
511,PARAMVARIABLEDECLARATION,"x",SardasKrustall.java(15:10-15:18),"double x"
512,PARAMVARIABLEDECLARATION,"y",SardasKrustall.java(15:20-15:28),"double y"
513,PARAMVARIABLEDECLARATION,"index",SardasKrustall.java(15:30-15:39),"int index"
514,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(16:9-16:13),"this"
515,RETURNSTATEMENT,"",,""
516,BINARYOPERATOR,"=",SardasKrustall.java(16:9-16:28),"this.index = index;"
517,BINARYOPERATOR,"=",SardasKrustall.java(17:2-17:11),"this.x=x;"
518,BINARYOPERATOR,"=",SardasKrustall.java(18:2-18:11),"this.y=y;"
519,BINARYOPERATOR,"=",SardasKrustall.java(19:2-19:18),"this.pai = null;"
520,MEMBEREXPRESSION,"pai",SardasKrustall.java(19:2-19:10),"this.pai"
521,LITERAL,"",SardasKrustall.java(19:13-19:17),"null"
522,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(19:2-19:6),"this"
523,MEMBEREXPRESSION,"x",SardasKrustall.java(17:2-17:8),"this.x"
524,DECLAREDREFERENCEEXPRESSION,"x",SardasKrustall.java(17:9-17:10),"x"
525,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(18:2-18:6),"this"
526,DECLAREDREFERENCEEXPRESSION,"this",SardasKrustall.java(17:2-17:6),"this"
527,MEMBEREXPRESSION,"y",SardasKrustall.java(18:2-18:8),"this.y"
528,DECLAREDREFERENCEEXPRESSION,"y",SardasKrustall.java(18:9-18:10),"y"
529,MEMBEREXPRESSION,"index",SardasKrustall.java(16:9-16:19),"this.index"
530,DECLAREDREFERENCEEXPRESSION,"index",SardasKrustall.java(16:22-16:27),"index"

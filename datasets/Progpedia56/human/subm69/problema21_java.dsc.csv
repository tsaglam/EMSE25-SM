id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07569924_21_201306221/problema21.java",,""
2,RECORDDECLARATION,"problema21",problema21.java(4:1-49:2),"class problema21 {
    public static float cont = 0;
    public static PriorityQueue<Aresta> heap = new PriorityQueue<Aresta>();
    public static No no[] = new No[100];
    public static void main(String args[]) {
	Scanner in = new Scanner(System.in);
	int n = in.nextInt() ;
	
	for(int i = 0; i < n; i++) {
	    no[i] = new No(in.nextDouble(), in.nextDouble());
	}
	
	prim(no[0], n);
	System.out.printf(""%.2f"", cont);
	System.out.println();
    }
    
    public static void prim(No x, int numnos) {
	x.visitado = true;
	
	for(int i = 0; i < numnos; i++) {
	    if(!no[i].visitado) {
		Aresta temp = new Aresta(x, no[i]);
		
		heap.add(temp);
	    }
	}

	    while(heap.size() != 0 && numnos > 0) {
		Aresta temp = new Aresta();
		temp = heap.peek();
		if(temp.b.visitado) {
		    Aresta pl =  heap.poll();
		} 
		else{
		    cont += temp.distancia;
		    Aresta pl = heap.poll();
		    numnos--;
		    prim(temp.b, numnos);
		}
		
	    }
	    
	
    }
}"
3,RECORDDECLARATION,"No",problema21.java(50:1-59:2),"class No {
    double x, y;
    boolean visitado;
    
    No(double x, double y) {
	this.x = x;
	this.y = y;
	visitado = false;
    }   
}"
4,RECORDDECLARATION,"Aresta",problema21.java(61:1-84:2),"class Aresta implements Comparable<Aresta>{
    No a, b;
    double distancia;
    
    Aresta() {
    }
    
    Aresta(No x, No y) {
	a = x;
	b = y;
	double dis1 = (a.x - b.x);
	double dis2 = (a.y - b.y);
	dis1 = dis1 * dis1;
	dis2 = dis2 * dis2;
	distancia = Math.sqrt(dis1+dis2);
    }

    @Override
    public int compareTo(Aresta x) {
	return Double.compare(this.distancia, x.distancia);
    }


}"
5,INCLUDEDECLARATION,"java.util",,""
6,INCLUDEDECLARATION,"java.io",,""
7,FIELDDECLARATION,"this",,""
8,FIELDDECLARATION,"x",problema21.java(51:5-51:17),"x"
9,FIELDDECLARATION,"visitado",problema21.java(52:5-52:22),"visitado"
10,CONSTRUCTORDECLARATION,"No",problema21.java(54:5-58:6),"No(double x, double y) {
	this.x = x;
	this.y = y;
	visitado = false;
    }"
11,COMPOUNDSTATEMENT,"",problema21.java(54:28-58:6),"{
	this.x = x;
	this.y = y;
	visitado = false;
    }"
12,PARAMVARIABLEDECLARATION,"x",problema21.java(54:8-54:16),"double x"
13,PARAMVARIABLEDECLARATION,"y",problema21.java(54:18-54:26),"double y"
14,DECLAREDREFERENCEEXPRESSION,"this",problema21.java(55:2-55:6),"this"
15,RETURNSTATEMENT,"",,""
16,BINARYOPERATOR,"=",problema21.java(55:2-55:13),"this.x = x;"
17,BINARYOPERATOR,"=",problema21.java(56:2-56:13),"this.y = y;"
18,BINARYOPERATOR,"=",problema21.java(57:2-57:19),"visitado = false;"
19,MEMBEREXPRESSION,"y",problema21.java(56:2-56:8),"this.y"
20,DECLAREDREFERENCEEXPRESSION,"y",problema21.java(56:11-56:12),"y"
21,DECLAREDREFERENCEEXPRESSION,"this",problema21.java(57:2-57:10),"this"
22,DECLAREDREFERENCEEXPRESSION,"this",problema21.java(56:2-56:6),"this"
23,MEMBEREXPRESSION,"visitado",problema21.java(57:2-57:10),"visitado"
24,LITERAL,"",problema21.java(57:13-57:18),"false"
25,MEMBEREXPRESSION,"x",problema21.java(55:2-55:8),"this.x"
26,DECLAREDREFERENCEEXPRESSION,"x",problema21.java(55:11-55:12),"x"
27,FIELDDECLARATION,"this",,""
28,FIELDDECLARATION,"a",problema21.java(62:5-62:13),"a"
29,FIELDDECLARATION,"distancia",problema21.java(63:5-63:22),"distancia"
30,METHODDECLARATION,"compareTo",problema21.java(78:5-81:6),"@Override
    public int compareTo(Aresta x) {
	return Double.compare(this.distancia, x.distancia);
    }"
31,CONSTRUCTORDECLARATION,"Aresta",problema21.java(65:5-66:6),"Aresta() {
    }"
32,CONSTRUCTORDECLARATION,"Aresta",problema21.java(68:5-76:6),"Aresta(No x, No y) {
	a = x;
	b = y;
	double dis1 = (a.x - b.x);
	double dis2 = (a.y - b.y);
	dis1 = dis1 * dis1;
	dis2 = dis2 * dis2;
	distancia = Math.sqrt(dis1+dis2);
    }"
33,COMPOUNDSTATEMENT,"",problema21.java(65:14-66:6),"{
    }"
34,RETURNSTATEMENT,"",,""
35,VARIABLEDECLARATION,"this",,""
36,COMPOUNDSTATEMENT,"",problema21.java(79:36-81:6),"{
	return Double.compare(this.distancia, x.distancia);
    }"
37,PARAMVARIABLEDECLARATION,"x",problema21.java(79:26-79:34),"Aresta x"
38,DECLAREDREFERENCEEXPRESSION,"this",problema21.java(80:24-80:28),"this"
39,RETURNSTATEMENT,"",problema21.java(80:2-80:53),"return Double.compare(this.distancia, x.distancia);"
40,STATICCALLEXPRESSION,"compare",problema21.java(80:9-80:52),"Double.compare(this.distancia, x.distancia)"
41,MEMBEREXPRESSION,"distancia",problema21.java(80:40-80:51),"x.distancia"
42,MEMBEREXPRESSION,"distancia",problema21.java(80:24-80:38),"this.distancia"
43,DECLAREDREFERENCEEXPRESSION,"x",problema21.java(80:40-80:41),"x"
44,COMPOUNDSTATEMENT,"",problema21.java(68:24-76:6),"{
	a = x;
	b = y;
	double dis1 = (a.x - b.x);
	double dis2 = (a.y - b.y);
	dis1 = dis1 * dis1;
	dis2 = dis2 * dis2;
	distancia = Math.sqrt(dis1+dis2);
    }"
45,PARAMVARIABLEDECLARATION,"x",problema21.java(68:12-68:16),"No x"
46,PARAMVARIABLEDECLARATION,"y",problema21.java(68:18-68:22),"No y"
47,DECLAREDREFERENCEEXPRESSION,"this",problema21.java(69:2-69:3),"this"
48,RETURNSTATEMENT,"",,""
49,BINARYOPERATOR,"=",problema21.java(69:2-69:8),"a = x;"
50,BINARYOPERATOR,"=",problema21.java(70:2-70:8),"b = y;"
51,DECLARATIONSTATEMENT,"",problema21.java(71:2-71:28),"double dis1 = (a.x - b.x);"
52,DECLARATIONSTATEMENT,"",problema21.java(72:2-72:28),"double dis2 = (a.y - b.y);"
53,BINARYOPERATOR,"=",problema21.java(73:2-73:21),"dis1 = dis1 * dis1;"
54,BINARYOPERATOR,"=",problema21.java(74:2-74:21),"dis2 = dis2 * dis2;"
55,BINARYOPERATOR,"=",problema21.java(75:2-75:35),"distancia = Math.sqrt(dis1+dis2);"
56,VARIABLEDECLARATION,"dis1",problema21.java(71:9-71:27),"dis1 = (a.x - b.x)"
57,VARIABLEDECLARATION,"dis2",problema21.java(72:9-72:27),"dis2 = (a.y - b.y)"
58,BINARYOPERATOR,"-",problema21.java(71:17-71:26),"a.x - b.x"
59,MEMBEREXPRESSION,"x",problema21.java(71:17-71:20),"a.x"
60,MEMBEREXPRESSION,"x",problema21.java(71:23-71:26),"b.x"
61,DECLAREDREFERENCEEXPRESSION,"a",problema21.java(71:17-71:18),"a"
62,DECLAREDREFERENCEEXPRESSION,"b",problema21.java(71:23-71:24),"b"
63,BINARYOPERATOR,"-",problema21.java(72:17-72:26),"a.y - b.y"
64,MEMBEREXPRESSION,"y",problema21.java(72:17-72:20),"a.y"
65,MEMBEREXPRESSION,"y",problema21.java(72:23-72:26),"b.y"
66,DECLAREDREFERENCEEXPRESSION,"a",problema21.java(72:17-72:18),"a"
67,DECLAREDREFERENCEEXPRESSION,"b",problema21.java(72:23-72:24),"b"
68,DECLAREDREFERENCEEXPRESSION,"dis1",problema21.java(73:2-73:6),"dis1"
69,BINARYOPERATOR,"*",problema21.java(73:9-73:20),"dis1 * dis1"
70,DECLAREDREFERENCEEXPRESSION,"dis2",problema21.java(74:2-74:6),"dis2"
71,DECLAREDREFERENCEEXPRESSION,"dis1",problema21.java(73:9-73:13),"dis1"
72,DECLAREDREFERENCEEXPRESSION,"dis1",problema21.java(73:16-73:20),"dis1"
73,MEMBEREXPRESSION,"b",problema21.java(70:2-70:3),"b"
74,DECLAREDREFERENCEEXPRESSION,"y",problema21.java(70:6-70:7),"y"
75,DECLAREDREFERENCEEXPRESSION,"this",problema21.java(70:2-70:3),"this"
76,MEMBEREXPRESSION,"a",problema21.java(69:2-69:3),"a"
77,DECLAREDREFERENCEEXPRESSION,"x",problema21.java(69:6-69:7),"x"
78,BINARYOPERATOR,"*",problema21.java(74:9-74:20),"dis2 * dis2"
79,DECLAREDREFERENCEEXPRESSION,"this",problema21.java(75:2-75:11),"this"
80,DECLAREDREFERENCEEXPRESSION,"dis2",problema21.java(74:9-74:13),"dis2"
81,DECLAREDREFERENCEEXPRESSION,"dis2",problema21.java(74:16-74:20),"dis2"
82,MEMBEREXPRESSION,"distancia",problema21.java(75:2-75:11),"distancia"
83,STATICCALLEXPRESSION,"sqrt",problema21.java(75:14-75:34),"Math.sqrt(dis1+dis2)"
84,BINARYOPERATOR,"+",problema21.java(75:24-75:33),"dis1+dis2"
85,DECLAREDREFERENCEEXPRESSION,"dis1",problema21.java(75:24-75:28),"dis1"
86,DECLAREDREFERENCEEXPRESSION,"dis2",problema21.java(75:29-75:33),"dis2"
87,FIELDDECLARATION,"this",,""
88,FIELDDECLARATION,"cont",problema21.java(5:5-5:34),"cont = 0"
89,FIELDDECLARATION,"heap",problema21.java(6:5-6:76),"heap = new PriorityQueue<Aresta>()"
90,FIELDDECLARATION,"no",problema21.java(7:5-7:41),"no = new No[100]"
91,METHODDECLARATION,"main",problema21.java(8:5-19:6),"public static void main(String args[]) {
	Scanner in = new Scanner(System.in);
	int n = in.nextInt() ;
	
	for(int i = 0; i < n; i++) {
	    no[i] = new No(in.nextDouble(), in.nextDouble());
	}
	
	prim(no[0], n);
	System.out.printf(""%.2f"", cont);
	System.out.println();
    }"
92,METHODDECLARATION,"prim",problema21.java(21:5-48:6),"public static void prim(No x, int numnos) {
	x.visitado = true;
	
	for(int i = 0; i < numnos; i++) {
	    if(!no[i].visitado) {
		Aresta temp = new Aresta(x, no[i]);
		
		heap.add(temp);
	    }
	}

	    while(heap.size() != 0 && numnos > 0) {
		Aresta temp = new Aresta();
		temp = heap.peek();
		if(temp.b.visitado) {
		    Aresta pl =  heap.poll();
		} 
		else{
		    cont += temp.distancia;
		    Aresta pl = heap.poll();
		    numnos--;
		    prim(temp.b, numnos);
		}
		
	    }
	    
	
    }"
93,CONSTRUCTORDECLARATION,"problema21",,""
94,NEWEXPRESSION,"",problema21.java(6:48-6:75),"new PriorityQueue<Aresta>()"
95,CONSTRUCTEXPRESSION,"",problema21.java(6:48-6:75),"new PriorityQueue<Aresta>()"
96,VARIABLEDECLARATION,"this",,""
97,COMPOUNDSTATEMENT,"",problema21.java(8:44-19:6),"{
	Scanner in = new Scanner(System.in);
	int n = in.nextInt() ;
	
	for(int i = 0; i < n; i++) {
	    no[i] = new No(in.nextDouble(), in.nextDouble());
	}
	
	prim(no[0], n);
	System.out.printf(""%.2f"", cont);
	System.out.println();
    }"
98,PARAMVARIABLEDECLARATION,"args",problema21.java(8:29-8:42),"String args[]"
99,DECLAREDREFERENCEEXPRESSION,"System",problema21.java(9:27-9:33),"System"
100,RETURNSTATEMENT,"",,""
101,DECLARATIONSTATEMENT,"",problema21.java(9:2-9:38),"Scanner in = new Scanner(System.in);"
102,DECLARATIONSTATEMENT,"",problema21.java(10:2-10:24),"int n = in.nextInt() ;"
103,FORSTATEMENT,"",problema21.java(12:2-14:3),"for(int i = 0; i < n; i++) {
	    no[i] = new No(in.nextDouble(), in.nextDouble());
	}"
104,CALLEXPRESSION,"prim",problema21.java(16:2-16:17),"prim(no[0], n);"
105,MEMBERCALLEXPRESSION,"printf",problema21.java(17:2-17:34),"System.out.printf(""%.2f"", cont);"
106,MEMBERCALLEXPRESSION,"println",problema21.java(18:2-18:23),"System.out.println();"
107,VARIABLEDECLARATION,"in",problema21.java(9:10-9:37),"in = new Scanner(System.in)"
108,VARIABLEDECLARATION,"n",problema21.java(10:6-10:22),"n = in.nextInt()"
109,DECLAREDREFERENCEEXPRESSION,"in",problema21.java(10:10-10:12),"in"
110,LITERAL,"",problema21.java(12:14-12:15),"0"
111,DECLAREDREFERENCEEXPRESSION,"printf",problema21.java(17:13-17:19),"printf"
112,DECLAREDREFERENCEEXPRESSION,"System",problema21.java(18:2-18:8),"System"
113,MEMBEREXPRESSION,"cont",problema21.java(17:28-17:32),"cont"
114,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(17:28-17:32),"problema21"
115,LITERAL,"",problema21.java(17:20-17:26),"""%.2f"""
116,MEMBEREXPRESSION,"out",problema21.java(17:2-17:12),"System.out"
117,DECLAREDREFERENCEEXPRESSION,"System",problema21.java(17:2-17:8),"System"
118,DECLAREDREFERENCEEXPRESSION,"println",problema21.java(18:13-18:20),"println"
119,MEMBEREXPRESSION,"out",problema21.java(18:2-18:12),"System.out"
120,MEMBERCALLEXPRESSION,"nextInt",problema21.java(10:10-10:22),"in.nextInt()"
121,DECLAREDREFERENCEEXPRESSION,"nextInt",problema21.java(10:13-10:20),"nextInt"
122,COMPOUNDSTATEMENT,"",problema21.java(12:29-14:3),"{
	    no[i] = new No(in.nextDouble(), in.nextDouble());
	}"
123,DECLARATIONSTATEMENT,"",problema21.java(12:6-12:15),"int i = 0"
124,BINARYOPERATOR,"<",problema21.java(12:17-12:22),"i < n"
125,UNARYOPERATOR,"++",problema21.java(12:24-12:27),"i++"
126,VARIABLEDECLARATION,"i",problema21.java(12:10-12:15),"i = 0"
127,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(13:6-13:8),"problema21"
128,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(16:7-16:9),"problema21"
129,DECLAREDREFERENCEEXPRESSION,"i",problema21.java(12:17-12:18),"i"
130,DECLAREDREFERENCEEXPRESSION,"n",problema21.java(12:21-12:22),"n"
131,DECLAREDREFERENCEEXPRESSION,"i",problema21.java(12:24-12:25),"i"
132,BINARYOPERATOR,"=",problema21.java(13:6-13:55),"no[i] = new No(in.nextDouble(), in.nextDouble());"
133,ARRAYSUBSCRIPTIONEXPRESSION,"",problema21.java(13:6-13:11),"no[i]"
134,NEWEXPRESSION,"",problema21.java(13:14-13:54),"new No(in.nextDouble(), in.nextDouble())"
135,MEMBEREXPRESSION,"no",problema21.java(13:6-13:8),"no"
136,DECLAREDREFERENCEEXPRESSION,"i",problema21.java(13:9-13:10),"i"
137,DECLAREDREFERENCEEXPRESSION,"in",problema21.java(13:21-13:23),"in"
138,CONSTRUCTEXPRESSION,"",problema21.java(13:14-13:54),"new No(in.nextDouble(), in.nextDouble())"
139,CONSTRUCTORDECLARATION,"No",,""
140,MEMBERCALLEXPRESSION,"nextDouble",problema21.java(13:38-13:53),"in.nextDouble()"
141,DECLAREDREFERENCEEXPRESSION,"nextDouble",problema21.java(13:41-13:51),"nextDouble"
142,PARAMVARIABLEDECLARATION,"double1",,""
143,DECLAREDREFERENCEEXPRESSION,"in",problema21.java(13:38-13:40),"in"
144,MEMBERCALLEXPRESSION,"nextDouble",problema21.java(13:21-13:36),"in.nextDouble()"
145,DECLAREDREFERENCEEXPRESSION,"nextDouble",problema21.java(13:24-13:34),"nextDouble"
146,PARAMVARIABLEDECLARATION,"double0",,""
147,NEWEXPRESSION,"",problema21.java(9:15-9:37),"new Scanner(System.in)"
148,CONSTRUCTEXPRESSION,"",problema21.java(9:15-9:37),"new Scanner(System.in)"
149,MEMBEREXPRESSION,"in",problema21.java(9:27-9:36),"System.in"
150,METHODDECLARATION,"prim",problema21.java(21:5-49:6),"public static void prim(No x, int numnos) {
	x.visitado = true;
	
	for(int i = 0; i < numnos; i++) {
	    if(!no[i].visitado) {
		Aresta temp = new Aresta(x, no[i]);
		
		heap.add(temp);
	    }
	}

	    while(heap.size() != 0 && numnos > 0) {
		Aresta temp = new Aresta();
		temp = heap.peek();
		if(temp.b.visitado) {
		    Aresta pl =  heap.poll();
		    System.out.println(""Entrei aqui"");
		} 
		else{
		    cont += temp.distancia;
		    Aresta pl = heap.poll();
		    numnos--;
		    prim(temp.b, numnos);
		}
		
	    }
	    
	
    }"
151,ARRAYSUBSCRIPTIONEXPRESSION,"",problema21.java(16:7-16:12),"no[0]"
152,DECLAREDREFERENCEEXPRESSION,"n",problema21.java(16:14-16:15),"n"
153,MEMBEREXPRESSION,"no",problema21.java(16:7-16:9),"no"
154,LITERAL,"",problema21.java(16:10-16:11),"0"
155,PARAMVARIABLEDECLARATION,"x",problema21.java(21:29-21:33),"No x"
156,PARAMVARIABLEDECLARATION,"numnos",problema21.java(21:35-21:45),"int numnos"
157,LITERAL,"",problema21.java(5:32-5:33),"0"
158,ARRAYCREATIONEXPRESSION,"",problema21.java(7:29-7:40),"new No[100]"
159,LITERAL,"",problema21.java(7:36-7:39),"100"
160,VARIABLEDECLARATION,"this",,""
161,COMPOUNDSTATEMENT,"",problema21.java(21:47-48:6),"{
	x.visitado = true;
	
	for(int i = 0; i < numnos; i++) {
	    if(!no[i].visitado) {
		Aresta temp = new Aresta(x, no[i]);
		
		heap.add(temp);
	    }
	}

	    while(heap.size() != 0 && numnos > 0) {
		Aresta temp = new Aresta();
		temp = heap.peek();
		if(temp.b.visitado) {
		    Aresta pl =  heap.poll();
		} 
		else{
		    cont += temp.distancia;
		    Aresta pl = heap.poll();
		    numnos--;
		    prim(temp.b, numnos);
		}
		
	    }
	    
	
    }"
162,PARAMVARIABLEDECLARATION,"x",problema21.java(21:29-21:33),"No x"
163,PARAMVARIABLEDECLARATION,"numnos",problema21.java(21:35-21:45),"int numnos"
164,DECLAREDREFERENCEEXPRESSION,"x",problema21.java(22:2-22:3),"x"
165,RETURNSTATEMENT,"",,""
166,BINARYOPERATOR,"=",problema21.java(22:2-22:20),"x.visitado = true;"
167,FORSTATEMENT,"",problema21.java(24:2-30:3),"for(int i = 0; i < numnos; i++) {
	    if(!no[i].visitado) {
		Aresta temp = new Aresta(x, no[i]);
		
		heap.add(temp);
	    }
	}"
168,WHILESTATEMENT,"",problema21.java(32:6-45:7),"while(heap.size() != 0 && numnos > 0) {
		Aresta temp = new Aresta();
		temp = heap.peek();
		if(temp.b.visitado) {
		    Aresta pl =  heap.poll();
		} 
		else{
		    cont += temp.distancia;
		    Aresta pl = heap.poll();
		    numnos--;
		    prim(temp.b, numnos);
		}
		
	    }"
169,BINARYOPERATOR,"&&",problema21.java(32:12-32:42),"heap.size() != 0 && numnos > 0"
170,COMPOUNDSTATEMENT,"",problema21.java(32:44-45:7),"{
		Aresta temp = new Aresta();
		temp = heap.peek();
		if(temp.b.visitado) {
		    Aresta pl =  heap.poll();
		} 
		else{
		    cont += temp.distancia;
		    Aresta pl = heap.poll();
		    numnos--;
		    prim(temp.b, numnos);
		}
		
	    }"
171,CONSTRUCTEXPRESSION,"",problema21.java(33:17-33:29),"new Aresta()"
172,DECLARATIONSTATEMENT,"",problema21.java(33:3-33:30),"Aresta temp = new Aresta();"
173,BINARYOPERATOR,"=",problema21.java(34:3-34:22),"temp = heap.peek();"
174,IFSTATEMENT,"",problema21.java(35:3-43:4),"if(temp.b.visitado) {
		    Aresta pl =  heap.poll();
		} 
		else{
		    cont += temp.distancia;
		    Aresta pl = heap.poll();
		    numnos--;
		    prim(temp.b, numnos);
		}"
175,VARIABLEDECLARATION,"temp",problema21.java(33:10-33:29),"temp = new Aresta()"
176,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(32:12-32:16),"problema21"
177,COMPOUNDSTATEMENT,"",problema21.java(35:23-37:4),"{
		    Aresta pl =  heap.poll();
		}"
178,COMPOUNDSTATEMENT,"",problema21.java(38:7-43:4),"{
		    cont += temp.distancia;
		    Aresta pl = heap.poll();
		    numnos--;
		    prim(temp.b, numnos);
		}"
179,NEWEXPRESSION,"",problema21.java(33:17-33:29),"new Aresta()"
180,CONSTRUCTORDECLARATION,"Aresta",problema21.java(66:5-67:6),"Aresta() {
    }"
181,MEMBEREXPRESSION,"visitado",problema21.java(35:6-35:21),"temp.b.visitado"
182,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(36:20-36:24),"problema21"
183,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(39:7-39:11),"problema21"
184,MEMBEREXPRESSION,"b",problema21.java(35:6-35:12),"temp.b"
185,DECLAREDREFERENCEEXPRESSION,"temp",problema21.java(35:6-35:10),"temp"
186,BINARYOPERATOR,"+=",problema21.java(39:7-39:30),"cont += temp.distancia;"
187,DECLARATIONSTATEMENT,"",problema21.java(40:7-40:31),"Aresta pl = heap.poll();"
188,UNARYOPERATOR,"--",problema21.java(41:7-41:16),"numnos--;"
189,CALLEXPRESSION,"prim",problema21.java(42:7-42:28),"prim(temp.b, numnos);"
190,VARIABLEDECLARATION,"pl",problema21.java(40:14-40:30),"pl = heap.poll()"
191,MEMBEREXPRESSION,"cont",problema21.java(39:7-39:11),"cont"
192,MEMBEREXPRESSION,"distancia",problema21.java(39:15-39:29),"temp.distancia"
193,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(40:19-40:23),"problema21"
194,DECLAREDREFERENCEEXPRESSION,"temp",problema21.java(39:15-39:19),"temp"
195,MEMBEREXPRESSION,"b",problema21.java(42:12-42:18),"temp.b"
196,DECLAREDREFERENCEEXPRESSION,"numnos",problema21.java(42:20-42:26),"numnos"
197,DECLAREDREFERENCEEXPRESSION,"temp",problema21.java(42:12-42:16),"temp"
198,DECLAREDREFERENCEEXPRESSION,"numnos",problema21.java(41:7-41:13),"numnos"
199,MEMBERCALLEXPRESSION,"poll",problema21.java(40:19-40:30),"heap.poll()"
200,DECLAREDREFERENCEEXPRESSION,"poll",problema21.java(40:24-40:28),"poll"
201,MEMBEREXPRESSION,"heap",problema21.java(40:19-40:23),"heap"
202,DECLARATIONSTATEMENT,"",problema21.java(36:7-36:32),"Aresta pl =  heap.poll();"
203,VARIABLEDECLARATION,"pl",problema21.java(36:14-36:31),"pl =  heap.poll()"
204,MEMBERCALLEXPRESSION,"poll",problema21.java(36:20-36:31),"heap.poll()"
205,DECLAREDREFERENCEEXPRESSION,"poll",problema21.java(36:25-36:29),"poll"
206,MEMBEREXPRESSION,"heap",problema21.java(36:20-36:24),"heap"
207,DECLAREDREFERENCEEXPRESSION,"temp",problema21.java(34:3-34:7),"temp"
208,MEMBERCALLEXPRESSION,"peek",problema21.java(34:10-34:21),"heap.peek()"
209,DECLAREDREFERENCEEXPRESSION,"peek",problema21.java(34:15-34:19),"peek"
210,MEMBEREXPRESSION,"heap",problema21.java(34:10-34:14),"heap"
211,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(34:10-34:14),"problema21"
212,BINARYOPERATOR,"!=",problema21.java(32:12-32:28),"heap.size() != 0"
213,BINARYOPERATOR,">",problema21.java(32:32-32:42),"numnos > 0"
214,DECLAREDREFERENCEEXPRESSION,"numnos",problema21.java(32:32-32:38),"numnos"
215,LITERAL,"",problema21.java(32:41-32:42),"0"
216,MEMBERCALLEXPRESSION,"size",problema21.java(32:12-32:23),"heap.size()"
217,LITERAL,"",problema21.java(32:27-32:28),"0"
218,DECLAREDREFERENCEEXPRESSION,"size",problema21.java(32:17-32:21),"size"
219,MEMBEREXPRESSION,"heap",problema21.java(32:12-32:16),"heap"
220,COMPOUNDSTATEMENT,"",problema21.java(24:34-30:3),"{
	    if(!no[i].visitado) {
		Aresta temp = new Aresta(x, no[i]);
		
		heap.add(temp);
	    }
	}"
221,DECLARATIONSTATEMENT,"",problema21.java(24:6-24:15),"int i = 0"
222,BINARYOPERATOR,"<",problema21.java(24:17-24:27),"i < numnos"
223,UNARYOPERATOR,"++",problema21.java(24:29-24:32),"i++"
224,VARIABLEDECLARATION,"i",problema21.java(24:10-24:15),"i = 0"
225,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(25:10-25:12),"problema21"
226,LITERAL,"",problema21.java(24:14-24:15),"0"
227,DECLAREDREFERENCEEXPRESSION,"i",problema21.java(24:17-24:18),"i"
228,IFSTATEMENT,"",problema21.java(25:6-29:7),"if(!no[i].visitado) {
		Aresta temp = new Aresta(x, no[i]);
		
		heap.add(temp);
	    }"
229,DECLAREDREFERENCEEXPRESSION,"i",problema21.java(24:29-24:30),"i"
230,COMPOUNDSTATEMENT,"",problema21.java(25:26-29:7),"{
		Aresta temp = new Aresta(x, no[i]);
		
		heap.add(temp);
	    }"
231,UNARYOPERATOR,"!",problema21.java(25:9-25:24),"!no[i].visitado"
232,DECLAREDREFERENCEEXPRESSION,"x",problema21.java(26:28-26:29),"x"
233,MEMBEREXPRESSION,"visitado",problema21.java(25:10-25:24),"no[i].visitado"
234,ARRAYSUBSCRIPTIONEXPRESSION,"",problema21.java(25:10-25:15),"no[i]"
235,MEMBEREXPRESSION,"no",problema21.java(25:10-25:12),"no"
236,DECLAREDREFERENCEEXPRESSION,"i",problema21.java(25:13-25:14),"i"
237,DECLARATIONSTATEMENT,"",problema21.java(26:3-26:38),"Aresta temp = new Aresta(x, no[i]);"
238,MEMBERCALLEXPRESSION,"add",problema21.java(28:3-28:18),"heap.add(temp);"
239,VARIABLEDECLARATION,"temp",problema21.java(26:10-26:37),"temp = new Aresta(x, no[i])"
240,NEWEXPRESSION,"",problema21.java(26:17-26:37),"new Aresta(x, no[i])"
241,CONSTRUCTEXPRESSION,"",problema21.java(26:17-26:37),"new Aresta(x, no[i])"
242,CONSTRUCTORDECLARATION,"Aresta",problema21.java(69:5-77:6),"Aresta(No x, No y) {
	a = x;
	b = y;
	double dis1 = (a.x - b.x);
	double dis2 = (a.y - b.y);
	dis1 = dis1 * dis1;
	dis2 = dis2 * dis2;
	distancia = Math.sqrt(dis1+dis2);
    }"
243,ARRAYSUBSCRIPTIONEXPRESSION,"",problema21.java(26:31-26:36),"no[i]"
244,PARAMVARIABLEDECLARATION,"x",problema21.java(69:12-69:16),"No x"
245,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(26:31-26:33),"problema21"
246,MEMBEREXPRESSION,"no",problema21.java(26:31-26:33),"no"
247,DECLAREDREFERENCEEXPRESSION,"i",problema21.java(26:34-26:35),"i"
248,PARAMVARIABLEDECLARATION,"y",problema21.java(69:18-69:22),"No y"
249,DECLAREDREFERENCEEXPRESSION,"problema21",problema21.java(28:3-28:7),"problema21"
250,DECLAREDREFERENCEEXPRESSION,"add",problema21.java(28:8-28:11),"add"
251,DECLAREDREFERENCEEXPRESSION,"temp",problema21.java(28:12-28:16),"temp"
252,MEMBEREXPRESSION,"heap",problema21.java(28:3-28:7),"heap"
253,DECLAREDREFERENCEEXPRESSION,"numnos",problema21.java(24:21-24:27),"numnos"
254,MEMBEREXPRESSION,"visitado",problema21.java(22:2-22:12),"x.visitado"
255,LITERAL,"",problema21.java(22:15-22:19),"true"

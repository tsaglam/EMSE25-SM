id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07171463_24_201204630/prob24.java",,""
2,RECORDDECLARATION,"Ponto",prob24.java(5:1-18:2),"class Ponto{
    double x;
    double y;
    Ponto(double a , double b){
	x=a;
	y=b;
    }
    
    double distancia(Ponto p2){
	double dist;
	dist = Math.sqrt(Math.pow((x-p2.x),2)+Math.pow((y-p2.y),2));
	return dist;
    }
}"
3,RECORDDECLARATION,"prob24",prob24.java(20:1-87:2),"class prob24{
    static Ponto[] array;
    static double[][] matrix;
    static double[][] dist;
    static int n;
    static boolean[] visited;

    static void prim(int r){
	for(int i=1;i<=n;i++){
	    dist[r][i]=Double.MAX_VALUE-1;
	} 
	dist[r][r]=0;
	int vis=1;
	while(vis != n){
	    // extrair minimo
	    int u= -1;
	    double distmax = Double.MAX_VALUE;
	    for(int i=1; i<n+1; i++){
		if(!visited[i] && dist[r][i] < distmax){
		    distmax=dist[r][i];                 // escolher o elemento minimo u a visitar 
		    u=i;
		}
	    }
	    if(u==-1) break;
	    visited[u]=true;
	    vis++;
	    //fim extrair minimo
	    for(int i=1; i<n+1;i++){
		if( !visited[i] && matrix[u][i] < dist[r][i]){//se a distancia de r a i,
		    dist[r][i]=matrix[u][i];                   // for menor que a aresta de u a i, relaxar
		}

	    }
		
	}

    }
    
   public static void main(String args[]){
	double aux1=0.0;
	double aux2=0.0;
	double sum=0.0;
	
	Scanner s = new Scanner(System.in).useLocale(Locale.US);
	n=s.nextInt();
	array = new Ponto[2*n];//pontos
	matrix = new double[n+1][n+1]; //pesos
        dist = new double[n+1][n+1];
	visited = new boolean[n+1];
	s.nextLine();
	for(int i=1;i<n+1; i++){
	    aux1= s.nextDouble();
	    aux2= s.nextDouble();
	    array[i]=new Ponto(aux1, aux2);
	}

	for(int i=1; i<n+1;i++){
	    for(int j=1; j<n+1;j++){
		matrix[i][j] = array[i].distancia(array[j]);
	    }
	}
	prim(1);
	for(int i=1; i<n+1; i++){
	    sum += dist[1][i];
	}
	System.out.printf(""%.2f\n"",sum);
    }
}"
4,INCLUDEDECLARATION,"java.util",,""
5,INCLUDEDECLARATION,"java.io",,""
6,INCLUDEDECLARATION,"java.math",,""
7,FIELDDECLARATION,"this",,""
8,FIELDDECLARATION,"x",prob24.java(6:5-6:14),"x"
9,FIELDDECLARATION,"y",prob24.java(7:5-7:14),"y"
10,METHODDECLARATION,"distancia",prob24.java(13:5-17:6),"double distancia(Ponto p2){
	double dist;
	dist = Math.sqrt(Math.pow((x-p2.x),2)+Math.pow((y-p2.y),2));
	return dist;
    }"
11,CONSTRUCTORDECLARATION,"Ponto",prob24.java(8:5-11:6),"Ponto(double a , double b){
	x=a;
	y=b;
    }"
12,COMPOUNDSTATEMENT,"",prob24.java(8:31-11:6),"{
	x=a;
	y=b;
    }"
13,PARAMVARIABLEDECLARATION,"a",prob24.java(8:11-8:19),"double a"
14,PARAMVARIABLEDECLARATION,"b",prob24.java(8:22-8:30),"double b"
15,DECLAREDREFERENCEEXPRESSION,"this",prob24.java(9:2-9:3),"this"
16,RETURNSTATEMENT,"",,""
17,BINARYOPERATOR,"=",prob24.java(9:2-9:6),"x=a;"
18,BINARYOPERATOR,"=",prob24.java(10:2-10:6),"y=b;"
19,MEMBEREXPRESSION,"x",prob24.java(9:2-9:3),"x"
20,DECLAREDREFERENCEEXPRESSION,"a",prob24.java(9:4-9:5),"a"
21,DECLAREDREFERENCEEXPRESSION,"this",prob24.java(10:2-10:3),"this"
22,MEMBEREXPRESSION,"y",prob24.java(10:2-10:3),"y"
23,DECLAREDREFERENCEEXPRESSION,"b",prob24.java(10:4-10:5),"b"
24,VARIABLEDECLARATION,"this",,""
25,COMPOUNDSTATEMENT,"",prob24.java(13:31-17:6),"{
	double dist;
	dist = Math.sqrt(Math.pow((x-p2.x),2)+Math.pow((y-p2.y),2));
	return dist;
    }"
26,PARAMVARIABLEDECLARATION,"p2",prob24.java(13:22-13:30),"Ponto p2"
27,UNINITIALIZEDVALUE,"Uninitialized Value",,""
28,RETURNSTATEMENT,"",prob24.java(16:2-16:14),"return dist;"
29,DECLARATIONSTATEMENT,"",prob24.java(14:2-14:14),"double dist;"
30,BINARYOPERATOR,"=",prob24.java(15:2-15:62),"dist = Math.sqrt(Math.pow((x-p2.x),2)+Math.pow((y-p2.y),2));"
31,VARIABLEDECLARATION,"dist",prob24.java(14:9-14:13),"dist"
32,DECLAREDREFERENCEEXPRESSION,"dist",prob24.java(15:2-15:6),"dist"
33,STATICCALLEXPRESSION,"sqrt",prob24.java(15:9-15:61),"Math.sqrt(Math.pow((x-p2.x),2)+Math.pow((y-p2.y),2))"
34,DECLAREDREFERENCEEXPRESSION,"dist",prob24.java(16:9-16:13),"dist"
35,BINARYOPERATOR,"+",prob24.java(15:19-15:60),"Math.pow((x-p2.x),2)+Math.pow((y-p2.y),2)"
36,STATICCALLEXPRESSION,"pow",prob24.java(15:19-15:39),"Math.pow((x-p2.x),2)"
37,STATICCALLEXPRESSION,"pow",prob24.java(15:40-15:60),"Math.pow((y-p2.y),2)"
38,LITERAL,"",prob24.java(15:58-15:59),"2"
39,BINARYOPERATOR,"-",prob24.java(15:50-15:56),"y-p2.y"
40,MEMBEREXPRESSION,"y",prob24.java(15:50-15:51),"y"
41,MEMBEREXPRESSION,"y",prob24.java(15:52-15:56),"p2.y"
42,DECLAREDREFERENCEEXPRESSION,"p2",prob24.java(15:52-15:54),"p2"
43,DECLAREDREFERENCEEXPRESSION,"this",prob24.java(15:50-15:51),"this"
44,LITERAL,"",prob24.java(15:37-15:38),"2"
45,BINARYOPERATOR,"-",prob24.java(15:29-15:35),"x-p2.x"
46,MEMBEREXPRESSION,"x",prob24.java(15:29-15:30),"x"
47,MEMBEREXPRESSION,"x",prob24.java(15:31-15:35),"p2.x"
48,DECLAREDREFERENCEEXPRESSION,"this",prob24.java(15:29-15:30),"this"
49,DECLAREDREFERENCEEXPRESSION,"p2",prob24.java(15:31-15:33),"p2"
50,FIELDDECLARATION,"this",,""
51,FIELDDECLARATION,"array",prob24.java(21:5-21:26),"array"
52,FIELDDECLARATION,"matrix",prob24.java(22:5-22:30),"matrix"
53,FIELDDECLARATION,"dist",prob24.java(23:5-23:28),"dist"
54,FIELDDECLARATION,"n",prob24.java(24:5-24:18),"n"
55,FIELDDECLARATION,"visited",prob24.java(25:5-25:30),"visited"
56,METHODDECLARATION,"prim",prob24.java(27:5-56:6),"static void prim(int r){
	for(int i=1;i<=n;i++){
	    dist[r][i]=Double.MAX_VALUE-1;
	} 
	dist[r][r]=0;
	int vis=1;
	while(vis != n){
	    // extrair minimo
	    int u= -1;
	    double distmax = Double.MAX_VALUE;
	    for(int i=1; i<n+1; i++){
		if(!visited[i] && dist[r][i] < distmax){
		    distmax=dist[r][i];                 // escolher o elemento minimo u a visitar 
		    u=i;
		}
	    }
	    if(u==-1) break;
	    visited[u]=true;
	    vis++;
	    //fim extrair minimo
	    for(int i=1; i<n+1;i++){
		if( !visited[i] && matrix[u][i] < dist[r][i]){//se a distancia de r a i,
		    dist[r][i]=matrix[u][i];                   // for menor que a aresta de u a i, relaxar
		}

	    }
		
	}

    }"
57,METHODDECLARATION,"main",prob24.java(58:4-86:6),"public static void main(String args[]){
	double aux1=0.0;
	double aux2=0.0;
	double sum=0.0;
	
	Scanner s = new Scanner(System.in).useLocale(Locale.US);
	n=s.nextInt();
	array = new Ponto[2*n];//pontos
	matrix = new double[n+1][n+1]; //pesos
        dist = new double[n+1][n+1];
	visited = new boolean[n+1];
	s.nextLine();
	for(int i=1;i<n+1; i++){
	    aux1= s.nextDouble();
	    aux2= s.nextDouble();
	    array[i]=new Ponto(aux1, aux2);
	}

	for(int i=1; i<n+1;i++){
	    for(int j=1; j<n+1;j++){
		matrix[i][j] = array[i].distancia(array[j]);
	    }
	}
	prim(1);
	for(int i=1; i<n+1; i++){
	    sum += dist[1][i];
	}
	System.out.printf(""%.2f\n"",sum);
    }"
58,CONSTRUCTORDECLARATION,"prob24",,""
59,VARIABLEDECLARATION,"this",,""
60,COMPOUNDSTATEMENT,"",prob24.java(27:28-56:6),"{
	for(int i=1;i<=n;i++){
	    dist[r][i]=Double.MAX_VALUE-1;
	} 
	dist[r][r]=0;
	int vis=1;
	while(vis != n){
	    // extrair minimo
	    int u= -1;
	    double distmax = Double.MAX_VALUE;
	    for(int i=1; i<n+1; i++){
		if(!visited[i] && dist[r][i] < distmax){
		    distmax=dist[r][i];                 // escolher o elemento minimo u a visitar 
		    u=i;
		}
	    }
	    if(u==-1) break;
	    visited[u]=true;
	    vis++;
	    //fim extrair minimo
	    for(int i=1; i<n+1;i++){
		if( !visited[i] && matrix[u][i] < dist[r][i]){//se a distancia de r a i,
		    dist[r][i]=matrix[u][i];                   // for menor que a aresta de u a i, relaxar
		}

	    }
		
	}

    }"
61,PARAMVARIABLEDECLARATION,"r",prob24.java(27:22-27:27),"int r"
62,LITERAL,"",prob24.java(28:12-28:13),"1"
63,RETURNSTATEMENT,"",,""
64,FORSTATEMENT,"",prob24.java(28:2-30:3),"for(int i=1;i<=n;i++){
	    dist[r][i]=Double.MAX_VALUE-1;
	}"
65,BINARYOPERATOR,"=",prob24.java(31:2-31:15),"dist[r][r]=0;"
66,DECLARATIONSTATEMENT,"",prob24.java(32:2-32:12),"int vis=1;"
67,WHILESTATEMENT,"",prob24.java(33:2-54:3),"while(vis != n){
	    // extrair minimo
	    int u= -1;
	    double distmax = Double.MAX_VALUE;
	    for(int i=1; i<n+1; i++){
		if(!visited[i] && dist[r][i] < distmax){
		    distmax=dist[r][i];                 // escolher o elemento minimo u a visitar 
		    u=i;
		}
	    }
	    if(u==-1) break;
	    visited[u]=true;
	    vis++;
	    //fim extrair minimo
	    for(int i=1; i<n+1;i++){
		if( !visited[i] && matrix[u][i] < dist[r][i]){//se a distancia de r a i,
		    dist[r][i]=matrix[u][i];                   // for menor que a aresta de u a i, relaxar
		}

	    }
		
	}"
68,VARIABLEDECLARATION,"vis",prob24.java(32:6-32:11),"vis=1"
69,COMPOUNDSTATEMENT,"",prob24.java(28:23-30:3),"{
	    dist[r][i]=Double.MAX_VALUE-1;
	}"
70,DECLARATIONSTATEMENT,"",prob24.java(28:6-28:13),"int i=1"
71,BINARYOPERATOR,"<=",prob24.java(28:14-28:18),"i<=n"
72,UNARYOPERATOR,"++",prob24.java(28:19-28:22),"i++"
73,VARIABLEDECLARATION,"i",prob24.java(28:10-28:13),"i=1"
74,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(29:6-29:10),"prob24"
75,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(31:2-31:6),"prob24"
76,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(28:14-28:15),"i"
77,MEMBEREXPRESSION,"n",prob24.java(28:17-28:18),"n"
78,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(28:17-28:18),"prob24"
79,BINARYOPERATOR,"=",prob24.java(29:6-29:36),"dist[r][i]=Double.MAX_VALUE-1;"
80,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(28:19-28:20),"i"
81,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(29:6-29:16),"dist[r][i]"
82,BINARYOPERATOR,"-",prob24.java(29:17-29:35),"Double.MAX_VALUE-1"
83,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(29:6-29:13),"dist[r]"
84,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(29:14-29:15),"i"
85,DECLAREDREFERENCEEXPRESSION,"Double",prob24.java(29:17-29:23),"Double"
86,MEMBEREXPRESSION,"dist",prob24.java(29:6-29:10),"dist"
87,DECLAREDREFERENCEEXPRESSION,"r",prob24.java(29:11-29:12),"r"
88,MEMBEREXPRESSION,"MAX_VALUE",prob24.java(29:17-29:33),"Double.MAX_VALUE"
89,LITERAL,"",prob24.java(29:34-29:35),"1"
90,BREAKSTATEMENT,"",prob24.java(43:16-43:22),"break;"
91,BINARYOPERATOR,"!=",prob24.java(33:8-33:16),"vis != n"
92,COMPOUNDSTATEMENT,"",prob24.java(33:17-54:3),"{
	    // extrair minimo
	    int u= -1;
	    double distmax = Double.MAX_VALUE;
	    for(int i=1; i<n+1; i++){
		if(!visited[i] && dist[r][i] < distmax){
		    distmax=dist[r][i];                 // escolher o elemento minimo u a visitar 
		    u=i;
		}
	    }
	    if(u==-1) break;
	    visited[u]=true;
	    vis++;
	    //fim extrair minimo
	    for(int i=1; i<n+1;i++){
		if( !visited[i] && matrix[u][i] < dist[r][i]){//se a distancia de r a i,
		    dist[r][i]=matrix[u][i];                   // for menor que a aresta de u a i, relaxar
		}

	    }
		
	}"
93,LITERAL,"",prob24.java(35:14-35:15),"1"
94,DECLAREDREFERENCEEXPRESSION,"vis",prob24.java(33:8-33:11),"vis"
95,MEMBEREXPRESSION,"n",prob24.java(33:15-33:16),"n"
96,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(33:15-33:16),"prob24"
97,DECLARATIONSTATEMENT,"",prob24.java(35:6-35:16),"int u= -1;"
98,DECLARATIONSTATEMENT,"",prob24.java(36:6-36:40),"double distmax = Double.MAX_VALUE;"
99,FORSTATEMENT,"",prob24.java(37:6-42:7),"for(int i=1; i<n+1; i++){
		if(!visited[i] && dist[r][i] < distmax){
		    distmax=dist[r][i];                 // escolher o elemento minimo u a visitar 
		    u=i;
		}
	    }"
100,IFSTATEMENT,"",prob24.java(43:6-43:22),"if(u==-1) break;"
101,BINARYOPERATOR,"=",prob24.java(44:6-44:22),"visited[u]=true;"
102,UNARYOPERATOR,"++",prob24.java(45:6-45:12),"vis++;"
103,FORSTATEMENT,"",prob24.java(47:6-52:7),"for(int i=1; i<n+1;i++){
		if( !visited[i] && matrix[u][i] < dist[r][i]){//se a distancia de r a i,
		    dist[r][i]=matrix[u][i];                   // for menor que a aresta de u a i, relaxar
		}

	    }"
104,VARIABLEDECLARATION,"u",prob24.java(35:10-35:15),"u= -1"
105,VARIABLEDECLARATION,"distmax",prob24.java(36:13-36:39),"distmax = Double.MAX_VALUE"
106,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(44:6-44:16),"visited[u]"
107,LITERAL,"",prob24.java(44:17-44:21),"true"
108,DECLAREDREFERENCEEXPRESSION,"vis",prob24.java(45:6-45:9),"vis"
109,MEMBEREXPRESSION,"visited",prob24.java(44:6-44:13),"visited"
110,DECLAREDREFERENCEEXPRESSION,"u",prob24.java(44:14-44:15),"u"
111,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(44:6-44:13),"prob24"
112,COMPOUNDSTATEMENT,"",prob24.java(37:30-42:7),"{
		if(!visited[i] && dist[r][i] < distmax){
		    distmax=dist[r][i];                 // escolher o elemento minimo u a visitar 
		    u=i;
		}
	    }"
113,DECLARATIONSTATEMENT,"",prob24.java(37:10-37:17),"int i=1"
114,BINARYOPERATOR,"<",prob24.java(37:19-37:24),"i<n+1"
115,UNARYOPERATOR,"++",prob24.java(37:26-37:29),"i++"
116,VARIABLEDECLARATION,"i",prob24.java(37:14-37:17),"i=1"
117,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(38:7-38:14),"prob24"
118,DECLAREDREFERENCEEXPRESSION,"u",prob24.java(43:9-43:10),"u"
119,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(37:26-37:27),"i"
120,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(37:19-37:20),"i"
121,IFSTATEMENT,"",prob24.java(38:3-41:4),"if(!visited[i] && dist[r][i] < distmax){
		    distmax=dist[r][i];                 // escolher o elemento minimo u a visitar 
		    u=i;
		}"
122,COMPOUNDSTATEMENT,"",prob24.java(38:42-41:4),"{
		    distmax=dist[r][i];                 // escolher o elemento minimo u a visitar 
		    u=i;
		}"
123,BINARYOPERATOR,"&&",prob24.java(38:6-38:41),"!visited[i] && dist[r][i] < distmax"
124,DECLAREDREFERENCEEXPRESSION,"distmax",prob24.java(39:7-39:14),"distmax"
125,BINARYOPERATOR,"=",prob24.java(39:7-39:26),"distmax=dist[r][i];"
126,BINARYOPERATOR,"=",prob24.java(40:7-40:11),"u=i;"
127,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(39:15-39:25),"dist[r][i]"
128,DECLAREDREFERENCEEXPRESSION,"u",prob24.java(40:7-40:8),"u"
129,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(39:15-39:19),"prob24"
130,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(39:15-39:22),"dist[r]"
131,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(39:23-39:24),"i"
132,MEMBEREXPRESSION,"dist",prob24.java(39:15-39:19),"dist"
133,DECLAREDREFERENCEEXPRESSION,"r",prob24.java(39:20-39:21),"r"
134,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(40:9-40:10),"i"
135,UNARYOPERATOR,"!",prob24.java(38:6-38:17),"!visited[i]"
136,BINARYOPERATOR,"<",prob24.java(38:21-38:41),"dist[r][i] < distmax"
137,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(38:7-38:17),"visited[i]"
138,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(38:21-38:25),"prob24"
139,MEMBEREXPRESSION,"visited",prob24.java(38:7-38:14),"visited"
140,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(38:15-38:16),"i"
141,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(38:21-38:31),"dist[r][i]"
142,DECLAREDREFERENCEEXPRESSION,"distmax",prob24.java(38:34-38:41),"distmax"
143,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(38:21-38:28),"dist[r]"
144,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(38:29-38:30),"i"
145,MEMBEREXPRESSION,"dist",prob24.java(38:21-38:25),"dist"
146,DECLAREDREFERENCEEXPRESSION,"r",prob24.java(38:26-38:27),"r"
147,BINARYOPERATOR,"+",prob24.java(37:21-37:24),"n+1"
148,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(37:21-37:22),"prob24"
149,MEMBEREXPRESSION,"n",prob24.java(37:21-37:22),"n"
150,LITERAL,"",prob24.java(37:23-37:24),"1"
151,LITERAL,"",prob24.java(37:16-37:17),"1"
152,DECLAREDREFERENCEEXPRESSION,"Double",prob24.java(36:23-36:29),"Double"
153,LITERAL,"",prob24.java(47:16-47:17),"1"
154,BINARYOPERATOR,"==",prob24.java(43:9-43:14),"u==-1"
155,UNARYOPERATOR,"-",prob24.java(43:12-43:14),"-1"
156,LITERAL,"",prob24.java(43:13-43:14),"1"
157,COMPOUNDSTATEMENT,"",prob24.java(47:29-52:7),"{
		if( !visited[i] && matrix[u][i] < dist[r][i]){//se a distancia de r a i,
		    dist[r][i]=matrix[u][i];                   // for menor que a aresta de u a i, relaxar
		}

	    }"
158,DECLARATIONSTATEMENT,"",prob24.java(47:10-47:17),"int i=1"
159,BINARYOPERATOR,"<",prob24.java(47:19-47:24),"i<n+1"
160,UNARYOPERATOR,"++",prob24.java(47:25-47:28),"i++"
161,VARIABLEDECLARATION,"i",prob24.java(47:14-47:17),"i=1"
162,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(48:8-48:15),"prob24"
163,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(47:19-47:20),"i"
164,BINARYOPERATOR,"+",prob24.java(47:21-47:24),"n+1"
165,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(47:21-47:22),"prob24"
166,MEMBEREXPRESSION,"n",prob24.java(47:21-47:22),"n"
167,LITERAL,"",prob24.java(47:23-47:24),"1"
168,IFSTATEMENT,"",prob24.java(48:3-50:4),"if( !visited[i] && matrix[u][i] < dist[r][i]){//se a distancia de r a i,
		    dist[r][i]=matrix[u][i];                   // for menor que a aresta de u a i, relaxar
		}"
169,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(47:25-47:26),"i"
170,COMPOUNDSTATEMENT,"",prob24.java(48:48-50:4),"{//se a distancia de r a i,
		    dist[r][i]=matrix[u][i];                   // for menor que a aresta de u a i, relaxar
		}"
171,BINARYOPERATOR,"&&",prob24.java(48:7-48:47),"!visited[i] && matrix[u][i] < dist[r][i]"
172,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(49:7-49:11),"prob24"
173,UNARYOPERATOR,"!",prob24.java(48:7-48:18),"!visited[i]"
174,BINARYOPERATOR,"<",prob24.java(48:22-48:47),"matrix[u][i] < dist[r][i]"
175,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(48:8-48:18),"visited[i]"
176,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(48:22-48:28),"prob24"
177,MEMBEREXPRESSION,"visited",prob24.java(48:8-48:15),"visited"
178,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(48:16-48:17),"i"
179,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(48:22-48:34),"matrix[u][i]"
180,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(48:37-48:47),"dist[r][i]"
181,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(48:22-48:31),"matrix[u]"
182,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(48:32-48:33),"i"
183,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(48:37-48:41),"prob24"
184,MEMBEREXPRESSION,"matrix",prob24.java(48:22-48:28),"matrix"
185,DECLAREDREFERENCEEXPRESSION,"u",prob24.java(48:29-48:30),"u"
186,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(48:37-48:44),"dist[r]"
187,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(48:45-48:46),"i"
188,MEMBEREXPRESSION,"dist",prob24.java(48:37-48:41),"dist"
189,DECLAREDREFERENCEEXPRESSION,"r",prob24.java(48:42-48:43),"r"
190,BINARYOPERATOR,"=",prob24.java(49:7-49:31),"dist[r][i]=matrix[u][i];"
191,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(49:7-49:17),"dist[r][i]"
192,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(49:18-49:30),"matrix[u][i]"
193,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(49:7-49:14),"dist[r]"
194,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(49:15-49:16),"i"
195,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(49:18-49:24),"prob24"
196,MEMBEREXPRESSION,"dist",prob24.java(49:7-49:11),"dist"
197,DECLAREDREFERENCEEXPRESSION,"r",prob24.java(49:12-49:13),"r"
198,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(49:18-49:27),"matrix[u]"
199,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(49:28-49:29),"i"
200,MEMBEREXPRESSION,"matrix",prob24.java(49:18-49:24),"matrix"
201,DECLAREDREFERENCEEXPRESSION,"u",prob24.java(49:25-49:26),"u"
202,UNARYOPERATOR,"-",prob24.java(35:13-35:15),"-1"
203,MEMBEREXPRESSION,"MAX_VALUE",prob24.java(36:23-36:39),"Double.MAX_VALUE"
204,LITERAL,"",prob24.java(32:10-32:11),"1"
205,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(31:2-31:12),"dist[r][r]"
206,LITERAL,"",prob24.java(31:13-31:14),"0"
207,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(31:2-31:9),"dist[r]"
208,DECLAREDREFERENCEEXPRESSION,"r",prob24.java(31:10-31:11),"r"
209,MEMBEREXPRESSION,"dist",prob24.java(31:2-31:6),"dist"
210,DECLAREDREFERENCEEXPRESSION,"r",prob24.java(31:7-31:8),"r"
211,VARIABLEDECLARATION,"this",,""
212,COMPOUNDSTATEMENT,"",prob24.java(58:42-86:6),"{
	double aux1=0.0;
	double aux2=0.0;
	double sum=0.0;
	
	Scanner s = new Scanner(System.in).useLocale(Locale.US);
	n=s.nextInt();
	array = new Ponto[2*n];//pontos
	matrix = new double[n+1][n+1]; //pesos
        dist = new double[n+1][n+1];
	visited = new boolean[n+1];
	s.nextLine();
	for(int i=1;i<n+1; i++){
	    aux1= s.nextDouble();
	    aux2= s.nextDouble();
	    array[i]=new Ponto(aux1, aux2);
	}

	for(int i=1; i<n+1;i++){
	    for(int j=1; j<n+1;j++){
		matrix[i][j] = array[i].distancia(array[j]);
	    }
	}
	prim(1);
	for(int i=1; i<n+1; i++){
	    sum += dist[1][i];
	}
	System.out.printf(""%.2f\n"",sum);
    }"
213,PARAMVARIABLEDECLARATION,"args",prob24.java(58:28-58:41),"String args[]"
214,LITERAL,"",prob24.java(59:14-59:17),"0.0"
215,RETURNSTATEMENT,"",,""
216,DECLARATIONSTATEMENT,"",prob24.java(59:2-59:18),"double aux1=0.0;"
217,DECLARATIONSTATEMENT,"",prob24.java(60:2-60:18),"double aux2=0.0;"
218,DECLARATIONSTATEMENT,"",prob24.java(61:2-61:17),"double sum=0.0;"
219,DECLARATIONSTATEMENT,"",prob24.java(63:2-63:58),"Scanner s = new Scanner(System.in).useLocale(Locale.US);"
220,BINARYOPERATOR,"=",prob24.java(64:2-64:16),"n=s.nextInt();"
221,BINARYOPERATOR,"=",prob24.java(65:2-65:25),"array = new Ponto[2*n];"
222,BINARYOPERATOR,"=",prob24.java(66:2-66:32),"matrix = new double[n+1][n+1];"
223,BINARYOPERATOR,"=",prob24.java(67:9-67:37),"dist = new double[n+1][n+1];"
224,BINARYOPERATOR,"=",prob24.java(68:2-68:29),"visited = new boolean[n+1];"
225,MEMBERCALLEXPRESSION,"nextLine",prob24.java(69:2-69:15),"s.nextLine();"
226,FORSTATEMENT,"",prob24.java(70:2-74:3),"for(int i=1;i<n+1; i++){
	    aux1= s.nextDouble();
	    aux2= s.nextDouble();
	    array[i]=new Ponto(aux1, aux2);
	}"
227,FORSTATEMENT,"",prob24.java(76:2-80:3),"for(int i=1; i<n+1;i++){
	    for(int j=1; j<n+1;j++){
		matrix[i][j] = array[i].distancia(array[j]);
	    }
	}"
228,CALLEXPRESSION,"prim",prob24.java(81:2-81:10),"prim(1);"
229,FORSTATEMENT,"",prob24.java(82:2-84:3),"for(int i=1; i<n+1; i++){
	    sum += dist[1][i];
	}"
230,MEMBERCALLEXPRESSION,"printf",prob24.java(85:2-85:34),"System.out.printf(""%.2f\n"",sum);"
231,VARIABLEDECLARATION,"aux1",prob24.java(59:9-59:17),"aux1=0.0"
232,VARIABLEDECLARATION,"aux2",prob24.java(60:9-60:17),"aux2=0.0"
233,VARIABLEDECLARATION,"sum",prob24.java(61:9-61:16),"sum=0.0"
234,VARIABLEDECLARATION,"s",prob24.java(63:10-63:57),"s = new Scanner(System.in).useLocale(Locale.US)"
235,MEMBERCALLEXPRESSION,"useLocale",prob24.java(63:14-63:57),"new Scanner(System.in).useLocale(Locale.US)"
236,DECLAREDREFERENCEEXPRESSION,"useLocale",prob24.java(63:37-63:46),"useLocale"
237,MEMBEREXPRESSION,"US",prob24.java(63:47-63:56),"Locale.US"
238,DECLAREDREFERENCEEXPRESSION,"Locale",prob24.java(63:47-63:53),"Locale"
239,NEWEXPRESSION,"",prob24.java(63:14-63:36),"new Scanner(System.in)"
240,CONSTRUCTEXPRESSION,"",prob24.java(63:14-63:36),"new Scanner(System.in)"
241,MEMBEREXPRESSION,"in",prob24.java(63:26-63:35),"System.in"
242,DECLAREDREFERENCEEXPRESSION,"System",prob24.java(63:26-63:32),"System"
243,MEMBEREXPRESSION,"visited",prob24.java(68:2-68:9),"visited"
244,ARRAYCREATIONEXPRESSION,"",prob24.java(68:12-68:28),"new boolean[n+1]"
245,DECLAREDREFERENCEEXPRESSION,"s",prob24.java(69:2-69:3),"s"
246,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(68:2-68:9),"prob24"
247,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(68:24-68:25),"prob24"
248,BINARYOPERATOR,"+",prob24.java(68:24-68:27),"n+1"
249,MEMBEREXPRESSION,"n",prob24.java(68:24-68:25),"n"
250,LITERAL,"",prob24.java(68:26-68:27),"1"
251,MEMBEREXPRESSION,"array",prob24.java(65:2-65:7),"array"
252,ARRAYCREATIONEXPRESSION,"",prob24.java(65:10-65:24),"new Ponto[2*n]"
253,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(66:2-66:8),"prob24"
254,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(65:2-65:7),"prob24"
255,LITERAL,"",prob24.java(65:20-65:21),"2"
256,BINARYOPERATOR,"*",prob24.java(65:20-65:23),"2*n"
257,MEMBEREXPRESSION,"n",prob24.java(65:22-65:23),"n"
258,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(65:22-65:23),"prob24"
259,COMPOUNDSTATEMENT,"",prob24.java(76:25-80:3),"{
	    for(int j=1; j<n+1;j++){
		matrix[i][j] = array[i].distancia(array[j]);
	    }
	}"
260,DECLARATIONSTATEMENT,"",prob24.java(76:6-76:13),"int i=1"
261,BINARYOPERATOR,"<",prob24.java(76:15-76:20),"i<n+1"
262,UNARYOPERATOR,"++",prob24.java(76:21-76:24),"i++"
263,VARIABLEDECLARATION,"i",prob24.java(76:10-76:13),"i=1"
264,LITERAL,"",prob24.java(77:16-77:17),"1"
265,LITERAL,"",prob24.java(81:7-81:8),"1"
266,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(76:21-76:22),"i"
267,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(76:15-76:16),"i"
268,FORSTATEMENT,"",prob24.java(77:6-79:7),"for(int j=1; j<n+1;j++){
		matrix[i][j] = array[i].distancia(array[j]);
	    }"
269,COMPOUNDSTATEMENT,"",prob24.java(77:29-79:7),"{
		matrix[i][j] = array[i].distancia(array[j]);
	    }"
270,DECLARATIONSTATEMENT,"",prob24.java(77:10-77:17),"int j=1"
271,BINARYOPERATOR,"<",prob24.java(77:19-77:24),"j<n+1"
272,UNARYOPERATOR,"++",prob24.java(77:25-77:28),"j++"
273,VARIABLEDECLARATION,"j",prob24.java(77:14-77:17),"j=1"
274,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(78:3-78:9),"prob24"
275,DECLAREDREFERENCEEXPRESSION,"j",prob24.java(77:19-77:20),"j"
276,BINARYOPERATOR,"=",prob24.java(78:3-78:47),"matrix[i][j] = array[i].distancia(array[j]);"
277,DECLAREDREFERENCEEXPRESSION,"j",prob24.java(77:25-77:26),"j"
278,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(78:3-78:15),"matrix[i][j]"
279,MEMBERCALLEXPRESSION,"distancia",prob24.java(78:18-78:46),"array[i].distancia(array[j])"
280,DECLAREDREFERENCEEXPRESSION,"distancia",prob24.java(78:27-78:36),"distancia"
281,METHODDECLARATION,"distancia",,""
282,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(78:37-78:45),"array[j]"
283,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(78:18-78:26),"array[i]"
284,MEMBEREXPRESSION,"array",prob24.java(78:18-78:23),"array"
285,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(78:24-78:25),"i"
286,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(78:37-78:42),"prob24"
287,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(78:18-78:23),"prob24"
288,MEMBEREXPRESSION,"array",prob24.java(78:37-78:42),"array"
289,DECLAREDREFERENCEEXPRESSION,"j",prob24.java(78:43-78:44),"j"
290,PARAMVARIABLEDECLARATION,"ponto0",,""
291,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(78:3-78:12),"matrix[i]"
292,DECLAREDREFERENCEEXPRESSION,"j",prob24.java(78:13-78:14),"j"
293,MEMBEREXPRESSION,"matrix",prob24.java(78:3-78:9),"matrix"
294,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(78:10-78:11),"i"
295,BINARYOPERATOR,"+",prob24.java(77:21-77:24),"n+1"
296,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(77:21-77:22),"prob24"
297,MEMBEREXPRESSION,"n",prob24.java(77:21-77:22),"n"
298,LITERAL,"",prob24.java(77:23-77:24),"1"
299,BINARYOPERATOR,"+",prob24.java(76:17-76:20),"n+1"
300,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(76:17-76:18),"prob24"
301,MEMBEREXPRESSION,"n",prob24.java(76:17-76:18),"n"
302,LITERAL,"",prob24.java(76:19-76:20),"1"
303,LITERAL,"",prob24.java(76:12-76:13),"1"
304,MEMBEREXPRESSION,"matrix",prob24.java(66:2-66:8),"matrix"
305,ARRAYCREATIONEXPRESSION,"",prob24.java(66:11-66:31),"new double[n+1][n+1]"
306,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(67:9-67:13),"prob24"
307,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(66:22-66:23),"prob24"
308,BINARYOPERATOR,"+",prob24.java(66:22-66:25),"n+1"
309,BINARYOPERATOR,"+",prob24.java(66:27-66:30),"n+1"
310,MEMBEREXPRESSION,"n",prob24.java(66:22-66:23),"n"
311,LITERAL,"",prob24.java(66:24-66:25),"1"
312,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(66:27-66:28),"prob24"
313,MEMBEREXPRESSION,"n",prob24.java(66:27-66:28),"n"
314,LITERAL,"",prob24.java(66:29-66:30),"1"
315,METHODDECLARATION,"prim",,""
316,LITERAL,"",prob24.java(82:12-82:13),"1"
317,PARAMVARIABLEDECLARATION,"int0",,""
318,DECLAREDREFERENCEEXPRESSION,"printf",prob24.java(85:13-85:19),"printf"
319,DECLAREDREFERENCEEXPRESSION,"sum",prob24.java(85:29-85:32),"sum"
320,LITERAL,"",prob24.java(85:20-85:28),"""%.2f\n"""
321,MEMBEREXPRESSION,"out",prob24.java(85:2-85:12),"System.out"
322,DECLAREDREFERENCEEXPRESSION,"System",prob24.java(85:2-85:8),"System"
323,LITERAL,"",prob24.java(60:14-60:17),"0.0"
324,COMPOUNDSTATEMENT,"",prob24.java(70:25-74:3),"{
	    aux1= s.nextDouble();
	    aux2= s.nextDouble();
	    array[i]=new Ponto(aux1, aux2);
	}"
325,DECLARATIONSTATEMENT,"",prob24.java(70:6-70:13),"int i=1"
326,BINARYOPERATOR,"<",prob24.java(70:14-70:19),"i<n+1"
327,UNARYOPERATOR,"++",prob24.java(70:21-70:24),"i++"
328,VARIABLEDECLARATION,"i",prob24.java(70:10-70:13),"i=1"
329,DECLAREDREFERENCEEXPRESSION,"aux1",prob24.java(71:6-71:10),"aux1"
330,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(70:14-70:15),"i"
331,BINARYOPERATOR,"+",prob24.java(70:16-70:19),"n+1"
332,MEMBEREXPRESSION,"n",prob24.java(70:16-70:17),"n"
333,LITERAL,"",prob24.java(70:18-70:19),"1"
334,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(70:16-70:17),"prob24"
335,BINARYOPERATOR,"=",prob24.java(71:6-71:27),"aux1= s.nextDouble();"
336,BINARYOPERATOR,"=",prob24.java(72:6-72:27),"aux2= s.nextDouble();"
337,BINARYOPERATOR,"=",prob24.java(73:6-73:37),"array[i]=new Ponto(aux1, aux2);"
338,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(70:21-70:22),"i"
339,DECLAREDREFERENCEEXPRESSION,"aux2",prob24.java(72:6-72:10),"aux2"
340,MEMBERCALLEXPRESSION,"nextDouble",prob24.java(72:12-72:26),"s.nextDouble()"
341,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(73:6-73:11),"prob24"
342,DECLAREDREFERENCEEXPRESSION,"nextDouble",prob24.java(72:14-72:24),"nextDouble"
343,DECLAREDREFERENCEEXPRESSION,"s",prob24.java(72:12-72:13),"s"
344,MEMBERCALLEXPRESSION,"nextDouble",prob24.java(71:12-71:26),"s.nextDouble()"
345,DECLAREDREFERENCEEXPRESSION,"nextDouble",prob24.java(71:14-71:24),"nextDouble"
346,DECLAREDREFERENCEEXPRESSION,"s",prob24.java(71:12-71:13),"s"
347,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(73:6-73:14),"array[i]"
348,NEWEXPRESSION,"",prob24.java(73:15-73:36),"new Ponto(aux1, aux2)"
349,CONSTRUCTEXPRESSION,"",prob24.java(73:15-73:36),"new Ponto(aux1, aux2)"
350,CONSTRUCTORDECLARATION,"Ponto",,""
351,DECLAREDREFERENCEEXPRESSION,"aux2",prob24.java(73:31-73:35),"aux2"
352,DECLAREDREFERENCEEXPRESSION,"aux1",prob24.java(73:25-73:29),"aux1"
353,PARAMVARIABLEDECLARATION,"double0",,""
354,PARAMVARIABLEDECLARATION,"double1",,""
355,MEMBEREXPRESSION,"array",prob24.java(73:6-73:11),"array"
356,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(73:12-73:13),"i"
357,LITERAL,"",prob24.java(70:12-70:13),"1"
358,LITERAL,"",prob24.java(61:13-61:16),"0.0"
359,MEMBEREXPRESSION,"dist",prob24.java(67:9-67:13),"dist"
360,ARRAYCREATIONEXPRESSION,"",prob24.java(67:16-67:36),"new double[n+1][n+1]"
361,BINARYOPERATOR,"+",prob24.java(67:27-67:30),"n+1"
362,BINARYOPERATOR,"+",prob24.java(67:32-67:35),"n+1"
363,MEMBEREXPRESSION,"n",prob24.java(67:27-67:28),"n"
364,LITERAL,"",prob24.java(67:29-67:30),"1"
365,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(67:32-67:33),"prob24"
366,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(67:27-67:28),"prob24"
367,MEMBEREXPRESSION,"n",prob24.java(67:32-67:33),"n"
368,LITERAL,"",prob24.java(67:34-67:35),"1"
369,DECLAREDREFERENCEEXPRESSION,"nextLine",prob24.java(69:4-69:12),"nextLine"
370,COMPOUNDSTATEMENT,"",prob24.java(82:26-84:3),"{
	    sum += dist[1][i];
	}"
371,DECLARATIONSTATEMENT,"",prob24.java(82:6-82:13),"int i=1"
372,BINARYOPERATOR,"<",prob24.java(82:15-82:20),"i<n+1"
373,UNARYOPERATOR,"++",prob24.java(82:22-82:25),"i++"
374,VARIABLEDECLARATION,"i",prob24.java(82:10-82:13),"i=1"
375,DECLAREDREFERENCEEXPRESSION,"sum",prob24.java(83:6-83:9),"sum"
376,BINARYOPERATOR,"+=",prob24.java(83:6-83:24),"sum += dist[1][i];"
377,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(82:22-82:23),"i"
378,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(83:13-83:23),"dist[1][i]"
379,ARRAYSUBSCRIPTIONEXPRESSION,"",prob24.java(83:13-83:20),"dist[1]"
380,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(83:21-83:22),"i"
381,MEMBEREXPRESSION,"dist",prob24.java(83:13-83:17),"dist"
382,LITERAL,"",prob24.java(83:18-83:19),"1"
383,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(83:13-83:17),"prob24"
384,DECLAREDREFERENCEEXPRESSION,"i",prob24.java(82:15-82:16),"i"
385,BINARYOPERATOR,"+",prob24.java(82:17-82:20),"n+1"
386,MEMBEREXPRESSION,"n",prob24.java(82:17-82:18),"n"
387,LITERAL,"",prob24.java(82:19-82:20),"1"
388,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(82:17-82:18),"prob24"
389,DECLAREDREFERENCEEXPRESSION,"prob24",prob24.java(64:2-64:3),"prob24"
390,MEMBEREXPRESSION,"n",prob24.java(64:2-64:3),"n"
391,MEMBERCALLEXPRESSION,"nextInt",prob24.java(64:4-64:15),"s.nextInt()"
392,DECLAREDREFERENCEEXPRESSION,"s",prob24.java(64:4-64:5),"s"
393,DECLAREDREFERENCEEXPRESSION,"nextInt",prob24.java(64:6-64:13),"nextInt"

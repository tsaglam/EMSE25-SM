id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/06722795_21_201108932/Prob21.java",,""
2,RECORDDECLARATION,"Point",Prob21.java(5:1-12:2),"class Point {
	double x, y;

	Point(double x, double y) {
		this.x = x;
		this.y = y;
	}
}"
3,RECORDDECLARATION,"Edge",Prob21.java(14:1-37:2),"class Edge implements Comparable<Edge> {
	double x1, y1, x2, y2;
	int node1, node2;

	Edge(int node1, int node2, double x1, double y1, double x2, double y2) {
		this.node1 = node1;
		this.node2 = node2;
		this.x1 = x1;
		this.y1 = y1;
		this.x2 = x2;
		this.y2 = y2;
	}

	public double getDistance() {
		return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	}

	public int compareTo(Edge e) {
		if (getDistance() < e.getDistance())
			return -1;

		return 1;
	}
}"
4,RECORDDECLARATION,"Prob21",Prob21.java(39:1-90:2),"public class Prob21 {

	public static void main(String[] args) {
		Scanner stdin = new Scanner(System.in);

		int n = stdin.nextInt();
		Point[] p = new Point[n];
		String s = stdin.nextLine();

		for (int i = 0; i < n; i++) {
			String[] line = stdin.nextLine().split("" "");
			double a = Double.parseDouble(line[0]);
			double b = Double.parseDouble(line[1]);
			p[i] = new Point(a, b);
		}

		PriorityQueue<Edge> pq = new PriorityQueue<Edge>();
		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				Edge edge = new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y);
				pq.add(edge);
			}
		}

		boolean[] added = new boolean[n];
		double total = 0;// quantidade de tinta a gastar

		Edge temp = pq.remove();
		added[temp.node1] = true;
		added[temp.node2] = true;
		total += temp.getDistance();

		boolean found = false;
		ArrayList<Edge> tempList = new ArrayList<Edge>();

		while (!pq.isEmpty() && !found) {

			Edge temp2 = pq.remove();

			if ((added[temp2.node1] && !added[temp2.node2]) || (!added[temp2.node1] && added[temp2.node2])) {
				added[temp2.node1] = true;
				added[temp2.node2] = true;
				total += temp2.getDistance();
				pq.addAll(tempList);
				tempList.clear();
			} else if (!added[temp2.node1] && !added[temp2.node2])
				tempList.add(temp2);

		}
		System.out.printf(""%.2f\n"", total);
	}
}"
5,INCLUDEDECLARATION,"java.util.ArrayList",,""
6,INCLUDEDECLARATION,"java.util.PriorityQueue",,""
7,INCLUDEDECLARATION,"java.util.Scanner",,""
8,FIELDDECLARATION,"this",,""
9,FIELDDECLARATION,"x1",Prob21.java(15:2-15:24),"x1"
10,FIELDDECLARATION,"node1",Prob21.java(16:2-16:19),"node1"
11,METHODDECLARATION,"getDistance",Prob21.java(27:2-29:3),"public double getDistance() {
		return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	}"
12,METHODDECLARATION,"compareTo",Prob21.java(31:2-36:3),"public int compareTo(Edge e) {
		if (getDistance() < e.getDistance())
			return -1;

		return 1;
	}"
13,CONSTRUCTORDECLARATION,"Edge",Prob21.java(18:2-25:3),"Edge(int node1, int node2, double x1, double y1, double x2, double y2) {
		this.node1 = node1;
		this.node2 = node2;
		this.x1 = x1;
		this.y1 = y1;
		this.x2 = x2;
		this.y2 = y2;
	}"
14,VARIABLEDECLARATION,"this",,""
15,COMPOUNDSTATEMENT,"",Prob21.java(31:31-36:3),"{
		if (getDistance() < e.getDistance())
			return -1;

		return 1;
	}"
16,PARAMVARIABLEDECLARATION,"e",Prob21.java(31:23-31:29),"Edge e"
17,CALLEXPRESSION,"getDistance",Prob21.java(32:7-32:20),"getDistance()"
18,RETURNSTATEMENT,"",Prob21.java(35:3-35:12),"return 1;"
19,IFSTATEMENT,"",Prob21.java(32:3-33:14),"if (getDistance() < e.getDistance())
			return -1;"
20,BINARYOPERATOR,"<",Prob21.java(32:7-32:38),"getDistance() < e.getDistance()"
21,RETURNSTATEMENT,"",Prob21.java(33:4-33:14),"return -1;"
22,LITERAL,"",Prob21.java(33:12-33:13),"1"
23,LITERAL,"",Prob21.java(35:10-35:11),"1"
24,UNARYOPERATOR,"-",Prob21.java(33:11-33:13),"-1"
25,MEMBERCALLEXPRESSION,"getDistance",Prob21.java(32:23-32:38),"e.getDistance()"
26,DECLAREDREFERENCEEXPRESSION,"getDistance",Prob21.java(32:25-32:36),"getDistance"
27,METHODDECLARATION,"getDistance",,""
28,DECLAREDREFERENCEEXPRESSION,"e",Prob21.java(32:23-32:24),"e"
29,VARIABLEDECLARATION,"this",,""
30,COMPOUNDSTATEMENT,"",Prob21.java(27:30-29:3),"{
		return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	}"
31,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(28:21-28:23),"this"
32,RETURNSTATEMENT,"",Prob21.java(28:3-28:67),"return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));"
33,STATICCALLEXPRESSION,"sqrt",Prob21.java(28:10-28:66),"Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))"
34,BINARYOPERATOR,"+",Prob21.java(28:20-28:65),"(x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)"
35,BINARYOPERATOR,"*",Prob21.java(28:20-28:41),"(x2 - x1) * (x2 - x1)"
36,BINARYOPERATOR,"*",Prob21.java(28:44-28:65),"(y2 - y1) * (y2 - y1)"
37,BINARYOPERATOR,"-",Prob21.java(28:45-28:52),"y2 - y1"
38,BINARYOPERATOR,"-",Prob21.java(28:57-28:64),"y2 - y1"
39,MEMBEREXPRESSION,"y2",Prob21.java(28:57-28:59),"y2"
40,MEMBEREXPRESSION,"y1",Prob21.java(28:62-28:64),"y1"
41,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(28:62-28:64),"this"
42,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(28:57-28:59),"this"
43,MEMBEREXPRESSION,"y2",Prob21.java(28:45-28:47),"y2"
44,MEMBEREXPRESSION,"y1",Prob21.java(28:50-28:52),"y1"
45,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(28:45-28:47),"this"
46,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(28:50-28:52),"this"
47,BINARYOPERATOR,"-",Prob21.java(28:21-28:28),"x2 - x1"
48,BINARYOPERATOR,"-",Prob21.java(28:33-28:40),"x2 - x1"
49,MEMBEREXPRESSION,"x2",Prob21.java(28:33-28:35),"x2"
50,MEMBEREXPRESSION,"x1",Prob21.java(28:38-28:40),"x1"
51,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(28:33-28:35),"this"
52,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(28:38-28:40),"this"
53,MEMBEREXPRESSION,"x2",Prob21.java(28:21-28:23),"x2"
54,MEMBEREXPRESSION,"x1",Prob21.java(28:26-28:28),"x1"
55,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(28:26-28:28),"this"
56,COMPOUNDSTATEMENT,"",Prob21.java(18:73-25:3),"{
		this.node1 = node1;
		this.node2 = node2;
		this.x1 = x1;
		this.y1 = y1;
		this.x2 = x2;
		this.y2 = y2;
	}"
57,PARAMVARIABLEDECLARATION,"node1",Prob21.java(18:7-18:16),"int node1"
58,PARAMVARIABLEDECLARATION,"node2",Prob21.java(18:18-18:27),"int node2"
59,PARAMVARIABLEDECLARATION,"x1",Prob21.java(18:29-18:38),"double x1"
60,PARAMVARIABLEDECLARATION,"y1",Prob21.java(18:40-18:49),"double y1"
61,PARAMVARIABLEDECLARATION,"x2",Prob21.java(18:51-18:60),"double x2"
62,PARAMVARIABLEDECLARATION,"y2",Prob21.java(18:62-18:71),"double y2"
63,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(19:3-19:7),"this"
64,RETURNSTATEMENT,"",,""
65,BINARYOPERATOR,"=",Prob21.java(19:3-19:22),"this.node1 = node1;"
66,BINARYOPERATOR,"=",Prob21.java(20:3-20:22),"this.node2 = node2;"
67,BINARYOPERATOR,"=",Prob21.java(21:3-21:16),"this.x1 = x1;"
68,BINARYOPERATOR,"=",Prob21.java(22:3-22:16),"this.y1 = y1;"
69,BINARYOPERATOR,"=",Prob21.java(23:3-23:16),"this.x2 = x2;"
70,BINARYOPERATOR,"=",Prob21.java(24:3-24:16),"this.y2 = y2;"
71,MEMBEREXPRESSION,"y1",Prob21.java(22:3-22:10),"this.y1"
72,DECLAREDREFERENCEEXPRESSION,"y1",Prob21.java(22:13-22:15),"y1"
73,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(23:3-23:7),"this"
74,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(22:3-22:7),"this"
75,MEMBEREXPRESSION,"x2",Prob21.java(23:3-23:10),"this.x2"
76,DECLAREDREFERENCEEXPRESSION,"x2",Prob21.java(23:13-23:15),"x2"
77,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(24:3-24:7),"this"
78,MEMBEREXPRESSION,"node2",Prob21.java(20:3-20:13),"this.node2"
79,DECLAREDREFERENCEEXPRESSION,"node2",Prob21.java(20:16-20:21),"node2"
80,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(21:3-21:7),"this"
81,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(20:3-20:7),"this"
82,MEMBEREXPRESSION,"y2",Prob21.java(24:3-24:10),"this.y2"
83,DECLAREDREFERENCEEXPRESSION,"y2",Prob21.java(24:13-24:15),"y2"
84,MEMBEREXPRESSION,"node1",Prob21.java(19:3-19:13),"this.node1"
85,DECLAREDREFERENCEEXPRESSION,"node1",Prob21.java(19:16-19:21),"node1"
86,MEMBEREXPRESSION,"x1",Prob21.java(21:3-21:10),"this.x1"
87,DECLAREDREFERENCEEXPRESSION,"x1",Prob21.java(21:13-21:15),"x1"
88,FIELDDECLARATION,"this",,""
89,METHODDECLARATION,"main",Prob21.java(41:2-89:3),"public static void main(String[] args) {
		Scanner stdin = new Scanner(System.in);

		int n = stdin.nextInt();
		Point[] p = new Point[n];
		String s = stdin.nextLine();

		for (int i = 0; i < n; i++) {
			String[] line = stdin.nextLine().split("" "");
			double a = Double.parseDouble(line[0]);
			double b = Double.parseDouble(line[1]);
			p[i] = new Point(a, b);
		}

		PriorityQueue<Edge> pq = new PriorityQueue<Edge>();
		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				Edge edge = new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y);
				pq.add(edge);
			}
		}

		boolean[] added = new boolean[n];
		double total = 0;// quantidade de tinta a gastar

		Edge temp = pq.remove();
		added[temp.node1] = true;
		added[temp.node2] = true;
		total += temp.getDistance();

		boolean found = false;
		ArrayList<Edge> tempList = new ArrayList<Edge>();

		while (!pq.isEmpty() && !found) {

			Edge temp2 = pq.remove();

			if ((added[temp2.node1] && !added[temp2.node2]) || (!added[temp2.node1] && added[temp2.node2])) {
				added[temp2.node1] = true;
				added[temp2.node2] = true;
				total += temp2.getDistance();
				pq.addAll(tempList);
				tempList.clear();
			} else if (!added[temp2.node1] && !added[temp2.node2])
				tempList.add(temp2);

		}
		System.out.printf(""%.2f\n"", total);
	}"
90,CONSTRUCTORDECLARATION,"Prob21",,""
91,VARIABLEDECLARATION,"this",,""
92,COMPOUNDSTATEMENT,"",Prob21.java(41:41-89:3),"{
		Scanner stdin = new Scanner(System.in);

		int n = stdin.nextInt();
		Point[] p = new Point[n];
		String s = stdin.nextLine();

		for (int i = 0; i < n; i++) {
			String[] line = stdin.nextLine().split("" "");
			double a = Double.parseDouble(line[0]);
			double b = Double.parseDouble(line[1]);
			p[i] = new Point(a, b);
		}

		PriorityQueue<Edge> pq = new PriorityQueue<Edge>();
		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				Edge edge = new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y);
				pq.add(edge);
			}
		}

		boolean[] added = new boolean[n];
		double total = 0;// quantidade de tinta a gastar

		Edge temp = pq.remove();
		added[temp.node1] = true;
		added[temp.node2] = true;
		total += temp.getDistance();

		boolean found = false;
		ArrayList<Edge> tempList = new ArrayList<Edge>();

		while (!pq.isEmpty() && !found) {

			Edge temp2 = pq.remove();

			if ((added[temp2.node1] && !added[temp2.node2]) || (!added[temp2.node1] && added[temp2.node2])) {
				added[temp2.node1] = true;
				added[temp2.node2] = true;
				total += temp2.getDistance();
				pq.addAll(tempList);
				tempList.clear();
			} else if (!added[temp2.node1] && !added[temp2.node2])
				tempList.add(temp2);

		}
		System.out.printf(""%.2f\n"", total);
	}"
93,PARAMVARIABLEDECLARATION,"args",Prob21.java(41:26-41:39),"String[] args"
94,DECLAREDREFERENCEEXPRESSION,"System",Prob21.java(42:31-42:37),"System"
95,RETURNSTATEMENT,"",,""
96,DECLARATIONSTATEMENT,"",Prob21.java(42:3-42:42),"Scanner stdin = new Scanner(System.in);"
97,DECLARATIONSTATEMENT,"",Prob21.java(44:3-44:27),"int n = stdin.nextInt();"
98,DECLARATIONSTATEMENT,"",Prob21.java(45:3-45:28),"Point[] p = new Point[n];"
99,DECLARATIONSTATEMENT,"",Prob21.java(46:3-46:31),"String s = stdin.nextLine();"
100,FORSTATEMENT,"",Prob21.java(48:3-53:4),"for (int i = 0; i < n; i++) {
			String[] line = stdin.nextLine().split("" "");
			double a = Double.parseDouble(line[0]);
			double b = Double.parseDouble(line[1]);
			p[i] = new Point(a, b);
		}"
101,DECLARATIONSTATEMENT,"",Prob21.java(55:3-55:54),"PriorityQueue<Edge> pq = new PriorityQueue<Edge>();"
102,FORSTATEMENT,"",Prob21.java(56:3-61:4),"for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				Edge edge = new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y);
				pq.add(edge);
			}
		}"
103,DECLARATIONSTATEMENT,"",Prob21.java(63:3-63:36),"boolean[] added = new boolean[n];"
104,DECLARATIONSTATEMENT,"",Prob21.java(64:3-64:20),"double total = 0;"
105,DECLARATIONSTATEMENT,"",Prob21.java(66:3-66:27),"Edge temp = pq.remove();"
106,BINARYOPERATOR,"=",Prob21.java(67:3-67:28),"added[temp.node1] = true;"
107,BINARYOPERATOR,"=",Prob21.java(68:3-68:28),"added[temp.node2] = true;"
108,BINARYOPERATOR,"+=",Prob21.java(69:3-69:31),"total += temp.getDistance();"
109,DECLARATIONSTATEMENT,"",Prob21.java(71:3-71:25),"boolean found = false;"
110,DECLARATIONSTATEMENT,"",Prob21.java(72:3-72:52),"ArrayList<Edge> tempList = new ArrayList<Edge>();"
111,WHILESTATEMENT,"",Prob21.java(74:3-87:4),"while (!pq.isEmpty() && !found) {

			Edge temp2 = pq.remove();

			if ((added[temp2.node1] && !added[temp2.node2]) || (!added[temp2.node1] && added[temp2.node2])) {
				added[temp2.node1] = true;
				added[temp2.node2] = true;
				total += temp2.getDistance();
				pq.addAll(tempList);
				tempList.clear();
			} else if (!added[temp2.node1] && !added[temp2.node2])
				tempList.add(temp2);

		}"
112,MEMBERCALLEXPRESSION,"printf",Prob21.java(88:3-88:38),"System.out.printf(""%.2f\n"", total);"
113,VARIABLEDECLARATION,"stdin",Prob21.java(42:11-42:41),"stdin = new Scanner(System.in)"
114,VARIABLEDECLARATION,"n",Prob21.java(44:7-44:26),"n = stdin.nextInt()"
115,VARIABLEDECLARATION,"p",Prob21.java(45:11-45:27),"p = new Point[n]"
116,VARIABLEDECLARATION,"s",Prob21.java(46:10-46:30),"s = stdin.nextLine()"
117,VARIABLEDECLARATION,"pq",Prob21.java(55:23-55:53),"pq = new PriorityQueue<Edge>()"
118,VARIABLEDECLARATION,"added",Prob21.java(63:13-63:35),"added = new boolean[n]"
119,VARIABLEDECLARATION,"total",Prob21.java(64:10-64:19),"total = 0"
120,VARIABLEDECLARATION,"temp",Prob21.java(66:8-66:26),"temp = pq.remove()"
121,VARIABLEDECLARATION,"found",Prob21.java(71:11-71:24),"found = false"
122,VARIABLEDECLARATION,"tempList",Prob21.java(72:19-72:51),"tempList = new ArrayList<Edge>()"
123,DECLAREDREFERENCEEXPRESSION,"total",Prob21.java(69:3-69:8),"total"
124,MEMBERCALLEXPRESSION,"getDistance",Prob21.java(69:12-69:30),"temp.getDistance()"
125,LITERAL,"",Prob21.java(71:19-71:24),"false"
126,DECLAREDREFERENCEEXPRESSION,"getDistance",Prob21.java(69:17-69:28),"getDistance"
127,DECLAREDREFERENCEEXPRESSION,"temp",Prob21.java(69:12-69:16),"temp"
128,BINARYOPERATOR,"&&",Prob21.java(74:10-74:33),"!pq.isEmpty() && !found"
129,COMPOUNDSTATEMENT,"",Prob21.java(74:35-87:4),"{

			Edge temp2 = pq.remove();

			if ((added[temp2.node1] && !added[temp2.node2]) || (!added[temp2.node1] && added[temp2.node2])) {
				added[temp2.node1] = true;
				added[temp2.node2] = true;
				total += temp2.getDistance();
				pq.addAll(tempList);
				tempList.clear();
			} else if (!added[temp2.node1] && !added[temp2.node2])
				tempList.add(temp2);

		}"
130,DECLAREDREFERENCEEXPRESSION,"pq",Prob21.java(76:17-76:19),"pq"
131,DECLAREDREFERENCEEXPRESSION,"System",Prob21.java(88:3-88:9),"System"
132,UNARYOPERATOR,"!",Prob21.java(74:10-74:23),"!pq.isEmpty()"
133,UNARYOPERATOR,"!",Prob21.java(74:27-74:33),"!found"
134,MEMBERCALLEXPRESSION,"isEmpty",Prob21.java(74:11-74:23),"pq.isEmpty()"
135,DECLAREDREFERENCEEXPRESSION,"found",Prob21.java(74:28-74:33),"found"
136,DECLAREDREFERENCEEXPRESSION,"isEmpty",Prob21.java(74:14-74:21),"isEmpty"
137,DECLAREDREFERENCEEXPRESSION,"pq",Prob21.java(74:11-74:13),"pq"
138,DECLARATIONSTATEMENT,"",Prob21.java(76:4-76:29),"Edge temp2 = pq.remove();"
139,IFSTATEMENT,"",Prob21.java(78:4-85:25),"if ((added[temp2.node1] && !added[temp2.node2]) || (!added[temp2.node1] && added[temp2.node2])) {
				added[temp2.node1] = true;
				added[temp2.node2] = true;
				total += temp2.getDistance();
				pq.addAll(tempList);
				tempList.clear();
			} else if (!added[temp2.node1] && !added[temp2.node2])
				tempList.add(temp2);"
140,VARIABLEDECLARATION,"temp2",Prob21.java(76:9-76:28),"temp2 = pq.remove()"
141,COMPOUNDSTATEMENT,"",Prob21.java(78:100-84:5),"{
				added[temp2.node1] = true;
				added[temp2.node2] = true;
				total += temp2.getDistance();
				pq.addAll(tempList);
				tempList.clear();
			}"
142,MEMBERCALLEXPRESSION,"add",Prob21.java(85:5-85:25),"tempList.add(temp2);"
143,IFSTATEMENT,"",Prob21.java(84:11-85:25),"if (!added[temp2.node1] && !added[temp2.node2])
				tempList.add(temp2);"
144,DECLAREDREFERENCEEXPRESSION,"added",Prob21.java(78:9-78:14),"added"
145,MEMBERCALLEXPRESSION,"remove",Prob21.java(76:17-76:28),"pq.remove()"
146,DECLAREDREFERENCEEXPRESSION,"remove",Prob21.java(76:20-76:26),"remove"
147,BINARYOPERATOR,"||",Prob21.java(78:8-78:98),"(added[temp2.node1] && !added[temp2.node2]) || (!added[temp2.node1] && added[temp2.node2])"
148,DECLAREDREFERENCEEXPRESSION,"added",Prob21.java(79:5-79:10),"added"
149,DECLAREDREFERENCEEXPRESSION,"added",Prob21.java(84:16-84:21),"added"
150,BINARYOPERATOR,"&&",Prob21.java(78:9-78:50),"added[temp2.node1] && !added[temp2.node2]"
151,BINARYOPERATOR,"&&",Prob21.java(78:56-78:97),"!added[temp2.node1] && added[temp2.node2]"
152,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(78:9-78:27),"added[temp2.node1]"
153,UNARYOPERATOR,"!",Prob21.java(78:31-78:50),"!added[temp2.node2]"
154,DECLAREDREFERENCEEXPRESSION,"added",Prob21.java(78:57-78:62),"added"
155,MEMBEREXPRESSION,"node1",Prob21.java(78:15-78:26),"temp2.node1"
156,DECLAREDREFERENCEEXPRESSION,"added",Prob21.java(78:32-78:37),"added"
157,DECLAREDREFERENCEEXPRESSION,"temp2",Prob21.java(78:15-78:20),"temp2"
158,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(78:32-78:50),"added[temp2.node2]"
159,MEMBEREXPRESSION,"node2",Prob21.java(78:38-78:49),"temp2.node2"
160,DECLAREDREFERENCEEXPRESSION,"temp2",Prob21.java(78:38-78:43),"temp2"
161,UNARYOPERATOR,"!",Prob21.java(78:56-78:75),"!added[temp2.node1]"
162,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(78:79-78:97),"added[temp2.node2]"
163,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(78:57-78:75),"added[temp2.node1]"
164,DECLAREDREFERENCEEXPRESSION,"added",Prob21.java(78:79-78:84),"added"
165,MEMBEREXPRESSION,"node1",Prob21.java(78:63-78:74),"temp2.node1"
166,DECLAREDREFERENCEEXPRESSION,"temp2",Prob21.java(78:63-78:68),"temp2"
167,MEMBEREXPRESSION,"node2",Prob21.java(78:85-78:96),"temp2.node2"
168,DECLAREDREFERENCEEXPRESSION,"temp2",Prob21.java(78:85-78:90),"temp2"
169,BINARYOPERATOR,"&&",Prob21.java(84:15-84:57),"!added[temp2.node1] && !added[temp2.node2]"
170,DECLAREDREFERENCEEXPRESSION,"tempList",Prob21.java(85:5-85:13),"tempList"
171,DECLAREDREFERENCEEXPRESSION,"add",Prob21.java(85:14-85:17),"add"
172,DECLAREDREFERENCEEXPRESSION,"temp2",Prob21.java(85:18-85:23),"temp2"
173,UNARYOPERATOR,"!",Prob21.java(84:15-84:34),"!added[temp2.node1]"
174,UNARYOPERATOR,"!",Prob21.java(84:38-84:57),"!added[temp2.node2]"
175,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(84:16-84:34),"added[temp2.node1]"
176,DECLAREDREFERENCEEXPRESSION,"added",Prob21.java(84:39-84:44),"added"
177,MEMBEREXPRESSION,"node1",Prob21.java(84:22-84:33),"temp2.node1"
178,DECLAREDREFERENCEEXPRESSION,"temp2",Prob21.java(84:22-84:27),"temp2"
179,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(84:39-84:57),"added[temp2.node2]"
180,MEMBEREXPRESSION,"node2",Prob21.java(84:45-84:56),"temp2.node2"
181,DECLAREDREFERENCEEXPRESSION,"temp2",Prob21.java(84:45-84:50),"temp2"
182,BINARYOPERATOR,"=",Prob21.java(79:5-79:31),"added[temp2.node1] = true;"
183,BINARYOPERATOR,"=",Prob21.java(80:5-80:31),"added[temp2.node2] = true;"
184,BINARYOPERATOR,"+=",Prob21.java(81:5-81:34),"total += temp2.getDistance();"
185,MEMBERCALLEXPRESSION,"addAll",Prob21.java(82:5-82:25),"pq.addAll(tempList);"
186,MEMBERCALLEXPRESSION,"clear",Prob21.java(83:5-83:22),"tempList.clear();"
187,DECLAREDREFERENCEEXPRESSION,"clear",Prob21.java(83:14-83:19),"clear"
188,DECLAREDREFERENCEEXPRESSION,"tempList",Prob21.java(83:5-83:13),"tempList"
189,DECLAREDREFERENCEEXPRESSION,"addAll",Prob21.java(82:8-82:14),"addAll"
190,DECLAREDREFERENCEEXPRESSION,"tempList",Prob21.java(82:15-82:23),"tempList"
191,DECLAREDREFERENCEEXPRESSION,"pq",Prob21.java(82:5-82:7),"pq"
192,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(80:5-80:23),"added[temp2.node2]"
193,LITERAL,"",Prob21.java(80:26-80:30),"true"
194,DECLAREDREFERENCEEXPRESSION,"total",Prob21.java(81:5-81:10),"total"
195,DECLAREDREFERENCEEXPRESSION,"added",Prob21.java(80:5-80:10),"added"
196,MEMBEREXPRESSION,"node2",Prob21.java(80:11-80:22),"temp2.node2"
197,DECLAREDREFERENCEEXPRESSION,"temp2",Prob21.java(80:11-80:16),"temp2"
198,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(79:5-79:23),"added[temp2.node1]"
199,LITERAL,"",Prob21.java(79:26-79:30),"true"
200,MEMBEREXPRESSION,"node1",Prob21.java(79:11-79:22),"temp2.node1"
201,DECLAREDREFERENCEEXPRESSION,"temp2",Prob21.java(79:11-79:16),"temp2"
202,MEMBERCALLEXPRESSION,"getDistance",Prob21.java(81:14-81:33),"temp2.getDistance()"
203,DECLAREDREFERENCEEXPRESSION,"temp2",Prob21.java(81:14-81:19),"temp2"
204,DECLAREDREFERENCEEXPRESSION,"getDistance",Prob21.java(81:20-81:31),"getDistance"
205,LITERAL,"",Prob21.java(64:18-64:19),"0"
206,MEMBERCALLEXPRESSION,"remove",Prob21.java(66:15-66:26),"pq.remove()"
207,DECLAREDREFERENCEEXPRESSION,"remove",Prob21.java(66:18-66:24),"remove"
208,DECLAREDREFERENCEEXPRESSION,"pq",Prob21.java(66:15-66:17),"pq"
209,NEWEXPRESSION,"",Prob21.java(72:30-72:51),"new ArrayList<Edge>()"
210,CONSTRUCTEXPRESSION,"",Prob21.java(72:30-72:51),"new ArrayList<Edge>()"
211,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(67:3-67:20),"added[temp.node1]"
212,LITERAL,"",Prob21.java(67:23-67:27),"true"
213,DECLAREDREFERENCEEXPRESSION,"added",Prob21.java(68:3-68:8),"added"
214,DECLAREDREFERENCEEXPRESSION,"added",Prob21.java(67:3-67:8),"added"
215,MEMBEREXPRESSION,"node1",Prob21.java(67:9-67:19),"temp.node1"
216,DECLAREDREFERENCEEXPRESSION,"temp",Prob21.java(67:9-67:13),"temp"
217,MEMBERCALLEXPRESSION,"nextInt",Prob21.java(44:11-44:26),"stdin.nextInt()"
218,DECLAREDREFERENCEEXPRESSION,"nextInt",Prob21.java(44:17-44:24),"nextInt"
219,DECLAREDREFERENCEEXPRESSION,"stdin",Prob21.java(44:11-44:16),"stdin"
220,ARRAYCREATIONEXPRESSION,"",Prob21.java(63:21-63:35),"new boolean[n]"
221,DECLAREDREFERENCEEXPRESSION,"n",Prob21.java(63:33-63:34),"n"
222,NEWEXPRESSION,"",Prob21.java(55:28-55:53),"new PriorityQueue<Edge>()"
223,CONSTRUCTEXPRESSION,"",Prob21.java(55:28-55:53),"new PriorityQueue<Edge>()"
224,COMPOUNDSTATEMENT,"",Prob21.java(48:31-53:4),"{
			String[] line = stdin.nextLine().split("" "");
			double a = Double.parseDouble(line[0]);
			double b = Double.parseDouble(line[1]);
			p[i] = new Point(a, b);
		}"
225,DECLARATIONSTATEMENT,"",Prob21.java(48:8-48:17),"int i = 0"
226,BINARYOPERATOR,"<",Prob21.java(48:19-48:24),"i < n"
227,UNARYOPERATOR,"++",Prob21.java(48:26-48:29),"i++"
228,VARIABLEDECLARATION,"i",Prob21.java(48:12-48:17),"i = 0"
229,DECLAREDREFERENCEEXPRESSION,"stdin",Prob21.java(49:20-49:25),"stdin"
230,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(48:26-48:27),"i"
231,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(48:19-48:20),"i"
232,DECLARATIONSTATEMENT,"",Prob21.java(49:4-49:48),"String[] line = stdin.nextLine().split("" "");"
233,DECLARATIONSTATEMENT,"",Prob21.java(50:4-50:43),"double a = Double.parseDouble(line[0]);"
234,DECLARATIONSTATEMENT,"",Prob21.java(51:4-51:43),"double b = Double.parseDouble(line[1]);"
235,BINARYOPERATOR,"=",Prob21.java(52:4-52:27),"p[i] = new Point(a, b);"
236,VARIABLEDECLARATION,"line",Prob21.java(49:13-49:47),"line = stdin.nextLine().split("" "")"
237,VARIABLEDECLARATION,"a",Prob21.java(50:11-50:42),"a = Double.parseDouble(line[0])"
238,VARIABLEDECLARATION,"b",Prob21.java(51:11-51:42),"b = Double.parseDouble(line[1])"
239,DECLAREDREFERENCEEXPRESSION,"line",Prob21.java(50:34-50:38),"line"
240,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(52:4-52:8),"p[i]"
241,NEWEXPRESSION,"",Prob21.java(52:11-52:26),"new Point(a, b)"
242,DECLAREDREFERENCEEXPRESSION,"p",Prob21.java(52:4-52:5),"p"
243,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(52:6-52:7),"i"
244,DECLAREDREFERENCEEXPRESSION,"a",Prob21.java(52:21-52:22),"a"
245,CONSTRUCTEXPRESSION,"",Prob21.java(52:11-52:26),"new Point(a, b)"
246,CONSTRUCTORDECLARATION,"Point",,""
247,DECLAREDREFERENCEEXPRESSION,"b",Prob21.java(52:24-52:25),"b"
248,PARAMVARIABLEDECLARATION,"double1",,""
249,PARAMVARIABLEDECLARATION,"double0",,""
250,MEMBERCALLEXPRESSION,"split",Prob21.java(49:20-49:47),"stdin.nextLine().split("" "")"
251,DECLAREDREFERENCEEXPRESSION,"split",Prob21.java(49:37-49:42),"split"
252,LITERAL,"",Prob21.java(49:43-49:46),""" """
253,MEMBERCALLEXPRESSION,"nextLine",Prob21.java(49:20-49:36),"stdin.nextLine()"
254,DECLAREDREFERENCEEXPRESSION,"nextLine",Prob21.java(49:26-49:34),"nextLine"
255,DECLAREDREFERENCEEXPRESSION,"line",Prob21.java(51:34-51:38),"line"
256,STATICCALLEXPRESSION,"parseDouble",Prob21.java(50:15-50:42),"Double.parseDouble(line[0])"
257,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(50:34-50:41),"line[0]"
258,LITERAL,"",Prob21.java(50:39-50:40),"0"
259,STATICCALLEXPRESSION,"parseDouble",Prob21.java(51:15-51:42),"Double.parseDouble(line[1])"
260,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(51:34-51:41),"line[1]"
261,LITERAL,"",Prob21.java(51:39-51:40),"1"
262,DECLAREDREFERENCEEXPRESSION,"n",Prob21.java(48:23-48:24),"n"
263,LITERAL,"",Prob21.java(48:16-48:17),"0"
264,DECLAREDREFERENCEEXPRESSION,"printf",Prob21.java(88:14-88:20),"printf"
265,DECLAREDREFERENCEEXPRESSION,"total",Prob21.java(88:31-88:36),"total"
266,LITERAL,"",Prob21.java(88:21-88:29),"""%.2f\n"""
267,MEMBEREXPRESSION,"out",Prob21.java(88:3-88:13),"System.out"
268,ARRAYCREATIONEXPRESSION,"",Prob21.java(45:15-45:27),"new Point[n]"
269,DECLAREDREFERENCEEXPRESSION,"n",Prob21.java(45:25-45:26),"n"
270,COMPOUNDSTATEMENT,"",Prob21.java(56:31-61:4),"{
			for (int j = i + 1; j < n; j++) {
				Edge edge = new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y);
				pq.add(edge);
			}
		}"
271,DECLARATIONSTATEMENT,"",Prob21.java(56:8-56:17),"int i = 0"
272,BINARYOPERATOR,"<",Prob21.java(56:19-56:24),"i < n"
273,UNARYOPERATOR,"++",Prob21.java(56:26-56:29),"i++"
274,VARIABLEDECLARATION,"i",Prob21.java(56:12-56:17),"i = 0"
275,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(57:17-57:18),"i"
276,LITERAL,"",Prob21.java(56:16-56:17),"0"
277,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(56:19-56:20),"i"
278,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(56:26-56:27),"i"
279,FORSTATEMENT,"",Prob21.java(57:4-60:5),"for (int j = i + 1; j < n; j++) {
				Edge edge = new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y);
				pq.add(edge);
			}"
280,COMPOUNDSTATEMENT,"",Prob21.java(57:36-60:5),"{
				Edge edge = new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y);
				pq.add(edge);
			}"
281,DECLARATIONSTATEMENT,"",Prob21.java(57:9-57:22),"int j = i + 1"
282,BINARYOPERATOR,"<",Prob21.java(57:24-57:29),"j < n"
283,UNARYOPERATOR,"++",Prob21.java(57:31-57:34),"j++"
284,VARIABLEDECLARATION,"j",Prob21.java(57:13-57:22),"j = i + 1"
285,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(58:26-58:27),"i"
286,DECLAREDREFERENCEEXPRESSION,"j",Prob21.java(57:31-57:32),"j"
287,DECLAREDREFERENCEEXPRESSION,"j",Prob21.java(57:24-57:25),"j"
288,BINARYOPERATOR,"+",Prob21.java(57:17-57:22),"i + 1"
289,LITERAL,"",Prob21.java(57:21-57:22),"1"
290,DECLARATIONSTATEMENT,"",Prob21.java(58:5-58:64),"Edge edge = new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y);"
291,MEMBERCALLEXPRESSION,"add",Prob21.java(59:5-59:18),"pq.add(edge);"
292,VARIABLEDECLARATION,"edge",Prob21.java(58:10-58:63),"edge = new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y)"
293,DECLAREDREFERENCEEXPRESSION,"pq",Prob21.java(59:5-59:7),"pq"
294,DECLAREDREFERENCEEXPRESSION,"add",Prob21.java(59:8-59:11),"add"
295,DECLAREDREFERENCEEXPRESSION,"edge",Prob21.java(59:12-59:16),"edge"
296,NEWEXPRESSION,"",Prob21.java(58:17-58:63),"new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y)"
297,CONSTRUCTEXPRESSION,"",Prob21.java(58:17-58:63),"new Edge(i, j, p[i].x, p[i].y, p[j].x, p[j].y)"
298,CONSTRUCTORDECLARATION,"Edge",,""
299,MEMBEREXPRESSION,"y",Prob21.java(58:56-58:62),"p[j].y"
300,DECLAREDREFERENCEEXPRESSION,"j",Prob21.java(58:29-58:30),"j"
301,PARAMVARIABLEDECLARATION,"int1",,""
302,DECLAREDREFERENCEEXPRESSION,"p",Prob21.java(58:32-58:33),"p"
303,MEMBEREXPRESSION,"x",Prob21.java(58:48-58:54),"p[j].x"
304,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(58:48-58:52),"p[j]"
305,PARAMVARIABLEDECLARATION,"double4",,""
306,DECLAREDREFERENCEEXPRESSION,"p",Prob21.java(58:56-58:57),"p"
307,DECLAREDREFERENCEEXPRESSION,"p",Prob21.java(58:48-58:49),"p"
308,DECLAREDREFERENCEEXPRESSION,"j",Prob21.java(58:50-58:51),"j"
309,MEMBEREXPRESSION,"y",Prob21.java(58:40-58:46),"p[i].y"
310,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(58:56-58:60),"p[j]"
311,PARAMVARIABLEDECLARATION,"double5",,""
312,DECLAREDREFERENCEEXPRESSION,"j",Prob21.java(58:58-58:59),"j"
313,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(58:40-58:44),"p[i]"
314,PARAMVARIABLEDECLARATION,"double3",,""
315,DECLAREDREFERENCEEXPRESSION,"p",Prob21.java(58:40-58:41),"p"
316,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(58:42-58:43),"i"
317,MEMBEREXPRESSION,"x",Prob21.java(58:32-58:38),"p[i].x"
318,PARAMVARIABLEDECLARATION,"int0",,""
319,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(58:32-58:36),"p[i]"
320,PARAMVARIABLEDECLARATION,"double2",,""
321,DECLAREDREFERENCEEXPRESSION,"i",Prob21.java(58:34-58:35),"i"
322,DECLAREDREFERENCEEXPRESSION,"n",Prob21.java(57:28-57:29),"n"
323,DECLAREDREFERENCEEXPRESSION,"n",Prob21.java(56:23-56:24),"n"
324,MEMBERCALLEXPRESSION,"nextLine",Prob21.java(46:14-46:30),"stdin.nextLine()"
325,DECLAREDREFERENCEEXPRESSION,"nextLine",Prob21.java(46:20-46:28),"nextLine"
326,DECLAREDREFERENCEEXPRESSION,"stdin",Prob21.java(46:14-46:19),"stdin"
327,NEWEXPRESSION,"",Prob21.java(42:19-42:41),"new Scanner(System.in)"
328,CONSTRUCTEXPRESSION,"",Prob21.java(42:19-42:41),"new Scanner(System.in)"
329,MEMBEREXPRESSION,"in",Prob21.java(42:31-42:40),"System.in"
330,ARRAYSUBSCRIPTIONEXPRESSION,"",Prob21.java(68:3-68:20),"added[temp.node2]"
331,LITERAL,"",Prob21.java(68:23-68:27),"true"
332,MEMBEREXPRESSION,"node2",Prob21.java(68:9-68:19),"temp.node2"
333,DECLAREDREFERENCEEXPRESSION,"temp",Prob21.java(68:9-68:13),"temp"
334,FIELDDECLARATION,"this",,""
335,FIELDDECLARATION,"x",Prob21.java(6:2-6:14),"x"
336,CONSTRUCTORDECLARATION,"Point",Prob21.java(8:2-11:3),"Point(double x, double y) {
		this.x = x;
		this.y = y;
	}"
337,COMPOUNDSTATEMENT,"",Prob21.java(8:28-11:3),"{
		this.x = x;
		this.y = y;
	}"
338,PARAMVARIABLEDECLARATION,"x",Prob21.java(8:8-8:16),"double x"
339,PARAMVARIABLEDECLARATION,"y",Prob21.java(8:18-8:26),"double y"
340,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(9:3-9:7),"this"
341,RETURNSTATEMENT,"",,""
342,BINARYOPERATOR,"=",Prob21.java(9:3-9:14),"this.x = x;"
343,BINARYOPERATOR,"=",Prob21.java(10:3-10:14),"this.y = y;"
344,MEMBEREXPRESSION,"x",Prob21.java(9:3-9:9),"this.x"
345,DECLAREDREFERENCEEXPRESSION,"x",Prob21.java(9:12-9:13),"x"
346,DECLAREDREFERENCEEXPRESSION,"this",Prob21.java(10:3-10:7),"this"
347,MEMBEREXPRESSION,"y",Prob21.java(10:3-10:9),"this.y"
348,DECLAREDREFERENCEEXPRESSION,"y",Prob21.java(10:12-10:13),"y"

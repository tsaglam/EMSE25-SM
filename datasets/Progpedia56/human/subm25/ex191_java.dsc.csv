id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/06738835_21_200701284/EX191.java",,""
2,RECORDDECLARATION,"edge",EX191.java(3:1-14:2),"class edge implements Comparable<edge>{
  int u;
  int v;
  double cost;
  edge(){this(0,0,0);}
  public int compareTo(edge other){
    if(cost==other.cost) return 0;
    else return cost<other.cost ? -1 : 1;
  }
  public String toString(){ return ""(""+u+"",""+v+"",""+cost+"")""; }
  edge(int u, int v, double c){this.u=u; this.v=v; this.cost=c;}
}"
3,RECORDDECLARATION,"disjoint_set",EX191.java(18:1-43:2),"class disjoint_set{
  int p[];
  int rank[];
  disjoint_set(int N){
    p = new int[N];
    rank = new int[N];
    for(int i = 0; i < N; i++){
      p[i] = i;
      rank[i] = 0;
    }
  }
  int find_set(int x){
    if(p[x]!=x) p[x] = find_set(p[x]);
    return p[x];
  }
  void union(int x, int y){
    link(find_set(x),find_set(y));
  }
  void link(int x, int y){
    if(rank[x]>rank[y]) p[y] = x;
    else{
      p[x] = y;
      if(rank[x]==rank[y]) rank[y]++;
    }
  }
}"
4,RECORDDECLARATION,"sol",EX191.java(47:1-86:2),"class sol{
    
  Scanner kb;
  sol(Scanner kb){this.kb = kb;}
  double points[][];
  
  double distance(int i, int k){
    double dx = points[k][0]-points[i][0];
    double dy = points[k][1]-points[i][1];
    return Math.sqrt(dx*dx+dy*dy);
  }
  
  void solve(){
    int N = kb.nextInt();
    points = new double[N][2];
    for(int i = 0; i < N; i++){
      points[i][0] = kb.nextDouble();
      points[i][1] = kb.nextDouble();
    }
    List<edge> edges = new ArrayList<edge>();
    for(int i = 0; i < N; i++){
      for(int k = i+1; k < N; k++){
        edges.add(new edge(i,k,distance(i,k)));
      }
    }
    Collections.sort(edges);
    disjoint_set S = new disjoint_set(N);
    int count = 0;
    double total = 0;
    for(edge e : edges){
      if(S.find_set(e.u)!=S.find_set(e.v)){
        S.union(e.u,e.v);
        total += e.cost;
        count++;
        if(count==N-1) break;
      }
    }
    System.out.printf(""%.2f\n"",total);
  }
}"
5,RECORDDECLARATION,"EX191",EX191.java(88:1-94:2),"public class EX191{
  public static void main(String args[]){
    Scanner kb = new Scanner(System.in);
    sol s = new sol(kb);
    s.solve();
  }
}"
6,INCLUDEDECLARATION,"java.util",,""
7,FIELDDECLARATION,"this",,""
8,FIELDDECLARATION,"u",EX191.java(4:3-4:9),"u"
9,FIELDDECLARATION,"v",EX191.java(5:3-5:9),"v"
10,FIELDDECLARATION,"cost",EX191.java(6:3-6:15),"cost"
11,METHODDECLARATION,"compareTo",EX191.java(8:3-11:4),"public int compareTo(edge other){
    if(cost==other.cost) return 0;
    else return cost<other.cost ? -1 : 1;
  }"
12,METHODDECLARATION,"toString",EX191.java(12:3-12:63),"public String toString(){ return ""(""+u+"",""+v+"",""+cost+"")""; }"
13,CONSTRUCTORDECLARATION,"edge",EX191.java(7:3-7:23),"edge(){this(0,0,0);}"
14,CONSTRUCTORDECLARATION,"edge",EX191.java(13:3-13:65),"edge(int u, int v, double c){this.u=u; this.v=v; this.cost=c;}"
15,VARIABLEDECLARATION,"this",,""
16,COMPOUNDSTATEMENT,"",EX191.java(8:35-11:4),"{
    if(cost==other.cost) return 0;
    else return cost<other.cost ? -1 : 1;
  }"
17,PARAMVARIABLEDECLARATION,"other",EX191.java(8:24-8:34),"edge other"
18,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(9:8-9:12),"this"
19,RETURNSTATEMENT,"",,""
20,IFSTATEMENT,"",EX191.java(9:5-10:42),"if(cost==other.cost) return 0;
    else return cost<other.cost ? -1 : 1;"
21,BINARYOPERATOR,"==",EX191.java(9:8-9:24),"cost==other.cost"
22,RETURNSTATEMENT,"",EX191.java(9:26-9:35),"return 0;"
23,RETURNSTATEMENT,"",EX191.java(10:10-10:42),"return cost<other.cost ? -1 : 1;"
24,LITERAL,"",EX191.java(9:33-9:34),"0"
25,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(10:17-10:21),"this"
26,CONDITIONALEXPRESSION,"",EX191.java(10:17-10:41),"cost<other.cost ? -1 : 1"
27,UNARYOPERATOR,"-",EX191.java(10:35-10:37),"-1"
28,LITERAL,"",EX191.java(10:40-10:41),"1"
29,BINARYOPERATOR,"<",EX191.java(10:17-10:32),"cost<other.cost"
30,LITERAL,"",EX191.java(10:36-10:37),"1"
31,MEMBEREXPRESSION,"cost",EX191.java(10:17-10:21),"cost"
32,MEMBEREXPRESSION,"cost",EX191.java(10:22-10:32),"other.cost"
33,DECLAREDREFERENCEEXPRESSION,"other",EX191.java(10:22-10:27),"other"
34,MEMBEREXPRESSION,"cost",EX191.java(9:8-9:12),"cost"
35,MEMBEREXPRESSION,"cost",EX191.java(9:14-9:24),"other.cost"
36,DECLAREDREFERENCEEXPRESSION,"other",EX191.java(9:14-9:19),"other"
37,VARIABLEDECLARATION,"this",,""
38,COMPOUNDSTATEMENT,"",EX191.java(12:27-12:63),"{ return ""(""+u+"",""+v+"",""+cost+"")""; }"
39,LITERAL,"",EX191.java(12:36-12:39),"""("""
40,RETURNSTATEMENT,"",EX191.java(12:29-12:61),"return ""(""+u+"",""+v+"",""+cost+"")"";"
41,BINARYOPERATOR,"+",EX191.java(12:36-12:60),"""(""+u+"",""+v+"",""+cost+"")"""
42,BINARYOPERATOR,"+",EX191.java(12:36-12:56),"""(""+u+"",""+v+"",""+cost"
43,LITERAL,"",EX191.java(12:57-12:60),""")"""
44,BINARYOPERATOR,"+",EX191.java(12:36-12:51),"""(""+u+"",""+v+"","""
45,MEMBEREXPRESSION,"cost",EX191.java(12:52-12:56),"cost"
46,BINARYOPERATOR,"+",EX191.java(12:36-12:47),"""(""+u+"",""+v"
47,LITERAL,"",EX191.java(12:48-12:51),""","""
48,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(12:52-12:56),"this"
49,BINARYOPERATOR,"+",EX191.java(12:36-12:45),"""(""+u+"","""
50,MEMBEREXPRESSION,"v",EX191.java(12:46-12:47),"v"
51,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(12:46-12:47),"this"
52,BINARYOPERATOR,"+",EX191.java(12:36-12:41),"""(""+u"
53,LITERAL,"",EX191.java(12:42-12:45),""","""
54,MEMBEREXPRESSION,"u",EX191.java(12:40-12:41),"u"
55,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(12:40-12:41),"this"
56,COMPOUNDSTATEMENT,"",EX191.java(7:9-7:23),"{this(0,0,0);}"
57,LITERAL,"",EX191.java(7:15-7:16),"0"
58,RETURNSTATEMENT,"",,""
59,EXPLICITCONSTRUCTORINVOCATION,"",EX191.java(7:10-7:22),"this(0,0,0);"
60,CONSTRUCTORDECLARATION,"edge",,""
61,LITERAL,"",EX191.java(7:19-7:20),"0"
62,LITERAL,"",EX191.java(7:17-7:18),"0"
63,PARAMVARIABLEDECLARATION,"int1",,""
64,PARAMVARIABLEDECLARATION,"int0",,""
65,PARAMVARIABLEDECLARATION,"int2",,""
66,COMPOUNDSTATEMENT,"",EX191.java(13:31-13:65),"{this.u=u; this.v=v; this.cost=c;}"
67,PARAMVARIABLEDECLARATION,"u",EX191.java(13:8-13:13),"int u"
68,PARAMVARIABLEDECLARATION,"v",EX191.java(13:15-13:20),"int v"
69,PARAMVARIABLEDECLARATION,"c",EX191.java(13:22-13:30),"double c"
70,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(13:32-13:36),"this"
71,RETURNSTATEMENT,"",,""
72,BINARYOPERATOR,"=",EX191.java(13:32-13:41),"this.u=u;"
73,BINARYOPERATOR,"=",EX191.java(13:42-13:51),"this.v=v;"
74,BINARYOPERATOR,"=",EX191.java(13:52-13:64),"this.cost=c;"
75,MEMBEREXPRESSION,"cost",EX191.java(13:52-13:61),"this.cost"
76,DECLAREDREFERENCEEXPRESSION,"c",EX191.java(13:62-13:63),"c"
77,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(13:52-13:56),"this"
78,MEMBEREXPRESSION,"v",EX191.java(13:42-13:48),"this.v"
79,DECLAREDREFERENCEEXPRESSION,"v",EX191.java(13:49-13:50),"v"
80,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(13:42-13:46),"this"
81,MEMBEREXPRESSION,"u",EX191.java(13:32-13:38),"this.u"
82,DECLAREDREFERENCEEXPRESSION,"u",EX191.java(13:39-13:40),"u"
83,FIELDDECLARATION,"this",,""
84,FIELDDECLARATION,"kb",EX191.java(49:3-49:14),"kb"
85,FIELDDECLARATION,"points",EX191.java(51:3-51:21),"points"
86,METHODDECLARATION,"distance",EX191.java(53:3-57:4),"double distance(int i, int k){
    double dx = points[k][0]-points[i][0];
    double dy = points[k][1]-points[i][1];
    return Math.sqrt(dx*dx+dy*dy);
  }"
87,METHODDECLARATION,"solve",EX191.java(59:3-85:4),"void solve(){
    int N = kb.nextInt();
    points = new double[N][2];
    for(int i = 0; i < N; i++){
      points[i][0] = kb.nextDouble();
      points[i][1] = kb.nextDouble();
    }
    List<edge> edges = new ArrayList<edge>();
    for(int i = 0; i < N; i++){
      for(int k = i+1; k < N; k++){
        edges.add(new edge(i,k,distance(i,k)));
      }
    }
    Collections.sort(edges);
    disjoint_set S = new disjoint_set(N);
    int count = 0;
    double total = 0;
    for(edge e : edges){
      if(S.find_set(e.u)!=S.find_set(e.v)){
        S.union(e.u,e.v);
        total += e.cost;
        count++;
        if(count==N-1) break;
      }
    }
    System.out.printf(""%.2f\n"",total);
  }"
88,CONSTRUCTORDECLARATION,"sol",EX191.java(50:3-50:33),"sol(Scanner kb){this.kb = kb;}"
89,COMPOUNDSTATEMENT,"",EX191.java(50:18-50:33),"{this.kb = kb;}"
90,PARAMVARIABLEDECLARATION,"kb",EX191.java(50:7-50:17),"Scanner kb"
91,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(50:19-50:23),"this"
92,RETURNSTATEMENT,"",,""
93,BINARYOPERATOR,"=",EX191.java(50:19-50:32),"this.kb = kb;"
94,MEMBEREXPRESSION,"kb",EX191.java(50:19-50:26),"this.kb"
95,DECLAREDREFERENCEEXPRESSION,"kb",EX191.java(50:29-50:31),"kb"
96,VARIABLEDECLARATION,"this",,""
97,COMPOUNDSTATEMENT,"",EX191.java(59:15-85:4),"{
    int N = kb.nextInt();
    points = new double[N][2];
    for(int i = 0; i < N; i++){
      points[i][0] = kb.nextDouble();
      points[i][1] = kb.nextDouble();
    }
    List<edge> edges = new ArrayList<edge>();
    for(int i = 0; i < N; i++){
      for(int k = i+1; k < N; k++){
        edges.add(new edge(i,k,distance(i,k)));
      }
    }
    Collections.sort(edges);
    disjoint_set S = new disjoint_set(N);
    int count = 0;
    double total = 0;
    for(edge e : edges){
      if(S.find_set(e.u)!=S.find_set(e.v)){
        S.union(e.u,e.v);
        total += e.cost;
        count++;
        if(count==N-1) break;
      }
    }
    System.out.printf(""%.2f\n"",total);
  }"
98,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(60:13-60:15),"this"
99,RETURNSTATEMENT,"",,""
100,DECLARATIONSTATEMENT,"",EX191.java(60:5-60:26),"int N = kb.nextInt();"
101,BINARYOPERATOR,"=",EX191.java(61:5-61:31),"points = new double[N][2];"
102,FORSTATEMENT,"",EX191.java(62:5-65:6),"for(int i = 0; i < N; i++){
      points[i][0] = kb.nextDouble();
      points[i][1] = kb.nextDouble();
    }"
103,DECLARATIONSTATEMENT,"",EX191.java(66:5-66:46),"List<edge> edges = new ArrayList<edge>();"
104,FORSTATEMENT,"",EX191.java(67:5-71:6),"for(int i = 0; i < N; i++){
      for(int k = i+1; k < N; k++){
        edges.add(new edge(i,k,distance(i,k)));
      }
    }"
105,STATICCALLEXPRESSION,"sort",EX191.java(72:5-72:29),"Collections.sort(edges);"
106,DECLARATIONSTATEMENT,"",EX191.java(73:5-73:42),"disjoint_set S = new disjoint_set(N);"
107,DECLARATIONSTATEMENT,"",EX191.java(74:5-74:19),"int count = 0;"
108,DECLARATIONSTATEMENT,"",EX191.java(75:5-75:22),"double total = 0;"
109,FOREACHSTATEMENT,"",EX191.java(76:5-83:6),"for(edge e : edges){
      if(S.find_set(e.u)!=S.find_set(e.v)){
        S.union(e.u,e.v);
        total += e.cost;
        count++;
        if(count==N-1) break;
      }
    }"
110,MEMBERCALLEXPRESSION,"printf",EX191.java(84:5-84:39),"System.out.printf(""%.2f\n"",total);"
111,VARIABLEDECLARATION,"N",EX191.java(60:9-60:25),"N = kb.nextInt()"
112,VARIABLEDECLARATION,"edges",EX191.java(66:16-66:45),"edges = new ArrayList<edge>()"
113,VARIABLEDECLARATION,"S",EX191.java(73:18-73:41),"S = new disjoint_set(N)"
114,VARIABLEDECLARATION,"count",EX191.java(74:9-74:18),"count = 0"
115,VARIABLEDECLARATION,"total",EX191.java(75:12-75:21),"total = 0"
116,NEWEXPRESSION,"",EX191.java(66:24-66:45),"new ArrayList<edge>()"
117,CONSTRUCTEXPRESSION,"",EX191.java(66:24-66:45),"new ArrayList<edge>()"
118,MEMBEREXPRESSION,"points",EX191.java(61:5-61:11),"points"
119,ARRAYCREATIONEXPRESSION,"",EX191.java(61:14-61:30),"new double[N][2]"
120,LITERAL,"",EX191.java(62:17-62:18),"0"
121,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(61:5-61:11),"this"
122,DECLAREDREFERENCEEXPRESSION,"N",EX191.java(61:25-61:26),"N"
123,LITERAL,"",EX191.java(61:28-61:29),"2"
124,NEWEXPRESSION,"",EX191.java(73:22-73:41),"new disjoint_set(N)"
125,CONSTRUCTEXPRESSION,"",EX191.java(73:22-73:41),"new disjoint_set(N)"
126,CONSTRUCTORDECLARATION,"disjoint_set",EX191.java(19:3-26:4),"disjoint_set(int N){
    p = new int[N];
    rank = new int[N];
    for(int i = 0; i < N; i++){
      p[i] = i;
      rank[i] = 0;
    }
  }"
127,DECLAREDREFERENCEEXPRESSION,"N",EX191.java(73:39-73:40),"N"
128,PARAMVARIABLEDECLARATION,"N",EX191.java(19:16-19:21),"int N"
129,LITERAL,"",EX191.java(74:17-74:18),"0"
130,MEMBERCALLEXPRESSION,"nextInt",EX191.java(60:13-60:25),"kb.nextInt()"
131,DECLAREDREFERENCEEXPRESSION,"nextInt",EX191.java(60:16-60:23),"nextInt"
132,MEMBEREXPRESSION,"kb",EX191.java(60:13-60:15),"kb"
133,LITERAL,"",EX191.java(67:17-67:18),"0"
134,COMPOUNDSTATEMENT,"",EX191.java(62:31-65:6),"{
      points[i][0] = kb.nextDouble();
      points[i][1] = kb.nextDouble();
    }"
135,DECLARATIONSTATEMENT,"",EX191.java(62:9-62:18),"int i = 0"
136,BINARYOPERATOR,"<",EX191.java(62:20-62:25),"i < N"
137,UNARYOPERATOR,"++",EX191.java(62:27-62:30),"i++"
138,VARIABLEDECLARATION,"i",EX191.java(62:13-62:18),"i = 0"
139,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(63:7-63:13),"this"
140,BINARYOPERATOR,"=",EX191.java(63:7-63:38),"points[i][0] = kb.nextDouble();"
141,BINARYOPERATOR,"=",EX191.java(64:7-64:38),"points[i][1] = kb.nextDouble();"
142,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(62:27-62:28),"i"
143,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(64:7-64:19),"points[i][1]"
144,MEMBERCALLEXPRESSION,"nextDouble",EX191.java(64:22-64:37),"kb.nextDouble()"
145,DECLAREDREFERENCEEXPRESSION,"nextDouble",EX191.java(64:25-64:35),"nextDouble"
146,MEMBEREXPRESSION,"kb",EX191.java(64:22-64:24),"kb"
147,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(64:22-64:24),"this"
148,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(64:7-64:16),"points[i]"
149,LITERAL,"",EX191.java(64:17-64:18),"1"
150,MEMBEREXPRESSION,"points",EX191.java(64:7-64:13),"points"
151,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(64:14-64:15),"i"
152,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(64:7-64:13),"this"
153,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(63:7-63:19),"points[i][0]"
154,MEMBERCALLEXPRESSION,"nextDouble",EX191.java(63:22-63:37),"kb.nextDouble()"
155,DECLAREDREFERENCEEXPRESSION,"nextDouble",EX191.java(63:25-63:35),"nextDouble"
156,MEMBEREXPRESSION,"kb",EX191.java(63:22-63:24),"kb"
157,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(63:22-63:24),"this"
158,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(63:7-63:16),"points[i]"
159,LITERAL,"",EX191.java(63:17-63:18),"0"
160,MEMBEREXPRESSION,"points",EX191.java(63:7-63:13),"points"
161,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(63:14-63:15),"i"
162,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(62:20-62:21),"i"
163,DECLAREDREFERENCEEXPRESSION,"N",EX191.java(62:24-62:25),"N"
164,LITERAL,"",EX191.java(75:20-75:21),"0"
165,DECLAREDREFERENCEEXPRESSION,"edges",EX191.java(76:18-76:23),"edges"
166,DECLAREDREFERENCEEXPRESSION,"edges",EX191.java(72:22-72:27),"edges"
167,DECLARATIONSTATEMENT,"",EX191.java(76:9-76:15),"edge e"
168,COMPOUNDSTATEMENT,"",EX191.java(76:24-83:6),"{
      if(S.find_set(e.u)!=S.find_set(e.v)){
        S.union(e.u,e.v);
        total += e.cost;
        count++;
        if(count==N-1) break;
      }
    }"
169,VARIABLEDECLARATION,"e",EX191.java(76:14-76:15),"e"
170,DECLAREDREFERENCEEXPRESSION,"S",EX191.java(77:10-77:11),"S"
171,DECLAREDREFERENCEEXPRESSION,"System",EX191.java(84:5-84:11),"System"
172,UNINITIALIZEDVALUE,"Uninitialized Value",,""
173,IFSTATEMENT,"",EX191.java(77:7-82:8),"if(S.find_set(e.u)!=S.find_set(e.v)){
        S.union(e.u,e.v);
        total += e.cost;
        count++;
        if(count==N-1) break;
      }"
174,COMPOUNDSTATEMENT,"",EX191.java(77:43-82:8),"{
        S.union(e.u,e.v);
        total += e.cost;
        count++;
        if(count==N-1) break;
      }"
175,BINARYOPERATOR,"!=",EX191.java(77:10-77:42),"S.find_set(e.u)!=S.find_set(e.v)"
176,DECLAREDREFERENCEEXPRESSION,"S",EX191.java(78:9-78:10),"S"
177,MEMBERCALLEXPRESSION,"union",EX191.java(78:9-78:26),"S.union(e.u,e.v);"
178,BINARYOPERATOR,"+=",EX191.java(79:9-79:25),"total += e.cost;"
179,UNARYOPERATOR,"++",EX191.java(80:9-80:17),"count++;"
180,IFSTATEMENT,"",EX191.java(81:9-81:30),"if(count==N-1) break;"
181,BINARYOPERATOR,"==",EX191.java(81:12-81:22),"count==N-1"
182,BREAKSTATEMENT,"",EX191.java(81:24-81:30),"break;"
183,DECLAREDREFERENCEEXPRESSION,"count",EX191.java(81:12-81:17),"count"
184,BINARYOPERATOR,"-",EX191.java(81:19-81:22),"N-1"
185,DECLAREDREFERENCEEXPRESSION,"N",EX191.java(81:19-81:20),"N"
186,LITERAL,"",EX191.java(81:21-81:22),"1"
187,DECLAREDREFERENCEEXPRESSION,"total",EX191.java(79:9-79:14),"total"
188,MEMBEREXPRESSION,"cost",EX191.java(79:18-79:24),"e.cost"
189,DECLAREDREFERENCEEXPRESSION,"count",EX191.java(80:9-80:14),"count"
190,DECLAREDREFERENCEEXPRESSION,"e",EX191.java(79:18-79:19),"e"
191,DECLAREDREFERENCEEXPRESSION,"union",EX191.java(78:11-78:16),"union"
192,METHODDECLARATION,"union",EX191.java(31:3-33:4),"void union(int x, int y){
    link(find_set(x),find_set(y));
  }"
193,MEMBEREXPRESSION,"v",EX191.java(78:21-78:24),"e.v"
194,DECLAREDREFERENCEEXPRESSION,"e",EX191.java(78:17-78:18),"e"
195,MEMBEREXPRESSION,"u",EX191.java(78:17-78:20),"e.u"
196,PARAMVARIABLEDECLARATION,"x",EX191.java(31:14-31:19),"int x"
197,DECLAREDREFERENCEEXPRESSION,"e",EX191.java(78:21-78:22),"e"
198,PARAMVARIABLEDECLARATION,"y",EX191.java(31:21-31:26),"int y"
199,MEMBERCALLEXPRESSION,"find_set",EX191.java(77:10-77:25),"S.find_set(e.u)"
200,MEMBERCALLEXPRESSION,"find_set",EX191.java(77:27-77:42),"S.find_set(e.v)"
201,DECLAREDREFERENCEEXPRESSION,"find_set",EX191.java(77:12-77:20),"find_set"
202,METHODDECLARATION,"find_set",EX191.java(27:3-30:4),"int find_set(int x){
    if(p[x]!=x) p[x] = find_set(p[x]);
    return p[x];
  }"
203,DECLAREDREFERENCEEXPRESSION,"S",EX191.java(77:27-77:28),"S"
204,MEMBEREXPRESSION,"u",EX191.java(77:21-77:24),"e.u"
205,DECLAREDREFERENCEEXPRESSION,"e",EX191.java(77:21-77:22),"e"
206,PARAMVARIABLEDECLARATION,"x",EX191.java(27:16-27:21),"int x"
207,DECLAREDREFERENCEEXPRESSION,"find_set",EX191.java(77:29-77:37),"find_set"
208,MEMBEREXPRESSION,"v",EX191.java(77:38-77:41),"e.v"
209,DECLAREDREFERENCEEXPRESSION,"e",EX191.java(77:38-77:39),"e"
210,COMPOUNDSTATEMENT,"",EX191.java(67:31-71:6),"{
      for(int k = i+1; k < N; k++){
        edges.add(new edge(i,k,distance(i,k)));
      }
    }"
211,DECLARATIONSTATEMENT,"",EX191.java(67:9-67:18),"int i = 0"
212,BINARYOPERATOR,"<",EX191.java(67:20-67:25),"i < N"
213,UNARYOPERATOR,"++",EX191.java(67:27-67:30),"i++"
214,VARIABLEDECLARATION,"i",EX191.java(67:13-67:18),"i = 0"
215,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(68:19-68:20),"i"
216,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(67:20-67:21),"i"
217,FORSTATEMENT,"",EX191.java(68:7-70:8),"for(int k = i+1; k < N; k++){
        edges.add(new edge(i,k,distance(i,k)));
      }"
218,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(67:27-67:28),"i"
219,COMPOUNDSTATEMENT,"",EX191.java(68:35-70:8),"{
        edges.add(new edge(i,k,distance(i,k)));
      }"
220,DECLARATIONSTATEMENT,"",EX191.java(68:11-68:22),"int k = i+1"
221,BINARYOPERATOR,"<",EX191.java(68:24-68:29),"k < N"
222,UNARYOPERATOR,"++",EX191.java(68:31-68:34),"k++"
223,VARIABLEDECLARATION,"k",EX191.java(68:15-68:22),"k = i+1"
224,DECLAREDREFERENCEEXPRESSION,"edges",EX191.java(69:9-69:14),"edges"
225,MEMBERCALLEXPRESSION,"add",EX191.java(69:9-69:48),"edges.add(new edge(i,k,distance(i,k)));"
226,DECLAREDREFERENCEEXPRESSION,"k",EX191.java(68:31-68:32),"k"
227,DECLAREDREFERENCEEXPRESSION,"add",EX191.java(69:15-69:18),"add"
228,NEWEXPRESSION,"",EX191.java(69:19-69:46),"new edge(i,k,distance(i,k))"
229,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(69:28-69:29),"i"
230,CONSTRUCTEXPRESSION,"",EX191.java(69:19-69:46),"new edge(i,k,distance(i,k))"
231,CONSTRUCTORDECLARATION,"edge",,""
232,CALLEXPRESSION,"distance",EX191.java(69:32-69:45),"distance(i,k)"
233,DECLAREDREFERENCEEXPRESSION,"k",EX191.java(69:30-69:31),"k"
234,PARAMVARIABLEDECLARATION,"int1",,""
235,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(69:41-69:42),"i"
236,METHODDECLARATION,"distance",,""
237,DECLAREDREFERENCEEXPRESSION,"k",EX191.java(69:43-69:44),"k"
238,PARAMVARIABLEDECLARATION,"double2",,""
239,PARAMVARIABLEDECLARATION,"int0",,""
240,PARAMVARIABLEDECLARATION,"int1",,""
241,PARAMVARIABLEDECLARATION,"int0",,""
242,DECLAREDREFERENCEEXPRESSION,"k",EX191.java(68:24-68:25),"k"
243,DECLAREDREFERENCEEXPRESSION,"N",EX191.java(68:28-68:29),"N"
244,BINARYOPERATOR,"+",EX191.java(68:19-68:22),"i+1"
245,LITERAL,"",EX191.java(68:21-68:22),"1"
246,DECLAREDREFERENCEEXPRESSION,"N",EX191.java(67:24-67:25),"N"
247,DECLAREDREFERENCEEXPRESSION,"printf",EX191.java(84:16-84:22),"printf"
248,DECLAREDREFERENCEEXPRESSION,"total",EX191.java(84:32-84:37),"total"
249,MEMBEREXPRESSION,"out",EX191.java(84:5-84:15),"System.out"
250,LITERAL,"",EX191.java(84:23-84:31),"""%.2f\n"""
251,VARIABLEDECLARATION,"this",,""
252,COMPOUNDSTATEMENT,"",EX191.java(53:32-57:4),"{
    double dx = points[k][0]-points[i][0];
    double dy = points[k][1]-points[i][1];
    return Math.sqrt(dx*dx+dy*dy);
  }"
253,PARAMVARIABLEDECLARATION,"i",EX191.java(53:19-53:24),"int i"
254,PARAMVARIABLEDECLARATION,"k",EX191.java(53:26-53:31),"int k"
255,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(54:17-54:23),"this"
256,RETURNSTATEMENT,"",EX191.java(56:5-56:35),"return Math.sqrt(dx*dx+dy*dy);"
257,DECLARATIONSTATEMENT,"",EX191.java(54:5-54:43),"double dx = points[k][0]-points[i][0];"
258,DECLARATIONSTATEMENT,"",EX191.java(55:5-55:43),"double dy = points[k][1]-points[i][1];"
259,VARIABLEDECLARATION,"dx",EX191.java(54:12-54:42),"dx = points[k][0]-points[i][0]"
260,VARIABLEDECLARATION,"dy",EX191.java(55:12-55:42),"dy = points[k][1]-points[i][1]"
261,BINARYOPERATOR,"-",EX191.java(55:17-55:42),"points[k][1]-points[i][1]"
262,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(55:17-55:29),"points[k][1]"
263,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(55:30-55:42),"points[i][1]"
264,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(55:17-55:26),"points[k]"
265,LITERAL,"",EX191.java(55:27-55:28),"1"
266,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(55:30-55:36),"this"
267,MEMBEREXPRESSION,"points",EX191.java(55:17-55:23),"points"
268,DECLAREDREFERENCEEXPRESSION,"k",EX191.java(55:24-55:25),"k"
269,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(55:17-55:23),"this"
270,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(55:30-55:39),"points[i]"
271,LITERAL,"",EX191.java(55:40-55:41),"1"
272,MEMBEREXPRESSION,"points",EX191.java(55:30-55:36),"points"
273,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(55:37-55:38),"i"
274,BINARYOPERATOR,"-",EX191.java(54:17-54:42),"points[k][0]-points[i][0]"
275,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(54:17-54:29),"points[k][0]"
276,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(54:30-54:42),"points[i][0]"
277,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(54:17-54:26),"points[k]"
278,LITERAL,"",EX191.java(54:27-54:28),"0"
279,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(54:30-54:36),"this"
280,MEMBEREXPRESSION,"points",EX191.java(54:17-54:23),"points"
281,DECLAREDREFERENCEEXPRESSION,"k",EX191.java(54:24-54:25),"k"
282,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(54:30-54:39),"points[i]"
283,LITERAL,"",EX191.java(54:40-54:41),"0"
284,MEMBEREXPRESSION,"points",EX191.java(54:30-54:36),"points"
285,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(54:37-54:38),"i"
286,DECLAREDREFERENCEEXPRESSION,"dx",EX191.java(56:22-56:24),"dx"
287,STATICCALLEXPRESSION,"sqrt",EX191.java(56:12-56:34),"Math.sqrt(dx*dx+dy*dy)"
288,BINARYOPERATOR,"+",EX191.java(56:22-56:33),"dx*dx+dy*dy"
289,BINARYOPERATOR,"*",EX191.java(56:22-56:27),"dx*dx"
290,BINARYOPERATOR,"*",EX191.java(56:28-56:33),"dy*dy"
291,DECLAREDREFERENCEEXPRESSION,"dy",EX191.java(56:28-56:30),"dy"
292,DECLAREDREFERENCEEXPRESSION,"dy",EX191.java(56:31-56:33),"dy"
293,DECLAREDREFERENCEEXPRESSION,"dx",EX191.java(56:25-56:27),"dx"
294,FIELDDECLARATION,"this",,""
295,FIELDDECLARATION,"p",EX191.java(19:3-19:11),"p"
296,FIELDDECLARATION,"rank",EX191.java(20:3-20:14),"rank"
297,METHODDECLARATION,"find_set",EX191.java(29:3-32:4),"int find_set(int x){
    if(p[x]!=x) p[x] = find_set(p[x]);
    return p[x];
  }"
298,METHODDECLARATION,"union",EX191.java(33:3-35:4),"void union(int x, int y){
    link(find_set(x),find_set(y));
  }"
299,METHODDECLARATION,"link",EX191.java(36:3-42:4),"void link(int x, int y){
    if(rank[x]>rank[y]) p[y] = x;
    else{
      p[x] = y;
      if(rank[x]==rank[y]) rank[y]++;
    }
  }"
300,CONSTRUCTORDECLARATION,"disjoint_set",EX191.java(21:3-28:4),"disjoint_set(int N){
    p = new int[N];
    rank = new int[N];
    for(int i = 0; i < N; i++){
      p[i] = i;
      rank[i] = 0;
    }
  }"
301,VARIABLEDECLARATION,"this",,""
302,COMPOUNDSTATEMENT,"",EX191.java(33:27-35:4),"{
    link(find_set(x),find_set(y));
  }"
303,PARAMVARIABLEDECLARATION,"x",EX191.java(33:14-33:19),"int x"
304,PARAMVARIABLEDECLARATION,"y",EX191.java(33:21-33:26),"int y"
305,DECLAREDREFERENCEEXPRESSION,"x",EX191.java(34:19-34:20),"x"
306,RETURNSTATEMENT,"",,""
307,CALLEXPRESSION,"link",EX191.java(34:5-34:35),"link(find_set(x),find_set(y));"
308,METHODDECLARATION,"link",EX191.java(34:3-40:4),"void link(int x, int y){
    if(rank[x]>rank[y]) p[y] = x;
    else{
      p[x] = y;
      if(rank[x]==rank[y]) rank[y]++;
    }
  }"
309,CALLEXPRESSION,"find_set",EX191.java(34:10-34:21),"find_set(x)"
310,CALLEXPRESSION,"find_set",EX191.java(34:22-34:33),"find_set(y)"
311,DECLAREDREFERENCEEXPRESSION,"y",EX191.java(34:31-34:32),"y"
312,PARAMVARIABLEDECLARATION,"y",EX191.java(34:20-34:25),"int y"
313,PARAMVARIABLEDECLARATION,"x",EX191.java(34:13-34:18),"int x"
314,VARIABLEDECLARATION,"this",,""
315,COMPOUNDSTATEMENT,"",EX191.java(36:26-42:4),"{
    if(rank[x]>rank[y]) p[y] = x;
    else{
      p[x] = y;
      if(rank[x]==rank[y]) rank[y]++;
    }
  }"
316,PARAMVARIABLEDECLARATION,"x",EX191.java(36:13-36:18),"int x"
317,PARAMVARIABLEDECLARATION,"y",EX191.java(36:20-36:25),"int y"
318,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(37:8-37:12),"this"
319,RETURNSTATEMENT,"",,""
320,IFSTATEMENT,"",EX191.java(37:5-41:6),"if(rank[x]>rank[y]) p[y] = x;
    else{
      p[x] = y;
      if(rank[x]==rank[y]) rank[y]++;
    }"
321,BINARYOPERATOR,">",EX191.java(37:8-37:23),"rank[x]>rank[y]"
322,BINARYOPERATOR,"=",EX191.java(37:25-37:34),"p[y] = x;"
323,COMPOUNDSTATEMENT,"",EX191.java(38:9-41:6),"{
      p[x] = y;
      if(rank[x]==rank[y]) rank[y]++;
    }"
324,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(37:25-37:26),"this"
325,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(39:7-39:8),"this"
326,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(37:8-37:15),"rank[x]"
327,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(37:16-37:23),"rank[y]"
328,MEMBEREXPRESSION,"rank",EX191.java(37:16-37:20),"rank"
329,DECLAREDREFERENCEEXPRESSION,"y",EX191.java(37:21-37:22),"y"
330,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(37:16-37:20),"this"
331,MEMBEREXPRESSION,"rank",EX191.java(37:8-37:12),"rank"
332,DECLAREDREFERENCEEXPRESSION,"x",EX191.java(37:13-37:14),"x"
333,BINARYOPERATOR,"=",EX191.java(39:7-39:16),"p[x] = y;"
334,IFSTATEMENT,"",EX191.java(40:7-40:38),"if(rank[x]==rank[y]) rank[y]++;"
335,UNARYOPERATOR,"++",EX191.java(40:28-40:38),"rank[y]++;"
336,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(39:7-39:11),"p[x]"
337,DECLAREDREFERENCEEXPRESSION,"y",EX191.java(39:14-39:15),"y"
338,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(40:10-40:14),"this"
339,MEMBEREXPRESSION,"p",EX191.java(39:7-39:8),"p"
340,DECLAREDREFERENCEEXPRESSION,"x",EX191.java(39:9-39:10),"x"
341,BINARYOPERATOR,"==",EX191.java(40:10-40:26),"rank[x]==rank[y]"
342,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(40:28-40:32),"this"
343,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(40:28-40:35),"rank[y]"
344,MEMBEREXPRESSION,"rank",EX191.java(40:28-40:32),"rank"
345,DECLAREDREFERENCEEXPRESSION,"y",EX191.java(40:33-40:34),"y"
346,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(40:10-40:17),"rank[x]"
347,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(40:19-40:26),"rank[y]"
348,MEMBEREXPRESSION,"rank",EX191.java(40:10-40:14),"rank"
349,DECLAREDREFERENCEEXPRESSION,"x",EX191.java(40:15-40:16),"x"
350,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(40:19-40:23),"this"
351,MEMBEREXPRESSION,"rank",EX191.java(40:19-40:23),"rank"
352,DECLAREDREFERENCEEXPRESSION,"y",EX191.java(40:24-40:25),"y"
353,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(37:25-37:29),"p[y]"
354,DECLAREDREFERENCEEXPRESSION,"x",EX191.java(37:32-37:33),"x"
355,MEMBEREXPRESSION,"p",EX191.java(37:25-37:26),"p"
356,DECLAREDREFERENCEEXPRESSION,"y",EX191.java(37:27-37:28),"y"
357,COMPOUNDSTATEMENT,"",EX191.java(21:22-28:4),"{
    p = new int[N];
    rank = new int[N];
    for(int i = 0; i < N; i++){
      p[i] = i;
      rank[i] = 0;
    }
  }"
358,PARAMVARIABLEDECLARATION,"N",EX191.java(21:16-21:21),"int N"
359,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(22:5-22:6),"this"
360,RETURNSTATEMENT,"",,""
361,BINARYOPERATOR,"=",EX191.java(22:5-22:20),"p = new int[N];"
362,BINARYOPERATOR,"=",EX191.java(23:5-23:23),"rank = new int[N];"
363,FORSTATEMENT,"",EX191.java(24:5-27:6),"for(int i = 0; i < N; i++){
      p[i] = i;
      rank[i] = 0;
    }"
364,MEMBEREXPRESSION,"p",EX191.java(22:5-22:6),"p"
365,ARRAYCREATIONEXPRESSION,"",EX191.java(22:9-22:19),"new int[N]"
366,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(23:5-23:9),"this"
367,DECLAREDREFERENCEEXPRESSION,"N",EX191.java(22:17-22:18),"N"
368,COMPOUNDSTATEMENT,"",EX191.java(24:31-27:6),"{
      p[i] = i;
      rank[i] = 0;
    }"
369,DECLARATIONSTATEMENT,"",EX191.java(24:9-24:18),"int i = 0"
370,BINARYOPERATOR,"<",EX191.java(24:20-24:25),"i < N"
371,UNARYOPERATOR,"++",EX191.java(24:27-24:30),"i++"
372,VARIABLEDECLARATION,"i",EX191.java(24:13-24:18),"i = 0"
373,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(25:7-25:8),"this"
374,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(24:20-24:21),"i"
375,BINARYOPERATOR,"=",EX191.java(25:7-25:16),"p[i] = i;"
376,BINARYOPERATOR,"=",EX191.java(26:7-26:19),"rank[i] = 0;"
377,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(24:27-24:28),"i"
378,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(26:7-26:14),"rank[i]"
379,LITERAL,"",EX191.java(26:17-26:18),"0"
380,MEMBEREXPRESSION,"rank",EX191.java(26:7-26:11),"rank"
381,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(26:12-26:13),"i"
382,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(26:7-26:11),"this"
383,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(25:7-25:11),"p[i]"
384,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(25:14-25:15),"i"
385,MEMBEREXPRESSION,"p",EX191.java(25:7-25:8),"p"
386,DECLAREDREFERENCEEXPRESSION,"i",EX191.java(25:9-25:10),"i"
387,LITERAL,"",EX191.java(24:17-24:18),"0"
388,DECLAREDREFERENCEEXPRESSION,"N",EX191.java(24:24-24:25),"N"
389,MEMBEREXPRESSION,"rank",EX191.java(23:5-23:9),"rank"
390,ARRAYCREATIONEXPRESSION,"",EX191.java(23:12-23:22),"new int[N]"
391,DECLAREDREFERENCEEXPRESSION,"N",EX191.java(23:20-23:21),"N"
392,VARIABLEDECLARATION,"this",,""
393,COMPOUNDSTATEMENT,"",EX191.java(29:22-32:4),"{
    if(p[x]!=x) p[x] = find_set(p[x]);
    return p[x];
  }"
394,PARAMVARIABLEDECLARATION,"x",EX191.java(29:16-29:21),"int x"
395,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(30:8-30:9),"this"
396,RETURNSTATEMENT,"",EX191.java(31:5-31:17),"return p[x];"
397,IFSTATEMENT,"",EX191.java(30:5-30:39),"if(p[x]!=x) p[x] = find_set(p[x]);"
398,BINARYOPERATOR,"!=",EX191.java(30:8-30:15),"p[x]!=x"
399,BINARYOPERATOR,"=",EX191.java(30:17-30:39),"p[x] = find_set(p[x]);"
400,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(30:17-30:18),"this"
401,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(31:12-31:13),"this"
402,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(30:8-30:12),"p[x]"
403,DECLAREDREFERENCEEXPRESSION,"x",EX191.java(30:14-30:15),"x"
404,MEMBEREXPRESSION,"p",EX191.java(30:8-30:9),"p"
405,DECLAREDREFERENCEEXPRESSION,"x",EX191.java(30:10-30:11),"x"
406,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(30:17-30:21),"p[x]"
407,CALLEXPRESSION,"find_set",EX191.java(30:24-30:38),"find_set(p[x])"
408,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(30:33-30:37),"p[x]"
409,MEMBEREXPRESSION,"p",EX191.java(30:33-30:34),"p"
410,DECLAREDREFERENCEEXPRESSION,"x",EX191.java(30:35-30:36),"x"
411,DECLAREDREFERENCEEXPRESSION,"this",EX191.java(30:33-30:34),"this"
412,MEMBEREXPRESSION,"p",EX191.java(30:17-30:18),"p"
413,DECLAREDREFERENCEEXPRESSION,"x",EX191.java(30:19-30:20),"x"
414,ARRAYSUBSCRIPTIONEXPRESSION,"",EX191.java(31:12-31:16),"p[x]"
415,MEMBEREXPRESSION,"p",EX191.java(31:12-31:13),"p"
416,DECLAREDREFERENCEEXPRESSION,"x",EX191.java(31:14-31:15),"x"
417,FIELDDECLARATION,"this",,""
418,METHODDECLARATION,"main",EX191.java(89:3-93:4),"public static void main(String args[]){
    Scanner kb = new Scanner(System.in);
    sol s = new sol(kb);
    s.solve();
  }"
419,CONSTRUCTORDECLARATION,"EX191",,""
420,VARIABLEDECLARATION,"this",,""
421,COMPOUNDSTATEMENT,"",EX191.java(89:41-93:4),"{
    Scanner kb = new Scanner(System.in);
    sol s = new sol(kb);
    s.solve();
  }"
422,PARAMVARIABLEDECLARATION,"args",EX191.java(89:27-89:40),"String args[]"
423,DECLAREDREFERENCEEXPRESSION,"System",EX191.java(90:30-90:36),"System"
424,RETURNSTATEMENT,"",,""
425,DECLARATIONSTATEMENT,"",EX191.java(90:5-90:41),"Scanner kb = new Scanner(System.in);"
426,DECLARATIONSTATEMENT,"",EX191.java(91:5-91:25),"sol s = new sol(kb);"
427,MEMBERCALLEXPRESSION,"solve",EX191.java(92:5-92:15),"s.solve();"
428,VARIABLEDECLARATION,"kb",EX191.java(90:13-90:40),"kb = new Scanner(System.in)"
429,VARIABLEDECLARATION,"s",EX191.java(91:9-91:24),"s = new sol(kb)"
430,DECLAREDREFERENCEEXPRESSION,"s",EX191.java(92:5-92:6),"s"
431,DECLAREDREFERENCEEXPRESSION,"kb",EX191.java(91:21-91:23),"kb"
432,DECLAREDREFERENCEEXPRESSION,"solve",EX191.java(92:7-92:12),"solve"
433,METHODDECLARATION,"solve",OrdemRara.java(21:3-46:4),"void solve(){
  	for(int i = 0; i < 26; i++) deg[i] = -1;
  	String last = kb.next();
  	deg[last.charAt(0)-'A'] = 0;
		while(true){
			String cur = kb.next();
			if(cur.equals(""#"")) break;
			int p = 0;
			int mlen = Math.min(cur.length(),last.length());
			while(p < mlen){
				if(cur.charAt(p)!=last.charAt(p)) break;
				p++;
			}
			if(p<mlen){
				int u = last.charAt(p)-'A';
				int v = cur.charAt(p)-'A';
				System.out.printf(""%c < %c\n"",last.charAt(p),cur.charAt(p));
				if(deg[u]<0) deg[u] = 0;
				if(deg[v]<0) deg[v] = 0;
				adj[u][deg[u]++] = v;
			}
			last = cur;
		}
		//print_graph();
		topologicalSort();
  }"
434,NEWEXPRESSION,"",EX191.java(90:18-90:40),"new Scanner(System.in)"
435,CONSTRUCTEXPRESSION,"",EX191.java(90:18-90:40),"new Scanner(System.in)"
436,MEMBEREXPRESSION,"in",EX191.java(90:30-90:39),"System.in"
437,NEWEXPRESSION,"",EX191.java(91:13-91:24),"new sol(kb)"
438,CONSTRUCTEXPRESSION,"",EX191.java(91:13-91:24),"new sol(kb)"
439,CONSTRUCTORDECLARATION,"sol",OrdemRara.java(16:3-16:31),"sol(Scanner kb){this.kb=kb;}"
440,PARAMVARIABLEDECLARATION,"kb",OrdemRara.java(16:7-16:17),"Scanner kb"

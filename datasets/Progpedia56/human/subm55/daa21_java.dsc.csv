id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07501365_21_201305778/DAA21.java",,""
2,RECORDDECLARATION,"DAA21",DAA21.java(4:1-52:2),"public class DAA21 {

	public static void main(String Args[]) {

		Scanner scan = new Scanner(System.in);
		double coordinates [][];
		double distances [][];
		double dist [];
		boolean arvore [];
		double cost = 0;
		int sardas = scan.nextInt();
		coordinates = new double[sardas][2];
		int n_nos = coordinates.length;
		distances    = new double[n_nos][n_nos];
		for (int j = 0; j < sardas; j++) {
			coordinates[j][0] = scan.nextDouble();
			coordinates[j][1] = scan.nextDouble();
		}
		for (int k = 0; k < n_nos; k++) {
			for (int l = 0; l < n_nos; l++) {
				double distance = Math.sqrt((Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)));
				distances[k][l] = distance;
			}
		}
		arvore = new boolean[n_nos];
		dist = new double[n_nos];
		for (int i=0; i<n_nos; i++) {
			dist[i] = Double.MAX_VALUE;
			arvore[i] = false;
		}
		dist[0] = 0;
		for (int i=0; i<n_nos; i++) {
			int  n_min = -1;
			double min = Double.MAX_VALUE;
			for (int j=0; j<n_nos; j++) {
				if(dist[j]<min && arvore[j]==false) {
					min   = dist[j];
					n_min = j;
				}
			}
			arvore[n_min] = true;
			cost += min;
			for (int j=0; j<n_nos; j++)
				if (distances[n_min][j] < dist[j])
					dist[j] = distances[n_min][j];
		}
		System.out.println(String.format(""%.2f"", cost));
	}
}"
3,INCLUDEDECLARATION,"java.util.Scanner",,""
4,FIELDDECLARATION,"this",,""
5,METHODDECLARATION,"main",DAA21.java(6:2-51:3),"public static void main(String Args[]) {

		Scanner scan = new Scanner(System.in);
		double coordinates [][];
		double distances [][];
		double dist [];
		boolean arvore [];
		double cost = 0;
		int sardas = scan.nextInt();
		coordinates = new double[sardas][2];
		int n_nos = coordinates.length;
		distances    = new double[n_nos][n_nos];
		for (int j = 0; j < sardas; j++) {
			coordinates[j][0] = scan.nextDouble();
			coordinates[j][1] = scan.nextDouble();
		}
		for (int k = 0; k < n_nos; k++) {
			for (int l = 0; l < n_nos; l++) {
				double distance = Math.sqrt((Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)));
				distances[k][l] = distance;
			}
		}
		arvore = new boolean[n_nos];
		dist = new double[n_nos];
		for (int i=0; i<n_nos; i++) {
			dist[i] = Double.MAX_VALUE;
			arvore[i] = false;
		}
		dist[0] = 0;
		for (int i=0; i<n_nos; i++) {
			int  n_min = -1;
			double min = Double.MAX_VALUE;
			for (int j=0; j<n_nos; j++) {
				if(dist[j]<min && arvore[j]==false) {
					min   = dist[j];
					n_min = j;
				}
			}
			arvore[n_min] = true;
			cost += min;
			for (int j=0; j<n_nos; j++)
				if (distances[n_min][j] < dist[j])
					dist[j] = distances[n_min][j];
		}
		System.out.println(String.format(""%.2f"", cost));
	}"
6,CONSTRUCTORDECLARATION,"DAA21",,""
7,VARIABLEDECLARATION,"this",,""
8,COMPOUNDSTATEMENT,"",DAA21.java(6:41-51:3),"{

		Scanner scan = new Scanner(System.in);
		double coordinates [][];
		double distances [][];
		double dist [];
		boolean arvore [];
		double cost = 0;
		int sardas = scan.nextInt();
		coordinates = new double[sardas][2];
		int n_nos = coordinates.length;
		distances    = new double[n_nos][n_nos];
		for (int j = 0; j < sardas; j++) {
			coordinates[j][0] = scan.nextDouble();
			coordinates[j][1] = scan.nextDouble();
		}
		for (int k = 0; k < n_nos; k++) {
			for (int l = 0; l < n_nos; l++) {
				double distance = Math.sqrt((Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)));
				distances[k][l] = distance;
			}
		}
		arvore = new boolean[n_nos];
		dist = new double[n_nos];
		for (int i=0; i<n_nos; i++) {
			dist[i] = Double.MAX_VALUE;
			arvore[i] = false;
		}
		dist[0] = 0;
		for (int i=0; i<n_nos; i++) {
			int  n_min = -1;
			double min = Double.MAX_VALUE;
			for (int j=0; j<n_nos; j++) {
				if(dist[j]<min && arvore[j]==false) {
					min   = dist[j];
					n_min = j;
				}
			}
			arvore[n_min] = true;
			cost += min;
			for (int j=0; j<n_nos; j++)
				if (distances[n_min][j] < dist[j])
					dist[j] = distances[n_min][j];
		}
		System.out.println(String.format(""%.2f"", cost));
	}"
9,PARAMVARIABLEDECLARATION,"Args",DAA21.java(6:26-6:39),"String Args[]"
10,DECLAREDREFERENCEEXPRESSION,"System",DAA21.java(8:30-8:36),"System"
11,RETURNSTATEMENT,"",,""
12,DECLARATIONSTATEMENT,"",DAA21.java(8:3-8:41),"Scanner scan = new Scanner(System.in);"
13,DECLARATIONSTATEMENT,"",DAA21.java(9:3-9:27),"double coordinates [][];"
14,DECLARATIONSTATEMENT,"",DAA21.java(10:3-10:25),"double distances [][];"
15,DECLARATIONSTATEMENT,"",DAA21.java(11:3-11:18),"double dist [];"
16,DECLARATIONSTATEMENT,"",DAA21.java(12:3-12:21),"boolean arvore [];"
17,DECLARATIONSTATEMENT,"",DAA21.java(13:3-13:19),"double cost = 0;"
18,DECLARATIONSTATEMENT,"",DAA21.java(14:3-14:31),"int sardas = scan.nextInt();"
19,BINARYOPERATOR,"=",DAA21.java(15:3-15:39),"coordinates = new double[sardas][2];"
20,DECLARATIONSTATEMENT,"",DAA21.java(16:3-16:34),"int n_nos = coordinates.length;"
21,BINARYOPERATOR,"=",DAA21.java(17:3-17:43),"distances    = new double[n_nos][n_nos];"
22,FORSTATEMENT,"",DAA21.java(18:3-21:4),"for (int j = 0; j < sardas; j++) {
			coordinates[j][0] = scan.nextDouble();
			coordinates[j][1] = scan.nextDouble();
		}"
23,FORSTATEMENT,"",DAA21.java(22:3-27:4),"for (int k = 0; k < n_nos; k++) {
			for (int l = 0; l < n_nos; l++) {
				double distance = Math.sqrt((Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)));
				distances[k][l] = distance;
			}
		}"
24,BINARYOPERATOR,"=",DAA21.java(28:3-28:31),"arvore = new boolean[n_nos];"
25,BINARYOPERATOR,"=",DAA21.java(29:3-29:28),"dist = new double[n_nos];"
26,FORSTATEMENT,"",DAA21.java(30:3-33:4),"for (int i=0; i<n_nos; i++) {
			dist[i] = Double.MAX_VALUE;
			arvore[i] = false;
		}"
27,BINARYOPERATOR,"=",DAA21.java(34:3-34:15),"dist[0] = 0;"
28,FORSTATEMENT,"",DAA21.java(35:3-49:4),"for (int i=0; i<n_nos; i++) {
			int  n_min = -1;
			double min = Double.MAX_VALUE;
			for (int j=0; j<n_nos; j++) {
				if(dist[j]<min && arvore[j]==false) {
					min   = dist[j];
					n_min = j;
				}
			}
			arvore[n_min] = true;
			cost += min;
			for (int j=0; j<n_nos; j++)
				if (distances[n_min][j] < dist[j])
					dist[j] = distances[n_min][j];
		}"
29,MEMBERCALLEXPRESSION,"println",DAA21.java(50:3-50:51),"System.out.println(String.format(""%.2f"", cost));"
30,VARIABLEDECLARATION,"scan",DAA21.java(8:11-8:40),"scan = new Scanner(System.in)"
31,VARIABLEDECLARATION,"coordinates",DAA21.java(9:10-9:26),"coordinates [][]"
32,VARIABLEDECLARATION,"distances",DAA21.java(10:10-10:24),"distances [][]"
33,VARIABLEDECLARATION,"dist",DAA21.java(11:10-11:17),"dist []"
34,VARIABLEDECLARATION,"arvore",DAA21.java(12:11-12:20),"arvore []"
35,VARIABLEDECLARATION,"cost",DAA21.java(13:10-13:18),"cost = 0"
36,VARIABLEDECLARATION,"sardas",DAA21.java(14:7-14:30),"sardas = scan.nextInt()"
37,VARIABLEDECLARATION,"n_nos",DAA21.java(16:7-16:33),"n_nos = coordinates.length"
38,UNINITIALIZEDVALUE,"Uninitialized Value",,""
39,DECLAREDREFERENCEEXPRESSION,"arvore",DAA21.java(28:3-28:9),"arvore"
40,ARRAYCREATIONEXPRESSION,"",DAA21.java(28:12-28:30),"new boolean[n_nos]"
41,DECLAREDREFERENCEEXPRESSION,"dist",DAA21.java(29:3-29:7),"dist"
42,DECLAREDREFERENCEEXPRESSION,"n_nos",DAA21.java(28:24-28:29),"n_nos"
43,DECLAREDREFERENCEEXPRESSION,"println",DAA21.java(50:14-50:21),"println"
44,STATICCALLEXPRESSION,"format",DAA21.java(50:22-50:49),"String.format(""%.2f"", cost)"
45,DECLAREDREFERENCEEXPRESSION,"cost",DAA21.java(50:44-50:48),"cost"
46,LITERAL,"",DAA21.java(50:36-50:42),"""%.2f"""
47,MEMBEREXPRESSION,"out",DAA21.java(50:3-50:13),"System.out"
48,DECLAREDREFERENCEEXPRESSION,"System",DAA21.java(50:3-50:9),"System"
49,LITERAL,"",DAA21.java(13:17-13:18),"0"
50,UNINITIALIZEDVALUE,"Uninitialized Value",,""
51,ARRAYCREATIONEXPRESSION,"",DAA21.java(29:10-29:27),"new double[n_nos]"
52,LITERAL,"",DAA21.java(30:14-30:15),"0"
53,DECLAREDREFERENCEEXPRESSION,"n_nos",DAA21.java(29:21-29:26),"n_nos"
54,COMPOUNDSTATEMENT,"",DAA21.java(35:31-49:4),"{
			int  n_min = -1;
			double min = Double.MAX_VALUE;
			for (int j=0; j<n_nos; j++) {
				if(dist[j]<min && arvore[j]==false) {
					min   = dist[j];
					n_min = j;
				}
			}
			arvore[n_min] = true;
			cost += min;
			for (int j=0; j<n_nos; j++)
				if (distances[n_min][j] < dist[j])
					dist[j] = distances[n_min][j];
		}"
55,DECLARATIONSTATEMENT,"",DAA21.java(35:8-35:15),"int i=0"
56,BINARYOPERATOR,"<",DAA21.java(35:17-35:24),"i<n_nos"
57,UNARYOPERATOR,"++",DAA21.java(35:26-35:29),"i++"
58,VARIABLEDECLARATION,"i",DAA21.java(35:12-35:15),"i=0"
59,LITERAL,"",DAA21.java(36:18-36:19),"1"
60,DECLARATIONSTATEMENT,"",DAA21.java(36:4-36:20),"int  n_min = -1;"
61,DECLARATIONSTATEMENT,"",DAA21.java(37:4-37:34),"double min = Double.MAX_VALUE;"
62,FORSTATEMENT,"",DAA21.java(38:4-43:5),"for (int j=0; j<n_nos; j++) {
				if(dist[j]<min && arvore[j]==false) {
					min   = dist[j];
					n_min = j;
				}
			}"
63,BINARYOPERATOR,"=",DAA21.java(44:4-44:25),"arvore[n_min] = true;"
64,BINARYOPERATOR,"+=",DAA21.java(45:4-45:16),"cost += min;"
65,FORSTATEMENT,"",DAA21.java(46:4-48:36),"for (int j=0; j<n_nos; j++)
				if (distances[n_min][j] < dist[j])
					dist[j] = distances[n_min][j];"
66,VARIABLEDECLARATION,"n_min",DAA21.java(36:9-36:19),"n_min = -1"
67,VARIABLEDECLARATION,"min",DAA21.java(37:11-37:33),"min = Double.MAX_VALUE"
68,DECLAREDREFERENCEEXPRESSION,"i",DAA21.java(35:26-35:27),"i"
69,DECLAREDREFERENCEEXPRESSION,"Double",DAA21.java(37:17-37:23),"Double"
70,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(44:4-44:17),"arvore[n_min]"
71,LITERAL,"",DAA21.java(44:20-44:24),"true"
72,DECLAREDREFERENCEEXPRESSION,"cost",DAA21.java(45:4-45:8),"cost"
73,DECLAREDREFERENCEEXPRESSION,"arvore",DAA21.java(44:4-44:10),"arvore"
74,DECLAREDREFERENCEEXPRESSION,"n_min",DAA21.java(44:11-44:16),"n_min"
75,UNARYOPERATOR,"-",DAA21.java(36:17-36:19),"-1"
76,MEMBEREXPRESSION,"MAX_VALUE",DAA21.java(37:17-37:33),"Double.MAX_VALUE"
77,LITERAL,"",DAA21.java(38:15-38:16),"0"
78,COMPOUNDSTATEMENT,"",DAA21.java(38:32-43:5),"{
				if(dist[j]<min && arvore[j]==false) {
					min   = dist[j];
					n_min = j;
				}
			}"
79,DECLARATIONSTATEMENT,"",DAA21.java(38:9-38:16),"int j=0"
80,BINARYOPERATOR,"<",DAA21.java(38:18-38:25),"j<n_nos"
81,UNARYOPERATOR,"++",DAA21.java(38:27-38:30),"j++"
82,VARIABLEDECLARATION,"j",DAA21.java(38:13-38:16),"j=0"
83,DECLAREDREFERENCEEXPRESSION,"dist",DAA21.java(39:8-39:12),"dist"
84,IFSTATEMENT,"",DAA21.java(39:5-42:6),"if(dist[j]<min && arvore[j]==false) {
					min   = dist[j];
					n_min = j;
				}"
85,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(38:27-38:28),"j"
86,COMPOUNDSTATEMENT,"",DAA21.java(39:41-42:6),"{
					min   = dist[j];
					n_min = j;
				}"
87,BINARYOPERATOR,"&&",DAA21.java(39:8-39:39),"dist[j]<min && arvore[j]==false"
88,DECLAREDREFERENCEEXPRESSION,"min",DAA21.java(40:6-40:9),"min"
89,BINARYOPERATOR,"=",DAA21.java(40:6-40:22),"min   = dist[j];"
90,BINARYOPERATOR,"=",DAA21.java(41:6-41:16),"n_min = j;"
91,DECLAREDREFERENCEEXPRESSION,"n_min",DAA21.java(41:6-41:11),"n_min"
92,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(41:14-41:15),"j"
93,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(40:14-40:21),"dist[j]"
94,DECLAREDREFERENCEEXPRESSION,"dist",DAA21.java(40:14-40:18),"dist"
95,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(40:19-40:20),"j"
96,BINARYOPERATOR,"<",DAA21.java(39:8-39:19),"dist[j]<min"
97,BINARYOPERATOR,"==",DAA21.java(39:23-39:39),"arvore[j]==false"
98,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(39:8-39:15),"dist[j]"
99,DECLAREDREFERENCEEXPRESSION,"min",DAA21.java(39:16-39:19),"min"
100,DECLAREDREFERENCEEXPRESSION,"arvore",DAA21.java(39:23-39:29),"arvore"
101,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(39:13-39:14),"j"
102,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(39:23-39:32),"arvore[j]"
103,LITERAL,"",DAA21.java(39:34-39:39),"false"
104,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(39:30-39:31),"j"
105,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(38:18-38:19),"j"
106,DECLAREDREFERENCEEXPRESSION,"n_nos",DAA21.java(38:20-38:25),"n_nos"
107,DECLAREDREFERENCEEXPRESSION,"min",DAA21.java(45:12-45:15),"min"
108,LITERAL,"",DAA21.java(46:15-46:16),"0"
109,IFSTATEMENT,"",DAA21.java(47:5-48:36),"if (distances[n_min][j] < dist[j])
					dist[j] = distances[n_min][j];"
110,DECLARATIONSTATEMENT,"",DAA21.java(46:9-46:16),"int j=0"
111,BINARYOPERATOR,"<",DAA21.java(46:18-46:25),"j<n_nos"
112,UNARYOPERATOR,"++",DAA21.java(46:27-46:30),"j++"
113,VARIABLEDECLARATION,"j",DAA21.java(46:13-46:16),"j=0"
114,DECLAREDREFERENCEEXPRESSION,"distances",DAA21.java(47:9-47:18),"distances"
115,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(46:27-46:28),"j"
116,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(46:18-46:19),"j"
117,BINARYOPERATOR,"=",DAA21.java(48:6-48:36),"dist[j] = distances[n_min][j];"
118,DECLAREDREFERENCEEXPRESSION,"n_nos",DAA21.java(46:20-46:25),"n_nos"
119,BINARYOPERATOR,"<",DAA21.java(47:9-47:38),"distances[n_min][j] < dist[j]"
120,DECLAREDREFERENCEEXPRESSION,"dist",DAA21.java(48:6-48:10),"dist"
121,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(47:9-47:28),"distances[n_min][j]"
122,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(47:31-47:38),"dist[j]"
123,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(47:9-47:25),"distances[n_min]"
124,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(47:26-47:27),"j"
125,DECLAREDREFERENCEEXPRESSION,"dist",DAA21.java(47:31-47:35),"dist"
126,DECLAREDREFERENCEEXPRESSION,"n_min",DAA21.java(47:19-47:24),"n_min"
127,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(47:36-47:37),"j"
128,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(48:6-48:13),"dist[j]"
129,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(48:16-48:35),"distances[n_min][j]"
130,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(48:16-48:32),"distances[n_min]"
131,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(48:33-48:34),"j"
132,DECLAREDREFERENCEEXPRESSION,"distances",DAA21.java(48:16-48:25),"distances"
133,DECLAREDREFERENCEEXPRESSION,"n_min",DAA21.java(48:26-48:31),"n_min"
134,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(48:11-48:12),"j"
135,DECLAREDREFERENCEEXPRESSION,"i",DAA21.java(35:17-35:18),"i"
136,DECLAREDREFERENCEEXPRESSION,"n_nos",DAA21.java(35:19-35:24),"n_nos"
137,LITERAL,"",DAA21.java(35:14-35:15),"0"
138,NEWEXPRESSION,"",DAA21.java(8:18-8:40),"new Scanner(System.in)"
139,CONSTRUCTEXPRESSION,"",DAA21.java(8:18-8:40),"new Scanner(System.in)"
140,MEMBEREXPRESSION,"in",DAA21.java(8:30-8:39),"System.in"
141,UNINITIALIZEDVALUE,"Uninitialized Value",,""
142,COMPOUNDSTATEMENT,"",DAA21.java(30:31-33:4),"{
			dist[i] = Double.MAX_VALUE;
			arvore[i] = false;
		}"
143,DECLARATIONSTATEMENT,"",DAA21.java(30:8-30:15),"int i=0"
144,BINARYOPERATOR,"<",DAA21.java(30:17-30:24),"i<n_nos"
145,UNARYOPERATOR,"++",DAA21.java(30:26-30:29),"i++"
146,VARIABLEDECLARATION,"i",DAA21.java(30:12-30:15),"i=0"
147,DECLAREDREFERENCEEXPRESSION,"dist",DAA21.java(31:4-31:8),"dist"
148,DECLAREDREFERENCEEXPRESSION,"dist",DAA21.java(34:3-34:7),"dist"
149,BINARYOPERATOR,"=",DAA21.java(31:4-31:31),"dist[i] = Double.MAX_VALUE;"
150,BINARYOPERATOR,"=",DAA21.java(32:4-32:22),"arvore[i] = false;"
151,DECLAREDREFERENCEEXPRESSION,"i",DAA21.java(30:26-30:27),"i"
152,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(31:4-31:11),"dist[i]"
153,MEMBEREXPRESSION,"MAX_VALUE",DAA21.java(31:14-31:30),"Double.MAX_VALUE"
154,DECLAREDREFERENCEEXPRESSION,"arvore",DAA21.java(32:4-32:10),"arvore"
155,DECLAREDREFERENCEEXPRESSION,"Double",DAA21.java(31:14-31:20),"Double"
156,DECLAREDREFERENCEEXPRESSION,"i",DAA21.java(31:9-31:10),"i"
157,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(32:4-32:13),"arvore[i]"
158,LITERAL,"",DAA21.java(32:16-32:21),"false"
159,DECLAREDREFERENCEEXPRESSION,"i",DAA21.java(32:11-32:12),"i"
160,DECLAREDREFERENCEEXPRESSION,"i",DAA21.java(30:17-30:18),"i"
161,DECLAREDREFERENCEEXPRESSION,"n_nos",DAA21.java(30:19-30:24),"n_nos"
162,DECLAREDREFERENCEEXPRESSION,"distances",DAA21.java(17:3-17:12),"distances"
163,ARRAYCREATIONEXPRESSION,"",DAA21.java(17:18-17:42),"new double[n_nos][n_nos]"
164,LITERAL,"",DAA21.java(18:16-18:17),"0"
165,DECLAREDREFERENCEEXPRESSION,"n_nos",DAA21.java(17:29-17:34),"n_nos"
166,DECLAREDREFERENCEEXPRESSION,"n_nos",DAA21.java(17:36-17:41),"n_nos"
167,COMPOUNDSTATEMENT,"",DAA21.java(22:35-27:4),"{
			for (int l = 0; l < n_nos; l++) {
				double distance = Math.sqrt((Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)));
				distances[k][l] = distance;
			}
		}"
168,DECLARATIONSTATEMENT,"",DAA21.java(22:8-22:17),"int k = 0"
169,BINARYOPERATOR,"<",DAA21.java(22:19-22:28),"k < n_nos"
170,UNARYOPERATOR,"++",DAA21.java(22:30-22:33),"k++"
171,VARIABLEDECLARATION,"k",DAA21.java(22:12-22:17),"k = 0"
172,LITERAL,"",DAA21.java(23:17-23:18),"0"
173,LITERAL,"",DAA21.java(22:16-22:17),"0"
174,DECLAREDREFERENCEEXPRESSION,"k",DAA21.java(22:19-22:20),"k"
175,DECLAREDREFERENCEEXPRESSION,"n_nos",DAA21.java(22:23-22:28),"n_nos"
176,DECLAREDREFERENCEEXPRESSION,"k",DAA21.java(22:30-22:31),"k"
177,FORSTATEMENT,"",DAA21.java(23:4-26:5),"for (int l = 0; l < n_nos; l++) {
				double distance = Math.sqrt((Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)));
				distances[k][l] = distance;
			}"
178,COMPOUNDSTATEMENT,"",DAA21.java(23:36-26:5),"{
				double distance = Math.sqrt((Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)));
				distances[k][l] = distance;
			}"
179,DECLARATIONSTATEMENT,"",DAA21.java(23:9-23:18),"int l = 0"
180,BINARYOPERATOR,"<",DAA21.java(23:20-23:29),"l < n_nos"
181,UNARYOPERATOR,"++",DAA21.java(23:31-23:34),"l++"
182,VARIABLEDECLARATION,"l",DAA21.java(23:13-23:18),"l = 0"
183,DECLAREDREFERENCEEXPRESSION,"coordinates",DAA21.java(24:43-24:54),"coordinates"
184,DECLARATIONSTATEMENT,"",DAA21.java(24:5-24:140),"double distance = Math.sqrt((Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)));"
185,BINARYOPERATOR,"=",DAA21.java(25:5-25:32),"distances[k][l] = distance;"
186,VARIABLEDECLARATION,"distance",DAA21.java(24:12-24:139),"distance = Math.sqrt((Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)))"
187,DECLAREDREFERENCEEXPRESSION,"l",DAA21.java(23:31-23:32),"l"
188,STATICCALLEXPRESSION,"sqrt",DAA21.java(24:23-24:139),"Math.sqrt((Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)))"
189,BINARYOPERATOR,"+",DAA21.java(24:34-24:137),"Math.pow(coordinates[k][0] - coordinates[l][0], 2) + Math.pow(coordinates[k][1] - coordinates[l][1], 2)"
190,STATICCALLEXPRESSION,"pow",DAA21.java(24:34-24:84),"Math.pow(coordinates[k][0] - coordinates[l][0], 2)"
191,STATICCALLEXPRESSION,"pow",DAA21.java(24:87-24:137),"Math.pow(coordinates[k][1] - coordinates[l][1], 2)"
192,DECLAREDREFERENCEEXPRESSION,"coordinates",DAA21.java(24:96-24:107),"coordinates"
193,LITERAL,"",DAA21.java(24:82-24:83),"2"
194,BINARYOPERATOR,"-",DAA21.java(24:43-24:80),"coordinates[k][0] - coordinates[l][0]"
195,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(24:43-24:60),"coordinates[k][0]"
196,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(24:63-24:80),"coordinates[l][0]"
197,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(24:43-24:57),"coordinates[k]"
198,LITERAL,"",DAA21.java(24:58-24:59),"0"
199,DECLAREDREFERENCEEXPRESSION,"coordinates",DAA21.java(24:63-24:74),"coordinates"
200,DECLAREDREFERENCEEXPRESSION,"k",DAA21.java(24:55-24:56),"k"
201,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(24:63-24:77),"coordinates[l]"
202,LITERAL,"",DAA21.java(24:78-24:79),"0"
203,DECLAREDREFERENCEEXPRESSION,"l",DAA21.java(24:75-24:76),"l"
204,LITERAL,"",DAA21.java(24:135-24:136),"2"
205,BINARYOPERATOR,"-",DAA21.java(24:96-24:133),"coordinates[k][1] - coordinates[l][1]"
206,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(24:96-24:113),"coordinates[k][1]"
207,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(24:116-24:133),"coordinates[l][1]"
208,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(24:96-24:110),"coordinates[k]"
209,LITERAL,"",DAA21.java(24:111-24:112),"1"
210,DECLAREDREFERENCEEXPRESSION,"coordinates",DAA21.java(24:116-24:127),"coordinates"
211,DECLAREDREFERENCEEXPRESSION,"k",DAA21.java(24:108-24:109),"k"
212,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(24:116-24:130),"coordinates[l]"
213,LITERAL,"",DAA21.java(24:131-24:132),"1"
214,DECLAREDREFERENCEEXPRESSION,"l",DAA21.java(24:128-24:129),"l"
215,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(25:5-25:20),"distances[k][l]"
216,DECLAREDREFERENCEEXPRESSION,"distance",DAA21.java(25:23-25:31),"distance"
217,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(25:5-25:17),"distances[k]"
218,DECLAREDREFERENCEEXPRESSION,"l",DAA21.java(25:18-25:19),"l"
219,DECLAREDREFERENCEEXPRESSION,"distances",DAA21.java(25:5-25:14),"distances"
220,DECLAREDREFERENCEEXPRESSION,"k",DAA21.java(25:15-25:16),"k"
221,DECLAREDREFERENCEEXPRESSION,"l",DAA21.java(23:20-23:21),"l"
222,DECLAREDREFERENCEEXPRESSION,"n_nos",DAA21.java(23:24-23:29),"n_nos"
223,DECLAREDREFERENCEEXPRESSION,"coordinates",DAA21.java(15:3-15:14),"coordinates"
224,ARRAYCREATIONEXPRESSION,"",DAA21.java(15:17-15:38),"new double[sardas][2]"
225,DECLAREDREFERENCEEXPRESSION,"coordinates",DAA21.java(16:15-16:26),"coordinates"
226,DECLAREDREFERENCEEXPRESSION,"sardas",DAA21.java(15:28-15:34),"sardas"
227,LITERAL,"",DAA21.java(15:36-15:37),"2"
228,COMPOUNDSTATEMENT,"",DAA21.java(18:36-21:4),"{
			coordinates[j][0] = scan.nextDouble();
			coordinates[j][1] = scan.nextDouble();
		}"
229,DECLARATIONSTATEMENT,"",DAA21.java(18:8-18:17),"int j = 0"
230,BINARYOPERATOR,"<",DAA21.java(18:19-18:29),"j < sardas"
231,UNARYOPERATOR,"++",DAA21.java(18:31-18:34),"j++"
232,VARIABLEDECLARATION,"j",DAA21.java(18:12-18:17),"j = 0"
233,DECLAREDREFERENCEEXPRESSION,"coordinates",DAA21.java(19:4-19:15),"coordinates"
234,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(18:19-18:20),"j"
235,DECLAREDREFERENCEEXPRESSION,"sardas",DAA21.java(18:23-18:29),"sardas"
236,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(18:31-18:32),"j"
237,BINARYOPERATOR,"=",DAA21.java(19:4-19:42),"coordinates[j][0] = scan.nextDouble();"
238,BINARYOPERATOR,"=",DAA21.java(20:4-20:42),"coordinates[j][1] = scan.nextDouble();"
239,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(19:4-19:21),"coordinates[j][0]"
240,MEMBERCALLEXPRESSION,"nextDouble",DAA21.java(19:24-19:41),"scan.nextDouble()"
241,DECLAREDREFERENCEEXPRESSION,"coordinates",DAA21.java(20:4-20:15),"coordinates"
242,DECLAREDREFERENCEEXPRESSION,"nextDouble",DAA21.java(19:29-19:39),"nextDouble"
243,DECLAREDREFERENCEEXPRESSION,"scan",DAA21.java(19:24-19:28),"scan"
244,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(19:4-19:18),"coordinates[j]"
245,LITERAL,"",DAA21.java(19:19-19:20),"0"
246,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(19:16-19:17),"j"
247,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(20:4-20:21),"coordinates[j][1]"
248,MEMBERCALLEXPRESSION,"nextDouble",DAA21.java(20:24-20:41),"scan.nextDouble()"
249,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(20:4-20:18),"coordinates[j]"
250,LITERAL,"",DAA21.java(20:19-20:20),"1"
251,DECLAREDREFERENCEEXPRESSION,"scan",DAA21.java(20:24-20:28),"scan"
252,DECLAREDREFERENCEEXPRESSION,"j",DAA21.java(20:16-20:17),"j"
253,DECLAREDREFERENCEEXPRESSION,"nextDouble",DAA21.java(20:29-20:39),"nextDouble"
254,UNINITIALIZEDVALUE,"Uninitialized Value",,""
255,DECLAREDREFERENCEEXPRESSION,"scan",DAA21.java(14:16-14:20),"scan"
256,ARRAYSUBSCRIPTIONEXPRESSION,"",DAA21.java(34:3-34:10),"dist[0]"
257,LITERAL,"",DAA21.java(34:13-34:14),"0"
258,LITERAL,"",DAA21.java(34:8-34:9),"0"
259,MEMBERCALLEXPRESSION,"nextInt",DAA21.java(14:16-14:30),"scan.nextInt()"
260,DECLAREDREFERENCEEXPRESSION,"nextInt",DAA21.java(14:21-14:28),"nextInt"
261,MEMBEREXPRESSION,"length",DAA21.java(16:15-16:33),"coordinates.length"

id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07502083_21_201304648/sarda.java",,""
2,RECORDDECLARATION,"no",sarda.java(4:2-17:2),"class no{
    public double x;
    public double y;
    public double dist[];
    public boolean arvore;

     public  no(double x, double y, int n){
	this.x=x;
	this.y=y;
	this.dist=new double[n];
	this.arvore = false;
    }

}"
3,RECORDDECLARATION,"sarda",sarda.java(25:1-95:2),"class sarda{
    public static void main(String args[]){
	LinkedList<Integer> posicoes = new LinkedList<Integer>();
	Scanner stdin = new Scanner(System.in);
	int n= stdin.nextInt();
	no[] g= new no[n];
	for(int i=0; i<n; i++){
	    g[i]= new no(stdin.nextDouble(),stdin.nextDouble(), n);
	}

	for(int i=0; i<n; i++){
	    for(int j=0; j<n; j++){
		g[i].dist[j] = Math.sqrt(Math.pow(Math.abs(g[i].x-g[j].x),2)+ Math.pow(Math.abs(g[i].y-g[j].y),2));
		    }
	}
		    
	/*		    
		for(int i=0; i<n; i++){
	    	System.out.println(""("" + g[i].x + "" "" + g[i].y + "")"");
	    for(int j=0; j<n; j++){
			System.out.print(String.format( ""%.2f "",g[i].dist[j]));
	    }
	    System.out.println();
	}
	*/
    

	
        
    
    
   
	double min = 100000.0;
	int posi=0;
	int posj=0;
	double soma=0;
	int findno=0;
	int j=0;
	posicoes.add(0);
	g[0].arvore=true;
	for(int i=0; i<n-1; i++){
	for(int pos :posicoes){
	    //	System.out.println(pos+ "" "");
		//	System.out.println();
		for( j=0; j<n; j++){
		    if(g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false){
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }
		}
	}
	//	System.out.println(min);
	posicoes.add(posj);
	    min=10000.0;
	    soma=soma+g[posi].dist[posj];
	    //   System.out.println(soma+ ""!"");
	     findno++;
	     g[posj].arvore=true;
	    g[posi].dist[posj]=0;
	    g[posj].dist[posi]=0;
	   
	}
	System.out.printf(""%.2f\n"",soma);
}

	  
}"
4,INCLUDEDECLARATION,"java.io",,""
5,INCLUDEDECLARATION,"java.util",,""
6,FIELDDECLARATION,"this",,""
7,METHODDECLARATION,"main",sarda.java(26:5-92:2),"public static void main(String args[]){
	LinkedList<Integer> posicoes = new LinkedList<Integer>();
	Scanner stdin = new Scanner(System.in);
	int n= stdin.nextInt();
	no[] g= new no[n];
	for(int i=0; i<n; i++){
	    g[i]= new no(stdin.nextDouble(),stdin.nextDouble(), n);
	}

	for(int i=0; i<n; i++){
	    for(int j=0; j<n; j++){
		g[i].dist[j] = Math.sqrt(Math.pow(Math.abs(g[i].x-g[j].x),2)+ Math.pow(Math.abs(g[i].y-g[j].y),2));
		    }
	}
		    
	/*		    
		for(int i=0; i<n; i++){
	    	System.out.println(""("" + g[i].x + "" "" + g[i].y + "")"");
	    for(int j=0; j<n; j++){
			System.out.print(String.format( ""%.2f "",g[i].dist[j]));
	    }
	    System.out.println();
	}
	*/
    

	
        
    
    
   
	double min = 100000.0;
	int posi=0;
	int posj=0;
	double soma=0;
	int findno=0;
	int j=0;
	posicoes.add(0);
	g[0].arvore=true;
	for(int i=0; i<n-1; i++){
	for(int pos :posicoes){
	    //	System.out.println(pos+ "" "");
		//	System.out.println();
		for( j=0; j<n; j++){
		    if(g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false){
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }
		}
	}
	//	System.out.println(min);
	posicoes.add(posj);
	    min=10000.0;
	    soma=soma+g[posi].dist[posj];
	    //   System.out.println(soma+ ""!"");
	     findno++;
	     g[posj].arvore=true;
	    g[posi].dist[posj]=0;
	    g[posj].dist[posi]=0;
	   
	}
	System.out.printf(""%.2f\n"",soma);
}"
8,CONSTRUCTORDECLARATION,"sarda",,""
9,CONSTRUCTORDECLARATION,"sarda",,""
10,VARIABLEDECLARATION,"this",,""
11,COMPOUNDSTATEMENT,"",sarda.java(26:43-92:2),"{
	LinkedList<Integer> posicoes = new LinkedList<Integer>();
	Scanner stdin = new Scanner(System.in);
	int n= stdin.nextInt();
	no[] g= new no[n];
	for(int i=0; i<n; i++){
	    g[i]= new no(stdin.nextDouble(),stdin.nextDouble(), n);
	}

	for(int i=0; i<n; i++){
	    for(int j=0; j<n; j++){
		g[i].dist[j] = Math.sqrt(Math.pow(Math.abs(g[i].x-g[j].x),2)+ Math.pow(Math.abs(g[i].y-g[j].y),2));
		    }
	}
		    
	/*		    
		for(int i=0; i<n; i++){
	    	System.out.println(""("" + g[i].x + "" "" + g[i].y + "")"");
	    for(int j=0; j<n; j++){
			System.out.print(String.format( ""%.2f "",g[i].dist[j]));
	    }
	    System.out.println();
	}
	*/
    

	
        
    
    
   
	double min = 100000.0;
	int posi=0;
	int posj=0;
	double soma=0;
	int findno=0;
	int j=0;
	posicoes.add(0);
	g[0].arvore=true;
	for(int i=0; i<n-1; i++){
	for(int pos :posicoes){
	    //	System.out.println(pos+ "" "");
		//	System.out.println();
		for( j=0; j<n; j++){
		    if(g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false){
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }
		}
	}
	//	System.out.println(min);
	posicoes.add(posj);
	    min=10000.0;
	    soma=soma+g[posi].dist[posj];
	    //   System.out.println(soma+ ""!"");
	     findno++;
	     g[posj].arvore=true;
	    g[posi].dist[posj]=0;
	    g[posj].dist[posi]=0;
	   
	}
	System.out.printf(""%.2f\n"",soma);
}"
12,PARAMVARIABLEDECLARATION,"args",sarda.java(26:29-26:42),"String args[]"
13,CONSTRUCTEXPRESSION,"",sarda.java(27:33-27:58),"new LinkedList<Integer>()"
14,RETURNSTATEMENT,"",,""
15,DECLARATIONSTATEMENT,"",sarda.java(27:2-27:59),"LinkedList<Integer> posicoes = new LinkedList<Integer>();"
16,DECLARATIONSTATEMENT,"",sarda.java(28:2-28:41),"Scanner stdin = new Scanner(System.in);"
17,DECLARATIONSTATEMENT,"",sarda.java(29:2-29:25),"int n= stdin.nextInt();"
18,DECLARATIONSTATEMENT,"",sarda.java(30:2-30:20),"no[] g= new no[n];"
19,FORSTATEMENT,"",sarda.java(31:2-33:3),"for(int i=0; i<n; i++){
	    g[i]= new no(stdin.nextDouble(),stdin.nextDouble(), n);
	}"
20,FORSTATEMENT,"",sarda.java(35:2-39:3),"for(int i=0; i<n; i++){
	    for(int j=0; j<n; j++){
		g[i].dist[j] = Math.sqrt(Math.pow(Math.abs(g[i].x-g[j].x),2)+ Math.pow(Math.abs(g[i].y-g[j].y),2));
		    }
	}"
21,DECLARATIONSTATEMENT,"",sarda.java(57:2-57:24),"double min = 100000.0;"
22,DECLARATIONSTATEMENT,"",sarda.java(58:2-58:13),"int posi=0;"
23,DECLARATIONSTATEMENT,"",sarda.java(59:2-59:13),"int posj=0;"
24,DECLARATIONSTATEMENT,"",sarda.java(60:2-60:16),"double soma=0;"
25,DECLARATIONSTATEMENT,"",sarda.java(61:2-61:15),"int findno=0;"
26,DECLARATIONSTATEMENT,"",sarda.java(62:2-62:10),"int j=0;"
27,MEMBERCALLEXPRESSION,"add",sarda.java(63:2-63:18),"posicoes.add(0);"
28,BINARYOPERATOR,"=",sarda.java(64:2-64:19),"g[0].arvore=true;"
29,FORSTATEMENT,"",sarda.java(65:2-90:3),"for(int i=0; i<n-1; i++){
	for(int pos :posicoes){
	    //	System.out.println(pos+ "" "");
		//	System.out.println();
		for( j=0; j<n; j++){
		    if(g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false){
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }
		}
	}
	//	System.out.println(min);
	posicoes.add(posj);
	    min=10000.0;
	    soma=soma+g[posi].dist[posj];
	    //   System.out.println(soma+ ""!"");
	     findno++;
	     g[posj].arvore=true;
	    g[posi].dist[posj]=0;
	    g[posj].dist[posi]=0;
	   
	}"
30,MEMBERCALLEXPRESSION,"printf",sarda.java(91:2-91:35),"System.out.printf(""%.2f\n"",soma);"
31,VARIABLEDECLARATION,"posicoes",sarda.java(27:22-27:58),"posicoes = new LinkedList<Integer>()"
32,VARIABLEDECLARATION,"stdin",sarda.java(28:10-28:40),"stdin = new Scanner(System.in)"
33,VARIABLEDECLARATION,"n",sarda.java(29:6-29:24),"n= stdin.nextInt()"
34,VARIABLEDECLARATION,"g",sarda.java(30:7-30:19),"g= new no[n]"
35,VARIABLEDECLARATION,"min",sarda.java(57:9-57:23),"min = 100000.0"
36,VARIABLEDECLARATION,"posi",sarda.java(58:6-58:12),"posi=0"
37,VARIABLEDECLARATION,"posj",sarda.java(59:6-59:12),"posj=0"
38,VARIABLEDECLARATION,"soma",sarda.java(60:9-60:15),"soma=0"
39,VARIABLEDECLARATION,"findno",sarda.java(61:6-61:14),"findno=0"
40,VARIABLEDECLARATION,"j",sarda.java(62:6-62:9),"j=0"
41,DECLAREDREFERENCEEXPRESSION,"stdin",sarda.java(29:9-29:14),"stdin"
42,LITERAL,"",sarda.java(57:15-57:23),"100000.0"
43,DECLAREDREFERENCEEXPRESSION,"add",sarda.java(63:11-63:14),"add"
44,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(64:2-64:3),"g"
45,LITERAL,"",sarda.java(63:15-63:16),"0"
46,DECLAREDREFERENCEEXPRESSION,"posicoes",sarda.java(63:2-63:10),"posicoes"
47,DECLAREDREFERENCEEXPRESSION,"n",sarda.java(30:17-30:18),"n"
48,MEMBEREXPRESSION,"arvore",sarda.java(64:2-64:13),"g[0].arvore"
49,LITERAL,"",sarda.java(64:14-64:18),"true"
50,LITERAL,"",sarda.java(65:12-65:13),"0"
51,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(64:2-64:6),"g[0]"
52,LITERAL,"",sarda.java(64:4-64:5),"0"
53,LITERAL,"",sarda.java(31:12-31:13),"0"
54,COMPOUNDSTATEMENT,"",sarda.java(35:24-39:3),"{
	    for(int j=0; j<n; j++){
		g[i].dist[j] = Math.sqrt(Math.pow(Math.abs(g[i].x-g[j].x),2)+ Math.pow(Math.abs(g[i].y-g[j].y),2));
		    }
	}"
55,DECLARATIONSTATEMENT,"",sarda.java(35:6-35:13),"int i=0"
56,BINARYOPERATOR,"<",sarda.java(35:15-35:18),"i<n"
57,UNARYOPERATOR,"++",sarda.java(35:20-35:23),"i++"
58,VARIABLEDECLARATION,"i",sarda.java(35:10-35:13),"i=0"
59,LITERAL,"",sarda.java(36:16-36:17),"0"
60,DECLAREDREFERENCEEXPRESSION,"i",sarda.java(35:20-35:21),"i"
61,DECLAREDREFERENCEEXPRESSION,"i",sarda.java(35:15-35:16),"i"
62,LITERAL,"",sarda.java(35:12-35:13),"0"
63,FORSTATEMENT,"",sarda.java(36:6-38:8),"for(int j=0; j<n; j++){
		g[i].dist[j] = Math.sqrt(Math.pow(Math.abs(g[i].x-g[j].x),2)+ Math.pow(Math.abs(g[i].y-g[j].y),2));
		    }"
64,COMPOUNDSTATEMENT,"",sarda.java(36:28-38:8),"{
		g[i].dist[j] = Math.sqrt(Math.pow(Math.abs(g[i].x-g[j].x),2)+ Math.pow(Math.abs(g[i].y-g[j].y),2));
		    }"
65,DECLARATIONSTATEMENT,"",sarda.java(36:10-36:17),"int j=0"
66,BINARYOPERATOR,"<",sarda.java(36:19-36:22),"j<n"
67,UNARYOPERATOR,"++",sarda.java(36:24-36:27),"j++"
68,VARIABLEDECLARATION,"j",sarda.java(36:14-36:17),"j=0"
69,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(37:3-37:4),"g"
70,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(36:24-36:25),"j"
71,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(36:19-36:20),"j"
72,BINARYOPERATOR,"=",sarda.java(37:3-37:102),"g[i].dist[j] = Math.sqrt(Math.pow(Math.abs(g[i].x-g[j].x),2)+ Math.pow(Math.abs(g[i].y-g[j].y),2));"
73,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(37:3-37:15),"g[i].dist[j]"
74,STATICCALLEXPRESSION,"sqrt",sarda.java(37:18-37:101),"Math.sqrt(Math.pow(Math.abs(g[i].x-g[j].x),2)+ Math.pow(Math.abs(g[i].y-g[j].y),2))"
75,MEMBEREXPRESSION,"dist",sarda.java(37:3-37:12),"g[i].dist"
76,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(37:13-37:14),"j"
77,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(37:46-37:47),"g"
78,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(37:3-37:7),"g[i]"
79,DECLAREDREFERENCEEXPRESSION,"i",sarda.java(37:5-37:6),"i"
80,BINARYOPERATOR,"+",sarda.java(37:28-37:100),"Math.pow(Math.abs(g[i].x-g[j].x),2)+ Math.pow(Math.abs(g[i].y-g[j].y),2)"
81,STATICCALLEXPRESSION,"pow",sarda.java(37:28-37:63),"Math.pow(Math.abs(g[i].x-g[j].x),2)"
82,STATICCALLEXPRESSION,"pow",sarda.java(37:65-37:100),"Math.pow(Math.abs(g[i].y-g[j].y),2)"
83,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(37:83-37:84),"g"
84,LITERAL,"",sarda.java(37:61-37:62),"2"
85,STATICCALLEXPRESSION,"abs",sarda.java(37:37-37:60),"Math.abs(g[i].x-g[j].x)"
86,BINARYOPERATOR,"-",sarda.java(37:46-37:59),"g[i].x-g[j].x"
87,MEMBEREXPRESSION,"x",sarda.java(37:46-37:52),"g[i].x"
88,MEMBEREXPRESSION,"x",sarda.java(37:53-37:59),"g[j].x"
89,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(37:53-37:57),"g[j]"
90,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(37:53-37:54),"g"
91,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(37:55-37:56),"j"
92,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(37:46-37:50),"g[i]"
93,DECLAREDREFERENCEEXPRESSION,"i",sarda.java(37:48-37:49),"i"
94,LITERAL,"",sarda.java(37:98-37:99),"2"
95,STATICCALLEXPRESSION,"abs",sarda.java(37:74-37:97),"Math.abs(g[i].y-g[j].y)"
96,BINARYOPERATOR,"-",sarda.java(37:83-37:96),"g[i].y-g[j].y"
97,MEMBEREXPRESSION,"y",sarda.java(37:83-37:89),"g[i].y"
98,MEMBEREXPRESSION,"y",sarda.java(37:90-37:96),"g[j].y"
99,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(37:83-37:87),"g[i]"
100,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(37:90-37:91),"g"
101,DECLAREDREFERENCEEXPRESSION,"i",sarda.java(37:85-37:86),"i"
102,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(37:90-37:94),"g[j]"
103,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(37:92-37:93),"j"
104,DECLAREDREFERENCEEXPRESSION,"n",sarda.java(36:21-36:22),"n"
105,DECLAREDREFERENCEEXPRESSION,"n",sarda.java(35:17-35:18),"n"
106,COMPOUNDSTATEMENT,"",sarda.java(31:24-33:3),"{
	    g[i]= new no(stdin.nextDouble(),stdin.nextDouble(), n);
	}"
107,DECLARATIONSTATEMENT,"",sarda.java(31:6-31:13),"int i=0"
108,BINARYOPERATOR,"<",sarda.java(31:15-31:18),"i<n"
109,UNARYOPERATOR,"++",sarda.java(31:20-31:23),"i++"
110,VARIABLEDECLARATION,"i",sarda.java(31:10-31:13),"i=0"
111,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(32:6-32:7),"g"
112,DECLAREDREFERENCEEXPRESSION,"i",sarda.java(31:15-31:16),"i"
113,BINARYOPERATOR,"=",sarda.java(32:6-32:61),"g[i]= new no(stdin.nextDouble(),stdin.nextDouble(), n);"
114,DECLAREDREFERENCEEXPRESSION,"i",sarda.java(31:20-31:21),"i"
115,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(32:6-32:10),"g[i]"
116,NEWEXPRESSION,"",sarda.java(32:12-32:60),"new no(stdin.nextDouble(),stdin.nextDouble(), n)"
117,DECLAREDREFERENCEEXPRESSION,"i",sarda.java(32:8-32:9),"i"
118,DECLAREDREFERENCEEXPRESSION,"stdin",sarda.java(32:19-32:24),"stdin"
119,CONSTRUCTEXPRESSION,"",sarda.java(32:12-32:60),"new no(stdin.nextDouble(),stdin.nextDouble(), n)"
120,CONSTRUCTORDECLARATION,"no",,""
121,DECLAREDREFERENCEEXPRESSION,"n",sarda.java(32:58-32:59),"n"
122,MEMBERCALLEXPRESSION,"nextDouble",sarda.java(32:19-32:37),"stdin.nextDouble()"
123,DECLAREDREFERENCEEXPRESSION,"nextDouble",sarda.java(32:25-32:35),"nextDouble"
124,PARAMVARIABLEDECLARATION,"double0",,""
125,DECLAREDREFERENCEEXPRESSION,"stdin",sarda.java(32:38-32:43),"stdin"
126,MEMBERCALLEXPRESSION,"nextDouble",sarda.java(32:38-32:56),"stdin.nextDouble()"
127,DECLAREDREFERENCEEXPRESSION,"nextDouble",sarda.java(32:44-32:54),"nextDouble"
128,PARAMVARIABLEDECLARATION,"double1",,""
129,PARAMVARIABLEDECLARATION,"int2",,""
130,DECLAREDREFERENCEEXPRESSION,"n",sarda.java(31:17-31:18),"n"
131,LITERAL,"",sarda.java(61:13-61:14),"0"
132,LITERAL,"",sarda.java(59:11-59:12),"0"
133,LITERAL,"",sarda.java(62:8-62:9),"0"
134,LITERAL,"",sarda.java(58:11-58:12),"0"
135,NEWEXPRESSION,"",sarda.java(27:33-27:58),"new LinkedList<Integer>()"
136,LITERAL,"",sarda.java(60:14-60:15),"0"
137,DECLAREDREFERENCEEXPRESSION,"System",sarda.java(28:30-28:36),"System"
138,NEWEXPRESSION,"",sarda.java(28:18-28:40),"new Scanner(System.in)"
139,CONSTRUCTEXPRESSION,"",sarda.java(28:18-28:40),"new Scanner(System.in)"
140,MEMBEREXPRESSION,"in",sarda.java(28:30-28:39),"System.in"
141,MEMBERCALLEXPRESSION,"nextInt",sarda.java(29:9-29:24),"stdin.nextInt()"
142,DECLAREDREFERENCEEXPRESSION,"nextInt",sarda.java(29:15-29:22),"nextInt"
143,ARRAYCREATIONEXPRESSION,"",sarda.java(30:10-30:19),"new no[n]"
144,DECLAREDREFERENCEEXPRESSION,"printf",sarda.java(91:13-91:19),"printf"
145,DECLAREDREFERENCEEXPRESSION,"soma",sarda.java(91:29-91:33),"soma"
146,MEMBEREXPRESSION,"out",sarda.java(91:2-91:12),"System.out"
147,DECLAREDREFERENCEEXPRESSION,"System",sarda.java(91:2-91:8),"System"
148,LITERAL,"",sarda.java(91:20-91:28),"""%.2f\n"""
149,COMPOUNDSTATEMENT,"",sarda.java(65:26-90:3),"{
	for(int pos :posicoes){
	    //	System.out.println(pos+ "" "");
		//	System.out.println();
		for( j=0; j<n; j++){
		    if(g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false){
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }
		}
	}
	//	System.out.println(min);
	posicoes.add(posj);
	    min=10000.0;
	    soma=soma+g[posi].dist[posj];
	    //   System.out.println(soma+ ""!"");
	     findno++;
	     g[posj].arvore=true;
	    g[posi].dist[posj]=0;
	    g[posj].dist[posi]=0;
	   
	}"
150,DECLARATIONSTATEMENT,"",sarda.java(65:6-65:13),"int i=0"
151,BINARYOPERATOR,"<",sarda.java(65:15-65:20),"i<n-1"
152,UNARYOPERATOR,"++",sarda.java(65:22-65:25),"i++"
153,VARIABLEDECLARATION,"i",sarda.java(65:10-65:13),"i=0"
154,DECLAREDREFERENCEEXPRESSION,"posicoes",sarda.java(66:15-66:23),"posicoes"
155,DECLAREDREFERENCEEXPRESSION,"i",sarda.java(65:15-65:16),"i"
156,BINARYOPERATOR,"-",sarda.java(65:17-65:20),"n-1"
157,DECLAREDREFERENCEEXPRESSION,"n",sarda.java(65:17-65:18),"n"
158,LITERAL,"",sarda.java(65:19-65:20),"1"
159,DECLAREDREFERENCEEXPRESSION,"i",sarda.java(65:22-65:23),"i"
160,FOREACHSTATEMENT,"",sarda.java(66:2-79:3),"for(int pos :posicoes){
	    //	System.out.println(pos+ "" "");
		//	System.out.println();
		for( j=0; j<n; j++){
		    if(g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false){
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }
		}
	}"
161,MEMBERCALLEXPRESSION,"add",sarda.java(81:2-81:21),"posicoes.add(posj);"
162,BINARYOPERATOR,"=",sarda.java(82:6-82:18),"min=10000.0;"
163,BINARYOPERATOR,"=",sarda.java(83:6-83:35),"soma=soma+g[posi].dist[posj];"
164,UNARYOPERATOR,"++",sarda.java(85:7-85:16),"findno++;"
165,BINARYOPERATOR,"=",sarda.java(86:7-86:27),"g[posj].arvore=true;"
166,BINARYOPERATOR,"=",sarda.java(87:6-87:27),"g[posi].dist[posj]=0;"
167,BINARYOPERATOR,"=",sarda.java(88:6-88:27),"g[posj].dist[posi]=0;"
168,MEMBEREXPRESSION,"arvore",sarda.java(86:7-86:21),"g[posj].arvore"
169,LITERAL,"",sarda.java(86:22-86:26),"true"
170,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(87:6-87:7),"g"
171,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(86:7-86:14),"g[posj]"
172,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(86:7-86:8),"g"
173,DECLAREDREFERENCEEXPRESSION,"posj",sarda.java(86:9-86:13),"posj"
174,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(87:6-87:24),"g[posi].dist[posj]"
175,LITERAL,"",sarda.java(87:25-87:26),"0"
176,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(88:6-88:7),"g"
177,MEMBEREXPRESSION,"dist",sarda.java(87:6-87:18),"g[posi].dist"
178,DECLAREDREFERENCEEXPRESSION,"posj",sarda.java(87:19-87:23),"posj"
179,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(87:6-87:13),"g[posi]"
180,DECLAREDREFERENCEEXPRESSION,"posi",sarda.java(87:8-87:12),"posi"
181,DECLAREDREFERENCEEXPRESSION,"add",sarda.java(81:11-81:14),"add"
182,DECLAREDREFERENCEEXPRESSION,"min",sarda.java(82:6-82:9),"min"
183,DECLAREDREFERENCEEXPRESSION,"posj",sarda.java(81:15-81:19),"posj"
184,DECLAREDREFERENCEEXPRESSION,"posicoes",sarda.java(81:2-81:10),"posicoes"
185,LITERAL,"",sarda.java(82:10-82:17),"10000.0"
186,DECLAREDREFERENCEEXPRESSION,"soma",sarda.java(83:6-83:10),"soma"
187,BINARYOPERATOR,"+",sarda.java(83:11-83:34),"soma+g[posi].dist[posj]"
188,DECLAREDREFERENCEEXPRESSION,"findno",sarda.java(85:7-85:13),"findno"
189,DECLAREDREFERENCEEXPRESSION,"soma",sarda.java(83:11-83:15),"soma"
190,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(83:16-83:34),"g[posi].dist[posj]"
191,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(83:16-83:17),"g"
192,MEMBEREXPRESSION,"dist",sarda.java(83:16-83:28),"g[posi].dist"
193,DECLAREDREFERENCEEXPRESSION,"posj",sarda.java(83:29-83:33),"posj"
194,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(83:16-83:23),"g[posi]"
195,DECLAREDREFERENCEEXPRESSION,"posi",sarda.java(83:18-83:22),"posi"
196,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(88:6-88:24),"g[posj].dist[posi]"
197,LITERAL,"",sarda.java(88:25-88:26),"0"
198,MEMBEREXPRESSION,"dist",sarda.java(88:6-88:18),"g[posj].dist"
199,DECLAREDREFERENCEEXPRESSION,"posi",sarda.java(88:19-88:23),"posi"
200,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(88:6-88:13),"g[posj]"
201,DECLAREDREFERENCEEXPRESSION,"posj",sarda.java(88:8-88:12),"posj"
202,DECLARATIONSTATEMENT,"",sarda.java(66:6-66:13),"int pos"
203,COMPOUNDSTATEMENT,"",sarda.java(66:24-79:3),"{
	    //	System.out.println(pos+ "" "");
		//	System.out.println();
		for( j=0; j<n; j++){
		    if(g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false){
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }
		}
	}"
204,VARIABLEDECLARATION,"pos",sarda.java(66:10-66:13),"pos"
205,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(69:8-69:9),"j"
206,UNINITIALIZEDVALUE,"Uninitialized Value",,""
207,FORSTATEMENT,"",sarda.java(69:3-78:4),"for( j=0; j<n; j++){
		    if(g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false){
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }
		}"
208,COMPOUNDSTATEMENT,"",sarda.java(69:22-78:4),"{
		    if(g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false){
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }
		}"
209,BINARYOPERATOR,"=",sarda.java(69:8-69:11),"j=0"
210,BINARYOPERATOR,"<",sarda.java(69:13-69:16),"j<n"
211,UNARYOPERATOR,"++",sarda.java(69:18-69:21),"j++"
212,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(70:10-70:11),"g"
213,LITERAL,"",sarda.java(69:10-69:11),"0"
214,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(69:13-69:14),"j"
215,DECLAREDREFERENCEEXPRESSION,"n",sarda.java(69:15-69:16),"n"
216,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(69:18-69:19),"j"
217,IFSTATEMENT,"",sarda.java(70:7-77:8),"if(g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false){
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }"
218,COMPOUNDSTATEMENT,"",sarda.java(70:72-77:8),"{
		
			min=g[pos].dist[j];
			//		System.out.println(min);
			posi=pos;
			posj=j;
			//	System.out.println(j+""!!"");
		    }"
219,BINARYOPERATOR,"&&",sarda.java(70:10-70:71),"g[pos].dist[j]<min && g[pos].dist[j]!=0 && g[j].arvore==false"
220,DECLAREDREFERENCEEXPRESSION,"min",sarda.java(72:4-72:7),"min"
221,BINARYOPERATOR,"&&",sarda.java(70:10-70:49),"g[pos].dist[j]<min && g[pos].dist[j]!=0"
222,BINARYOPERATOR,"==",sarda.java(70:53-70:71),"g[j].arvore==false"
223,MEMBEREXPRESSION,"arvore",sarda.java(70:53-70:64),"g[j].arvore"
224,LITERAL,"",sarda.java(70:66-70:71),"false"
225,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(70:53-70:57),"g[j]"
226,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(70:53-70:54),"g"
227,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(70:55-70:56),"j"
228,BINARYOPERATOR,"<",sarda.java(70:10-70:28),"g[pos].dist[j]<min"
229,BINARYOPERATOR,"!=",sarda.java(70:32-70:49),"g[pos].dist[j]!=0"
230,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(70:32-70:46),"g[pos].dist[j]"
231,LITERAL,"",sarda.java(70:48-70:49),"0"
232,MEMBEREXPRESSION,"dist",sarda.java(70:32-70:43),"g[pos].dist"
233,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(70:44-70:45),"j"
234,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(70:32-70:38),"g[pos]"
235,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(70:32-70:33),"g"
236,DECLAREDREFERENCEEXPRESSION,"pos",sarda.java(70:34-70:37),"pos"
237,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(70:10-70:24),"g[pos].dist[j]"
238,DECLAREDREFERENCEEXPRESSION,"min",sarda.java(70:25-70:28),"min"
239,MEMBEREXPRESSION,"dist",sarda.java(70:10-70:21),"g[pos].dist"
240,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(70:22-70:23),"j"
241,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(70:10-70:16),"g[pos]"
242,DECLAREDREFERENCEEXPRESSION,"pos",sarda.java(70:12-70:15),"pos"
243,BINARYOPERATOR,"=",sarda.java(72:4-72:23),"min=g[pos].dist[j];"
244,BINARYOPERATOR,"=",sarda.java(74:4-74:13),"posi=pos;"
245,BINARYOPERATOR,"=",sarda.java(75:4-75:11),"posj=j;"
246,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(72:8-72:22),"g[pos].dist[j]"
247,DECLAREDREFERENCEEXPRESSION,"posi",sarda.java(74:4-74:8),"posi"
248,MEMBEREXPRESSION,"dist",sarda.java(72:8-72:19),"g[pos].dist"
249,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(72:20-72:21),"j"
250,ARRAYSUBSCRIPTIONEXPRESSION,"",sarda.java(72:8-72:14),"g[pos]"
251,DECLAREDREFERENCEEXPRESSION,"g",sarda.java(72:8-72:9),"g"
252,DECLAREDREFERENCEEXPRESSION,"pos",sarda.java(72:10-72:13),"pos"
253,DECLAREDREFERENCEEXPRESSION,"posj",sarda.java(75:4-75:8),"posj"
254,DECLAREDREFERENCEEXPRESSION,"j",sarda.java(75:9-75:10),"j"
255,DECLAREDREFERENCEEXPRESSION,"pos",sarda.java(74:9-74:12),"pos"
256,PARAMVARIABLEDECLARATION,"double0",,""
257,PARAMVARIABLEDECLARATION,"double1",,""
258,CONSTRUCTEXPRESSION,"",nopqueue.java(9:10-9:58),"new sarda(input.nextDouble(),input.nextDouble())"
259,CONSTRUCTEXPRESSION,"",eww.java(9:10-9:58),"new sarda(input.nextDouble(),input.nextDouble())"
260,CONSTRUCTEXPRESSION,"",eww.java(9:10-9:58),"new sarda(input.nextDouble(),input.nextDouble())"
261,MEMBERCALLEXPRESSION,"nextDouble",nopqueue.java(9:39-9:57),"input.nextDouble()"
262,MEMBERCALLEXPRESSION,"nextDouble",eww.java(9:39-9:57),"input.nextDouble()"
263,MEMBERCALLEXPRESSION,"nextDouble",eww.java(9:39-9:57),"input.nextDouble()"
264,MEMBERCALLEXPRESSION,"nextDouble",eww.java(9:20-9:38),"input.nextDouble()"
265,MEMBERCALLEXPRESSION,"nextDouble",nopqueue.java(9:20-9:38),"input.nextDouble()"
266,MEMBERCALLEXPRESSION,"nextDouble",eww.java(9:20-9:38),"input.nextDouble()"
267,FIELDDECLARATION,"this",,""
268,FIELDDECLARATION,"x",sarda.java(5:5-5:21),"x"
269,FIELDDECLARATION,"y",sarda.java(6:5-6:21),"y"
270,FIELDDECLARATION,"dist",sarda.java(7:5-7:26),"dist"
271,FIELDDECLARATION,"arvore",sarda.java(8:5-8:27),"arvore"
272,CONSTRUCTORDECLARATION,"no",sarda.java(10:6-15:6),"public  no(double x, double y, int n){
	this.x=x;
	this.y=y;
	this.dist=new double[n];
	this.arvore = false;
    }"
273,COMPOUNDSTATEMENT,"",sarda.java(10:43-15:6),"{
	this.x=x;
	this.y=y;
	this.dist=new double[n];
	this.arvore = false;
    }"
274,PARAMVARIABLEDECLARATION,"x",sarda.java(10:17-10:25),"double x"
275,PARAMVARIABLEDECLARATION,"y",sarda.java(10:27-10:35),"double y"
276,PARAMVARIABLEDECLARATION,"n",sarda.java(10:37-10:42),"int n"
277,DECLAREDREFERENCEEXPRESSION,"this",sarda.java(11:2-11:6),"this"
278,RETURNSTATEMENT,"",,""
279,BINARYOPERATOR,"=",sarda.java(11:2-11:11),"this.x=x;"
280,BINARYOPERATOR,"=",sarda.java(12:2-12:11),"this.y=y;"
281,BINARYOPERATOR,"=",sarda.java(13:2-13:26),"this.dist=new double[n];"
282,BINARYOPERATOR,"=",sarda.java(14:2-14:22),"this.arvore = false;"
283,MEMBEREXPRESSION,"arvore",sarda.java(14:2-14:13),"this.arvore"
284,LITERAL,"",sarda.java(14:16-14:21),"false"
285,DECLAREDREFERENCEEXPRESSION,"this",sarda.java(14:2-14:6),"this"
286,MEMBEREXPRESSION,"x",sarda.java(11:2-11:8),"this.x"
287,DECLAREDREFERENCEEXPRESSION,"x",sarda.java(11:9-11:10),"x"
288,DECLAREDREFERENCEEXPRESSION,"this",sarda.java(12:2-12:6),"this"
289,MEMBEREXPRESSION,"y",sarda.java(12:2-12:8),"this.y"
290,DECLAREDREFERENCEEXPRESSION,"y",sarda.java(12:9-12:10),"y"
291,DECLAREDREFERENCEEXPRESSION,"this",sarda.java(13:2-13:6),"this"
292,MEMBEREXPRESSION,"dist",sarda.java(13:2-13:11),"this.dist"
293,ARRAYCREATIONEXPRESSION,"",sarda.java(13:12-13:25),"new double[n]"
294,DECLAREDREFERENCEEXPRESSION,"n",sarda.java(13:23-13:24),"n"

id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000056/submissions/07501442_21_201308363/P24.java",,""
2,RECORDDECLARATION,"Sarda",P24.java(3:1-15:2),"class Sarda {
	double x, y;  // coordenadas
	double dist;  // distancia Ã  MST
	boolean used; // ja foi usado ou nao

	Sarda(double x ,double y){
		this.x = x;
		this.y = y;
		used = false;   // inicializar como nao usado 
		dist = 999999;  // inicializar distancia ao maximo
	}

}"
3,RECORDDECLARATION,"P24",P24.java(17:1-92:2),"class P24 {

	public static void main(String[] args) {

		//Iniciar o scanner
		Scanner teclado = new Scanner(System.in);

 		//Ler o numero de sardas
		int nS = teclado.nextInt();

		//Matrix de distancias
		double distancias[][] = new double[nS][nS];

		//Vector para Sardas
		Sarda sardas[] = new Sarda[nS];


		//Ler as Sardas
		for(int i = 0; i <nS;i++){
			double x = teclado.nextDouble();
			double y = teclado.nextDouble();
			sardas[i] = new Sarda(x,y);
		}

		//Calcular as distancias entre todas as sardas
		for (int i = 0; i < nS ;i++ ) {
			for (int j = i + 1; j< nS ;j++ ) {

				double x1 = sardas[i].x;
				double x2 = sardas[j].x;
				double y1 = sardas[i].y;
				double y2 = sardas[j].y;

				double dist = Math.sqrt( Math.pow(x2-x1,2) + Math.pow(y2-y1,2) );
				distancias[i][j] = distancias[j][i] = dist;
			}
		}

		//Imprimir resposta		
		double mst = prim(sardas[0], sardas, nS, distancias);
		System.out.printf(""%.2f\n"",mst);

	}


	public static double prim(Sarda r, Sarda[] sardas,int nS, double distancias[][]){

		double custo = 0.0;
		r.dist = 0;
		int u = 0;

		for (int i=0;i<nS;i++) {

			double min = 9999999;

			for (int j=0;j<nS ;j++ ) {
				if ( (sardas[j].used == false) && (sardas[j].dist ) < min ){ min = sardas[j].dist ; u = j; }
			}

			custo+= min;
			sardas[u].used = true;

			//System.out.println(""u: "" + u + "" min:"" + min);
			
			for (int v=0;v<nS ;v++ ) {
				if ( (sardas[v].used == false) && (distancias[u][v] ) < sardas[v].dist ){ sardas[v].dist = distancias[u][v]; }
			}


		}

		return custo;
	
	}

}"
4,INCLUDEDECLARATION,"java.util",,""
5,FIELDDECLARATION,"this",,""
6,METHODDECLARATION,"main",P24.java(19:2-59:3),"public static void main(String[] args) {

		//Iniciar o scanner
		Scanner teclado = new Scanner(System.in);

 		//Ler o numero de sardas
		int nS = teclado.nextInt();

		//Matrix de distancias
		double distancias[][] = new double[nS][nS];

		//Vector para Sardas
		Sarda sardas[] = new Sarda[nS];


		//Ler as Sardas
		for(int i = 0; i <nS;i++){
			double x = teclado.nextDouble();
			double y = teclado.nextDouble();
			sardas[i] = new Sarda(x,y);
		}

		//Calcular as distancias entre todas as sardas
		for (int i = 0; i < nS ;i++ ) {
			for (int j = i + 1; j< nS ;j++ ) {

				double x1 = sardas[i].x;
				double x2 = sardas[j].x;
				double y1 = sardas[i].y;
				double y2 = sardas[j].y;

				double dist = Math.sqrt( Math.pow(x2-x1,2) + Math.pow(y2-y1,2) );
				distancias[i][j] = distancias[j][i] = dist;
			}
		}

		//Imprimir resposta		
		double mst = prim(sardas[0], sardas, nS, distancias);
		System.out.printf(""%.2f\n"",mst);

	}"
7,METHODDECLARATION,"prim",P24.java(62:2-90:3),"public static double prim(Sarda r, Sarda[] sardas,int nS, double distancias[][]){

		double custo = 0.0;
		r.dist = 0;
		int u = 0;

		for (int i=0;i<nS;i++) {

			double min = 9999999;

			for (int j=0;j<nS ;j++ ) {
				if ( (sardas[j].used == false) && (sardas[j].dist ) < min ){ min = sardas[j].dist ; u = j; }
			}

			custo+= min;
			sardas[u].used = true;

			//System.out.println(""u: "" + u + "" min:"" + min);
			
			for (int v=0;v<nS ;v++ ) {
				if ( (sardas[v].used == false) && (distancias[u][v] ) < sardas[v].dist ){ sardas[v].dist = distancias[u][v]; }
			}


		}

		return custo;
	
	}"
8,CONSTRUCTORDECLARATION,"P24",,""
9,VARIABLEDECLARATION,"this",,""
10,COMPOUNDSTATEMENT,"",P24.java(19:41-59:3),"{

		//Iniciar o scanner
		Scanner teclado = new Scanner(System.in);

 		//Ler o numero de sardas
		int nS = teclado.nextInt();

		//Matrix de distancias
		double distancias[][] = new double[nS][nS];

		//Vector para Sardas
		Sarda sardas[] = new Sarda[nS];


		//Ler as Sardas
		for(int i = 0; i <nS;i++){
			double x = teclado.nextDouble();
			double y = teclado.nextDouble();
			sardas[i] = new Sarda(x,y);
		}

		//Calcular as distancias entre todas as sardas
		for (int i = 0; i < nS ;i++ ) {
			for (int j = i + 1; j< nS ;j++ ) {

				double x1 = sardas[i].x;
				double x2 = sardas[j].x;
				double y1 = sardas[i].y;
				double y2 = sardas[j].y;

				double dist = Math.sqrt( Math.pow(x2-x1,2) + Math.pow(y2-y1,2) );
				distancias[i][j] = distancias[j][i] = dist;
			}
		}

		//Imprimir resposta		
		double mst = prim(sardas[0], sardas, nS, distancias);
		System.out.printf(""%.2f\n"",mst);

	}"
11,PARAMVARIABLEDECLARATION,"args",P24.java(19:26-19:39),"String[] args"
12,DECLAREDREFERENCEEXPRESSION,"System",P24.java(22:33-22:39),"System"
13,RETURNSTATEMENT,"",,""
14,DECLARATIONSTATEMENT,"",P24.java(22:3-22:44),"Scanner teclado = new Scanner(System.in);"
15,DECLARATIONSTATEMENT,"",P24.java(25:3-25:30),"int nS = teclado.nextInt();"
16,DECLARATIONSTATEMENT,"",P24.java(28:3-28:46),"double distancias[][] = new double[nS][nS];"
17,DECLARATIONSTATEMENT,"",P24.java(31:3-31:34),"Sarda sardas[] = new Sarda[nS];"
18,FORSTATEMENT,"",P24.java(35:3-39:4),"for(int i = 0; i <nS;i++){
			double x = teclado.nextDouble();
			double y = teclado.nextDouble();
			sardas[i] = new Sarda(x,y);
		}"
19,FORSTATEMENT,"",P24.java(42:3-53:4),"for (int i = 0; i < nS ;i++ ) {
			for (int j = i + 1; j< nS ;j++ ) {

				double x1 = sardas[i].x;
				double x2 = sardas[j].x;
				double y1 = sardas[i].y;
				double y2 = sardas[j].y;

				double dist = Math.sqrt( Math.pow(x2-x1,2) + Math.pow(y2-y1,2) );
				distancias[i][j] = distancias[j][i] = dist;
			}
		}"
20,DECLARATIONSTATEMENT,"",P24.java(56:3-56:56),"double mst = prim(sardas[0], sardas, nS, distancias);"
21,MEMBERCALLEXPRESSION,"printf",P24.java(57:3-57:35),"System.out.printf(""%.2f\n"",mst);"
22,VARIABLEDECLARATION,"teclado",P24.java(22:11-22:43),"teclado = new Scanner(System.in)"
23,VARIABLEDECLARATION,"nS",P24.java(25:7-25:29),"nS = teclado.nextInt()"
24,VARIABLEDECLARATION,"distancias",P24.java(28:10-28:45),"distancias[][] = new double[nS][nS]"
25,VARIABLEDECLARATION,"sardas",P24.java(31:9-31:33),"sardas[] = new Sarda[nS]"
26,VARIABLEDECLARATION,"mst",P24.java(56:10-56:55),"mst = prim(sardas[0], sardas, nS, distancias)"
27,COMPOUNDSTATEMENT,"",P24.java(42:33-53:4),"{
			for (int j = i + 1; j< nS ;j++ ) {

				double x1 = sardas[i].x;
				double x2 = sardas[j].x;
				double y1 = sardas[i].y;
				double y2 = sardas[j].y;

				double dist = Math.sqrt( Math.pow(x2-x1,2) + Math.pow(y2-y1,2) );
				distancias[i][j] = distancias[j][i] = dist;
			}
		}"
28,DECLARATIONSTATEMENT,"",P24.java(42:8-42:17),"int i = 0"
29,BINARYOPERATOR,"<",P24.java(42:19-42:25),"i < nS"
30,UNARYOPERATOR,"++",P24.java(42:27-42:30),"i++"
31,VARIABLEDECLARATION,"i",P24.java(42:12-42:17),"i = 0"
32,DECLAREDREFERENCEEXPRESSION,"i",P24.java(43:17-43:18),"i"
33,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(56:21-56:27),"sardas"
34,FORSTATEMENT,"",P24.java(43:4-52:5),"for (int j = i + 1; j< nS ;j++ ) {

				double x1 = sardas[i].x;
				double x2 = sardas[j].x;
				double y1 = sardas[i].y;
				double y2 = sardas[j].y;

				double dist = Math.sqrt( Math.pow(x2-x1,2) + Math.pow(y2-y1,2) );
				distancias[i][j] = distancias[j][i] = dist;
			}"
35,DECLAREDREFERENCEEXPRESSION,"i",P24.java(42:27-42:28),"i"
36,COMPOUNDSTATEMENT,"",P24.java(43:37-52:5),"{

				double x1 = sardas[i].x;
				double x2 = sardas[j].x;
				double y1 = sardas[i].y;
				double y2 = sardas[j].y;

				double dist = Math.sqrt( Math.pow(x2-x1,2) + Math.pow(y2-y1,2) );
				distancias[i][j] = distancias[j][i] = dist;
			}"
37,DECLARATIONSTATEMENT,"",P24.java(43:9-43:22),"int j = i + 1"
38,BINARYOPERATOR,"<",P24.java(43:24-43:29),"j< nS"
39,UNARYOPERATOR,"++",P24.java(43:31-43:34),"j++"
40,VARIABLEDECLARATION,"j",P24.java(43:13-43:22),"j = i + 1"
41,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(45:17-45:23),"sardas"
42,BINARYOPERATOR,"+",P24.java(43:17-43:22),"i + 1"
43,LITERAL,"",P24.java(43:21-43:22),"1"
44,DECLAREDREFERENCEEXPRESSION,"j",P24.java(43:24-43:25),"j"
45,DECLAREDREFERENCEEXPRESSION,"nS",P24.java(43:27-43:29),"nS"
46,DECLARATIONSTATEMENT,"",P24.java(45:5-45:29),"double x1 = sardas[i].x;"
47,DECLARATIONSTATEMENT,"",P24.java(46:5-46:29),"double x2 = sardas[j].x;"
48,DECLARATIONSTATEMENT,"",P24.java(47:5-47:29),"double y1 = sardas[i].y;"
49,DECLARATIONSTATEMENT,"",P24.java(48:5-48:29),"double y2 = sardas[j].y;"
50,DECLARATIONSTATEMENT,"",P24.java(50:5-50:70),"double dist = Math.sqrt( Math.pow(x2-x1,2) + Math.pow(y2-y1,2) );"
51,BINARYOPERATOR,"=",P24.java(51:5-51:48),"distancias[i][j] = distancias[j][i] = dist;"
52,VARIABLEDECLARATION,"x1",P24.java(45:12-45:28),"x1 = sardas[i].x"
53,VARIABLEDECLARATION,"x2",P24.java(46:12-46:28),"x2 = sardas[j].x"
54,VARIABLEDECLARATION,"y1",P24.java(47:12-47:28),"y1 = sardas[i].y"
55,VARIABLEDECLARATION,"y2",P24.java(48:12-48:28),"y2 = sardas[j].y"
56,VARIABLEDECLARATION,"dist",P24.java(50:12-50:69),"dist = Math.sqrt( Math.pow(x2-x1,2) + Math.pow(y2-y1,2) )"
57,DECLAREDREFERENCEEXPRESSION,"j",P24.java(43:31-43:32),"j"
58,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(47:17-47:23),"sardas"
59,MEMBEREXPRESSION,"x",P24.java(46:17-46:28),"sardas[j].x"
60,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(46:17-46:26),"sardas[j]"
61,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(46:17-46:23),"sardas"
62,DECLAREDREFERENCEEXPRESSION,"j",P24.java(46:24-46:25),"j"
63,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(48:17-48:23),"sardas"
64,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(51:5-51:21),"distancias[i][j]"
65,BINARYOPERATOR,"=",P24.java(51:24-51:47),"distancias[j][i] = dist"
66,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(51:5-51:18),"distancias[i]"
67,DECLAREDREFERENCEEXPRESSION,"j",P24.java(51:19-51:20),"j"
68,DECLAREDREFERENCEEXPRESSION,"distancias",P24.java(51:24-51:34),"distancias"
69,DECLAREDREFERENCEEXPRESSION,"distancias",P24.java(51:5-51:15),"distancias"
70,DECLAREDREFERENCEEXPRESSION,"i",P24.java(51:16-51:17),"i"
71,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(51:24-51:40),"distancias[j][i]"
72,DECLAREDREFERENCEEXPRESSION,"dist",P24.java(51:43-51:47),"dist"
73,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(51:24-51:37),"distancias[j]"
74,DECLAREDREFERENCEEXPRESSION,"i",P24.java(51:38-51:39),"i"
75,DECLAREDREFERENCEEXPRESSION,"j",P24.java(51:35-51:36),"j"
76,STATICCALLEXPRESSION,"sqrt",P24.java(50:19-50:69),"Math.sqrt( Math.pow(x2-x1,2) + Math.pow(y2-y1,2) )"
77,BINARYOPERATOR,"+",P24.java(50:30-50:67),"Math.pow(x2-x1,2) + Math.pow(y2-y1,2)"
78,STATICCALLEXPRESSION,"pow",P24.java(50:30-50:47),"Math.pow(x2-x1,2)"
79,STATICCALLEXPRESSION,"pow",P24.java(50:50-50:67),"Math.pow(y2-y1,2)"
80,LITERAL,"",P24.java(50:65-50:66),"2"
81,BINARYOPERATOR,"-",P24.java(50:59-50:64),"y2-y1"
82,DECLAREDREFERENCEEXPRESSION,"y2",P24.java(50:59-50:61),"y2"
83,DECLAREDREFERENCEEXPRESSION,"y1",P24.java(50:62-50:64),"y1"
84,LITERAL,"",P24.java(50:45-50:46),"2"
85,BINARYOPERATOR,"-",P24.java(50:39-50:44),"x2-x1"
86,DECLAREDREFERENCEEXPRESSION,"x2",P24.java(50:39-50:41),"x2"
87,DECLAREDREFERENCEEXPRESSION,"x1",P24.java(50:42-50:44),"x1"
88,MEMBEREXPRESSION,"y",P24.java(47:17-47:28),"sardas[i].y"
89,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(47:17-47:26),"sardas[i]"
90,DECLAREDREFERENCEEXPRESSION,"i",P24.java(47:24-47:25),"i"
91,MEMBEREXPRESSION,"y",P24.java(48:17-48:28),"sardas[j].y"
92,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(48:17-48:26),"sardas[j]"
93,DECLAREDREFERENCEEXPRESSION,"j",P24.java(48:24-48:25),"j"
94,MEMBEREXPRESSION,"x",P24.java(45:17-45:28),"sardas[i].x"
95,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(45:17-45:26),"sardas[i]"
96,DECLAREDREFERENCEEXPRESSION,"i",P24.java(45:24-45:25),"i"
97,DECLAREDREFERENCEEXPRESSION,"i",P24.java(42:19-42:20),"i"
98,DECLAREDREFERENCEEXPRESSION,"nS",P24.java(42:23-42:25),"nS"
99,LITERAL,"",P24.java(42:16-42:17),"0"
100,NEWEXPRESSION,"",P24.java(22:21-22:43),"new Scanner(System.in)"
101,CONSTRUCTEXPRESSION,"",P24.java(22:21-22:43),"new Scanner(System.in)"
102,MEMBEREXPRESSION,"in",P24.java(22:33-22:42),"System.in"
103,DECLAREDREFERENCEEXPRESSION,"nS",P24.java(31:30-31:32),"nS"
104,DECLAREDREFERENCEEXPRESSION,"teclado",P24.java(25:12-25:19),"teclado"
105,COMPOUNDSTATEMENT,"",P24.java(35:28-39:4),"{
			double x = teclado.nextDouble();
			double y = teclado.nextDouble();
			sardas[i] = new Sarda(x,y);
		}"
106,DECLARATIONSTATEMENT,"",P24.java(35:7-35:16),"int i = 0"
107,BINARYOPERATOR,"<",P24.java(35:18-35:23),"i <nS"
108,UNARYOPERATOR,"++",P24.java(35:24-35:27),"i++"
109,VARIABLEDECLARATION,"i",P24.java(35:11-35:16),"i = 0"
110,DECLAREDREFERENCEEXPRESSION,"teclado",P24.java(36:15-36:22),"teclado"
111,LITERAL,"",P24.java(35:15-35:16),"0"
112,DECLAREDREFERENCEEXPRESSION,"i",P24.java(35:24-35:25),"i"
113,DECLAREDREFERENCEEXPRESSION,"i",P24.java(35:18-35:19),"i"
114,DECLAREDREFERENCEEXPRESSION,"nS",P24.java(35:21-35:23),"nS"
115,DECLARATIONSTATEMENT,"",P24.java(36:4-36:36),"double x = teclado.nextDouble();"
116,DECLARATIONSTATEMENT,"",P24.java(37:4-37:36),"double y = teclado.nextDouble();"
117,BINARYOPERATOR,"=",P24.java(38:4-38:31),"sardas[i] = new Sarda(x,y);"
118,VARIABLEDECLARATION,"x",P24.java(36:11-36:35),"x = teclado.nextDouble()"
119,VARIABLEDECLARATION,"y",P24.java(37:11-37:35),"y = teclado.nextDouble()"
120,MEMBERCALLEXPRESSION,"nextDouble",P24.java(37:15-37:35),"teclado.nextDouble()"
121,DECLAREDREFERENCEEXPRESSION,"nextDouble",P24.java(37:23-37:33),"nextDouble"
122,DECLAREDREFERENCEEXPRESSION,"teclado",P24.java(37:15-37:22),"teclado"
123,MEMBERCALLEXPRESSION,"nextDouble",P24.java(36:15-36:35),"teclado.nextDouble()"
124,DECLAREDREFERENCEEXPRESSION,"nextDouble",P24.java(36:23-36:33),"nextDouble"
125,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(38:4-38:13),"sardas[i]"
126,NEWEXPRESSION,"",P24.java(38:16-38:30),"new Sarda(x,y)"
127,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(38:4-38:10),"sardas"
128,DECLAREDREFERENCEEXPRESSION,"i",P24.java(38:11-38:12),"i"
129,DECLAREDREFERENCEEXPRESSION,"x",P24.java(38:26-38:27),"x"
130,CONSTRUCTEXPRESSION,"",P24.java(38:16-38:30),"new Sarda(x,y)"
131,CONSTRUCTORDECLARATION,"Sarda",P24.java(8:2-13:3),"Sarda(double x ,double y){
		this.x = x;
		this.y = y;
		used = false;
		dist = 999999;
	}"
132,DECLAREDREFERENCEEXPRESSION,"y",P24.java(38:28-38:29),"y"
133,PARAMVARIABLEDECLARATION,"y",P24.java(8:18-8:26),"double y"
134,PARAMVARIABLEDECLARATION,"x",P24.java(8:8-8:16),"double x"
135,ARRAYCREATIONEXPRESSION,"",P24.java(28:27-28:45),"new double[nS][nS]"
136,DECLAREDREFERENCEEXPRESSION,"nS",P24.java(28:38-28:40),"nS"
137,DECLAREDREFERENCEEXPRESSION,"nS",P24.java(28:42-28:44),"nS"
138,DECLAREDREFERENCEEXPRESSION,"System",P24.java(57:3-57:9),"System"
139,DECLAREDREFERENCEEXPRESSION,"printf",P24.java(57:14-57:20),"printf"
140,DECLAREDREFERENCEEXPRESSION,"mst",P24.java(57:30-57:33),"mst"
141,LITERAL,"",P24.java(57:21-57:29),"""%.2f\n"""
142,MEMBEREXPRESSION,"out",P24.java(57:3-57:13),"System.out"
143,MEMBERCALLEXPRESSION,"nextInt",P24.java(25:12-25:29),"teclado.nextInt()"
144,DECLAREDREFERENCEEXPRESSION,"nextInt",P24.java(25:20-25:27),"nextInt"
145,ARRAYCREATIONEXPRESSION,"",P24.java(31:20-31:33),"new Sarda[nS]"
146,CALLEXPRESSION,"prim",P24.java(56:16-56:55),"prim(sardas[0], sardas, nS, distancias)"
147,METHODDECLARATION,"prim",P24.java(66:2-99:3),"public static double prim(Sarda r, Sarda[] sardas,int nS, double distancias[][]){

		double custo = 0.0;

		r.dist = 0;

		int u = 0;


		for (int i=0;i<nS;i++) {

			double min = 9999999;

			for (int j=0;j<nS ;j++ ) {
				if ( (sardas[j].used == false) && (sardas[j].dist ) < min ){   min = sardas[j].dist ; u = j; }
			}

			//System.out.println(""u: "" + u + "" min:"" + min);

			sardas[u].used = true;

			custo+= min; 
			

			for (int v=0;v<nS ;v++ ) {
				if ( (sardas[v].used == false) && (distancias[u][v] ) < sardas[v].dist ){ sardas[v].dist = distancias[u][v];  }
			}


		}

		return custo;
	
	}"
148,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(56:21-56:30),"sardas[0]"
149,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(56:32-56:38),"sardas"
150,DECLAREDREFERENCEEXPRESSION,"nS",P24.java(56:40-56:42),"nS"
151,DECLAREDREFERENCEEXPRESSION,"distancias",P24.java(56:44-56:54),"distancias"
152,PARAMVARIABLEDECLARATION,"nS",P24.java(66:52-66:58),"int nS"
153,PARAMVARIABLEDECLARATION,"sardas",P24.java(66:37-66:51),"Sarda[] sardas"
154,PARAMVARIABLEDECLARATION,"distancias",P24.java(66:60-66:81),"double distancias[][]"
155,LITERAL,"",P24.java(56:28-56:29),"0"
156,PARAMVARIABLEDECLARATION,"r",P24.java(66:28-66:35),"Sarda r"
157,VARIABLEDECLARATION,"this",,""
158,COMPOUNDSTATEMENT,"",P24.java(62:82-90:3),"{

		double custo = 0.0;
		r.dist = 0;
		int u = 0;

		for (int i=0;i<nS;i++) {

			double min = 9999999;

			for (int j=0;j<nS ;j++ ) {
				if ( (sardas[j].used == false) && (sardas[j].dist ) < min ){ min = sardas[j].dist ; u = j; }
			}

			custo+= min;
			sardas[u].used = true;

			//System.out.println(""u: "" + u + "" min:"" + min);
			
			for (int v=0;v<nS ;v++ ) {
				if ( (sardas[v].used == false) && (distancias[u][v] ) < sardas[v].dist ){ sardas[v].dist = distancias[u][v]; }
			}


		}

		return custo;
	
	}"
159,PARAMVARIABLEDECLARATION,"r",P24.java(62:28-62:35),"Sarda r"
160,PARAMVARIABLEDECLARATION,"sardas",P24.java(62:37-62:51),"Sarda[] sardas"
161,PARAMVARIABLEDECLARATION,"nS",P24.java(62:52-62:58),"int nS"
162,PARAMVARIABLEDECLARATION,"distancias",P24.java(62:60-62:81),"double distancias[][]"
163,LITERAL,"",P24.java(64:18-64:21),"0.0"
164,RETURNSTATEMENT,"",P24.java(88:3-88:16),"return custo;"
165,DECLARATIONSTATEMENT,"",P24.java(64:3-64:22),"double custo = 0.0;"
166,BINARYOPERATOR,"=",P24.java(65:3-65:14),"r.dist = 0;"
167,DECLARATIONSTATEMENT,"",P24.java(66:3-66:13),"int u = 0;"
168,FORSTATEMENT,"",P24.java(68:3-86:4),"for (int i=0;i<nS;i++) {

			double min = 9999999;

			for (int j=0;j<nS ;j++ ) {
				if ( (sardas[j].used == false) && (sardas[j].dist ) < min ){ min = sardas[j].dist ; u = j; }
			}

			custo+= min;
			sardas[u].used = true;

			//System.out.println(""u: "" + u + "" min:"" + min);
			
			for (int v=0;v<nS ;v++ ) {
				if ( (sardas[v].used == false) && (distancias[u][v] ) < sardas[v].dist ){ sardas[v].dist = distancias[u][v]; }
			}


		}"
169,VARIABLEDECLARATION,"custo",P24.java(64:10-64:21),"custo = 0.0"
170,VARIABLEDECLARATION,"u",P24.java(66:7-66:12),"u = 0"
171,DECLAREDREFERENCEEXPRESSION,"custo",P24.java(88:10-88:15),"custo"
172,LITERAL,"",P24.java(66:11-66:12),"0"
173,DECLAREDREFERENCEEXPRESSION,"r",P24.java(65:3-65:4),"r"
174,MEMBEREXPRESSION,"dist",P24.java(65:3-65:9),"r.dist"
175,LITERAL,"",P24.java(65:12-65:13),"0"
176,COMPOUNDSTATEMENT,"",P24.java(68:26-86:4),"{

			double min = 9999999;

			for (int j=0;j<nS ;j++ ) {
				if ( (sardas[j].used == false) && (sardas[j].dist ) < min ){ min = sardas[j].dist ; u = j; }
			}

			custo+= min;
			sardas[u].used = true;

			//System.out.println(""u: "" + u + "" min:"" + min);
			
			for (int v=0;v<nS ;v++ ) {
				if ( (sardas[v].used == false) && (distancias[u][v] ) < sardas[v].dist ){ sardas[v].dist = distancias[u][v]; }
			}


		}"
177,DECLARATIONSTATEMENT,"",P24.java(68:8-68:15),"int i=0"
178,BINARYOPERATOR,"<",P24.java(68:16-68:20),"i<nS"
179,UNARYOPERATOR,"++",P24.java(68:21-68:24),"i++"
180,VARIABLEDECLARATION,"i",P24.java(68:12-68:15),"i=0"
181,LITERAL,"",P24.java(70:17-70:24),"9999999"
182,DECLARATIONSTATEMENT,"",P24.java(70:4-70:25),"double min = 9999999;"
183,FORSTATEMENT,"",P24.java(72:4-74:5),"for (int j=0;j<nS ;j++ ) {
				if ( (sardas[j].used == false) && (sardas[j].dist ) < min ){ min = sardas[j].dist ; u = j; }
			}"
184,BINARYOPERATOR,"+=",P24.java(76:4-76:16),"custo+= min;"
185,BINARYOPERATOR,"=",P24.java(77:4-77:26),"sardas[u].used = true;"
186,FORSTATEMENT,"",P24.java(81:4-83:5),"for (int v=0;v<nS ;v++ ) {
				if ( (sardas[v].used == false) && (distancias[u][v] ) < sardas[v].dist ){ sardas[v].dist = distancias[u][v]; }
			}"
187,VARIABLEDECLARATION,"min",P24.java(70:11-70:24),"min = 9999999"
188,DECLAREDREFERENCEEXPRESSION,"i",P24.java(68:21-68:22),"i"
189,COMPOUNDSTATEMENT,"",P24.java(81:29-83:5),"{
				if ( (sardas[v].used == false) && (distancias[u][v] ) < sardas[v].dist ){ sardas[v].dist = distancias[u][v]; }
			}"
190,DECLARATIONSTATEMENT,"",P24.java(81:9-81:16),"int v=0"
191,BINARYOPERATOR,"<",P24.java(81:17-81:21),"v<nS"
192,UNARYOPERATOR,"++",P24.java(81:23-81:26),"v++"
193,VARIABLEDECLARATION,"v",P24.java(81:13-81:16),"v=0"
194,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(82:11-82:17),"sardas"
195,DECLAREDREFERENCEEXPRESSION,"v",P24.java(81:23-81:24),"v"
196,DECLAREDREFERENCEEXPRESSION,"v",P24.java(81:17-81:18),"v"
197,IFSTATEMENT,"",P24.java(82:5-82:115),"if ( (sardas[v].used == false) && (distancias[u][v] ) < sardas[v].dist ){ sardas[v].dist = distancias[u][v]; }"
198,COMPOUNDSTATEMENT,"",P24.java(82:77-82:115),"{ sardas[v].dist = distancias[u][v]; }"
199,BINARYOPERATOR,"&&",P24.java(82:10-82:75),"(sardas[v].used == false) && (distancias[u][v] ) < sardas[v].dist"
200,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(82:79-82:85),"sardas"
201,BINARYOPERATOR,"==",P24.java(82:11-82:34),"sardas[v].used == false"
202,BINARYOPERATOR,"<",P24.java(82:39-82:75),"(distancias[u][v] ) < sardas[v].dist"
203,MEMBEREXPRESSION,"used",P24.java(82:11-82:25),"sardas[v].used"
204,LITERAL,"",P24.java(82:29-82:34),"false"
205,DECLAREDREFERENCEEXPRESSION,"distancias",P24.java(82:40-82:50),"distancias"
206,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(82:11-82:20),"sardas[v]"
207,DECLAREDREFERENCEEXPRESSION,"v",P24.java(82:18-82:19),"v"
208,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(82:40-82:56),"distancias[u][v]"
209,MEMBEREXPRESSION,"dist",P24.java(82:61-82:75),"sardas[v].dist"
210,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(82:61-82:70),"sardas[v]"
211,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(82:61-82:67),"sardas"
212,DECLAREDREFERENCEEXPRESSION,"v",P24.java(82:68-82:69),"v"
213,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(82:40-82:53),"distancias[u]"
214,DECLAREDREFERENCEEXPRESSION,"v",P24.java(82:54-82:55),"v"
215,DECLAREDREFERENCEEXPRESSION,"u",P24.java(82:51-82:52),"u"
216,BINARYOPERATOR,"=",P24.java(82:79-82:113),"sardas[v].dist = distancias[u][v];"
217,MEMBEREXPRESSION,"dist",P24.java(82:79-82:93),"sardas[v].dist"
218,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(82:96-82:112),"distancias[u][v]"
219,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(82:96-82:109),"distancias[u]"
220,DECLAREDREFERENCEEXPRESSION,"v",P24.java(82:110-82:111),"v"
221,DECLAREDREFERENCEEXPRESSION,"distancias",P24.java(82:96-82:106),"distancias"
222,DECLAREDREFERENCEEXPRESSION,"u",P24.java(82:107-82:108),"u"
223,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(82:79-82:88),"sardas[v]"
224,DECLAREDREFERENCEEXPRESSION,"v",P24.java(82:86-82:87),"v"
225,LITERAL,"",P24.java(81:15-81:16),"0"
226,DECLAREDREFERENCEEXPRESSION,"nS",P24.java(81:19-81:21),"nS"
227,LITERAL,"",P24.java(72:15-72:16),"0"
228,MEMBEREXPRESSION,"used",P24.java(77:4-77:18),"sardas[u].used"
229,LITERAL,"",P24.java(77:21-77:25),"true"
230,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(77:4-77:13),"sardas[u]"
231,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(77:4-77:10),"sardas"
232,DECLAREDREFERENCEEXPRESSION,"u",P24.java(77:11-77:12),"u"
233,DECLAREDREFERENCEEXPRESSION,"custo",P24.java(76:4-76:9),"custo"
234,DECLAREDREFERENCEEXPRESSION,"min",P24.java(76:12-76:15),"min"
235,COMPOUNDSTATEMENT,"",P24.java(72:29-74:5),"{
				if ( (sardas[j].used == false) && (sardas[j].dist ) < min ){ min = sardas[j].dist ; u = j; }
			}"
236,DECLARATIONSTATEMENT,"",P24.java(72:9-72:16),"int j=0"
237,BINARYOPERATOR,"<",P24.java(72:17-72:21),"j<nS"
238,UNARYOPERATOR,"++",P24.java(72:23-72:26),"j++"
239,VARIABLEDECLARATION,"j",P24.java(72:13-72:16),"j=0"
240,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(73:11-73:17),"sardas"
241,IFSTATEMENT,"",P24.java(73:5-73:97),"if ( (sardas[j].used == false) && (sardas[j].dist ) < min ){ min = sardas[j].dist ; u = j; }"
242,DECLAREDREFERENCEEXPRESSION,"j",P24.java(72:23-72:24),"j"
243,COMPOUNDSTATEMENT,"",P24.java(73:64-73:97),"{ min = sardas[j].dist ; u = j; }"
244,BINARYOPERATOR,"&&",P24.java(73:10-73:62),"(sardas[j].used == false) && (sardas[j].dist ) < min"
245,DECLAREDREFERENCEEXPRESSION,"min",P24.java(73:66-73:69),"min"
246,BINARYOPERATOR,"=",P24.java(73:66-73:88),"min = sardas[j].dist ;"
247,BINARYOPERATOR,"=",P24.java(73:89-73:95),"u = j;"
248,DECLAREDREFERENCEEXPRESSION,"u",P24.java(73:89-73:90),"u"
249,DECLAREDREFERENCEEXPRESSION,"j",P24.java(73:93-73:94),"j"
250,MEMBEREXPRESSION,"dist",P24.java(73:72-73:86),"sardas[j].dist"
251,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(73:72-73:81),"sardas[j]"
252,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(73:72-73:78),"sardas"
253,DECLAREDREFERENCEEXPRESSION,"j",P24.java(73:79-73:80),"j"
254,BINARYOPERATOR,"==",P24.java(73:11-73:34),"sardas[j].used == false"
255,BINARYOPERATOR,"<",P24.java(73:39-73:62),"(sardas[j].dist ) < min"
256,MEMBEREXPRESSION,"used",P24.java(73:11-73:25),"sardas[j].used"
257,LITERAL,"",P24.java(73:29-73:34),"false"
258,DECLAREDREFERENCEEXPRESSION,"sardas",P24.java(73:40-73:46),"sardas"
259,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(73:11-73:20),"sardas[j]"
260,DECLAREDREFERENCEEXPRESSION,"j",P24.java(73:18-73:19),"j"
261,MEMBEREXPRESSION,"dist",P24.java(73:40-73:54),"sardas[j].dist"
262,DECLAREDREFERENCEEXPRESSION,"min",P24.java(73:59-73:62),"min"
263,ARRAYSUBSCRIPTIONEXPRESSION,"",P24.java(73:40-73:49),"sardas[j]"
264,DECLAREDREFERENCEEXPRESSION,"j",P24.java(73:47-73:48),"j"
265,DECLAREDREFERENCEEXPRESSION,"j",P24.java(72:17-72:18),"j"
266,DECLAREDREFERENCEEXPRESSION,"nS",P24.java(72:19-72:21),"nS"
267,DECLAREDREFERENCEEXPRESSION,"i",P24.java(68:16-68:17),"i"
268,DECLAREDREFERENCEEXPRESSION,"nS",P24.java(68:18-68:20),"nS"
269,LITERAL,"",P24.java(68:14-68:15),"0"
270,FIELDDECLARATION,"this",,""
271,FIELDDECLARATION,"x",P24.java(4:2-4:14),"x"
272,FIELDDECLARATION,"dist",P24.java(5:2-5:14),"dist"
273,FIELDDECLARATION,"used",P24.java(6:2-6:15),"used"
274,CONSTRUCTORDECLARATION,"Sarda",P24.java(8:2-13:3),"Sarda(double x ,double y){
		this.x = x;
		this.y = y;
		used = false;   // inicializar como nao usado 
		dist = 999999;  // inicializar distancia ao maximo
	}"
275,COMPOUNDSTATEMENT,"",P24.java(8:27-13:3),"{
		this.x = x;
		this.y = y;
		used = false;   // inicializar como nao usado 
		dist = 999999;  // inicializar distancia ao maximo
	}"
276,PARAMVARIABLEDECLARATION,"x",P24.java(8:8-8:16),"double x"
277,PARAMVARIABLEDECLARATION,"y",P24.java(8:18-8:26),"double y"
278,DECLAREDREFERENCEEXPRESSION,"this",P24.java(9:3-9:7),"this"
279,RETURNSTATEMENT,"",,""
280,BINARYOPERATOR,"=",P24.java(9:3-9:14),"this.x = x;"
281,BINARYOPERATOR,"=",P24.java(10:3-10:14),"this.y = y;"
282,BINARYOPERATOR,"=",P24.java(11:3-11:16),"used = false;"
283,BINARYOPERATOR,"=",P24.java(12:3-12:17),"dist = 999999;"
284,MEMBEREXPRESSION,"dist",P24.java(12:3-12:7),"dist"
285,LITERAL,"",P24.java(12:10-12:16),"999999"
286,DECLAREDREFERENCEEXPRESSION,"this",P24.java(12:3-12:7),"this"
287,MEMBEREXPRESSION,"y",P24.java(10:3-10:9),"this.y"
288,DECLAREDREFERENCEEXPRESSION,"y",P24.java(10:12-10:13),"y"
289,DECLAREDREFERENCEEXPRESSION,"this",P24.java(11:3-11:7),"this"
290,DECLAREDREFERENCEEXPRESSION,"this",P24.java(10:3-10:7),"this"
291,MEMBEREXPRESSION,"used",P24.java(11:3-11:7),"used"
292,LITERAL,"",P24.java(11:10-11:15),"false"
293,MEMBEREXPRESSION,"x",P24.java(9:3-9:9),"this.x"
294,DECLAREDREFERENCEEXPRESSION,"x",P24.java(9:12-9:13),"x"
